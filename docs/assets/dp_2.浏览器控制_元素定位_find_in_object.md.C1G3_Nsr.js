import{_ as t,c as e,o as i,aM as a}from"./chunks/framework.Fs4ucY6U.js";const c=JSON.parse('{"title":"🔦 页面或元素内查找","description":"","frontmatter":{"id":"find_in_object","title":"🔦 页面或元素内查找"},"headers":[],"relativePath":"dp/2.浏览器控制/元素定位/find_in_object.md","filePath":"dp/2.浏览器控制/元素定位/find_in_object.md"}'),n={name:"dp/2.浏览器控制/元素定位/find_in_object.md"};function l(d,s,h,p,r,o){return i(),e("div",null,[...s[0]||(s[0]=[a(`<h1 id="🔦-页面或元素内查找" tabindex="-1">🔦 页面或元素内查找 <a class="header-anchor" href="#🔦-页面或元素内查找" aria-label="Permalink to &quot;🔦 页面或元素内查找&quot;">​</a></h1><h2 id="✅️️-页面或元素内查找" tabindex="-1">✅️️ 页面或元素内查找 <a class="header-anchor" href="#✅️️-页面或元素内查找" aria-label="Permalink to &quot;✅️️ 页面或元素内查找&quot;">​</a></h2><p>页面对象和元素对象都拥有<code>ele()</code>和<code>eles()</code>方法，用于获取其内部指定子元素。</p><h3 id="📌-ele" tabindex="-1">📌 <code>ele()</code> <a class="header-anchor" href="#📌-ele" aria-label="Permalink to &quot;📌 \`ele()\`&quot;">​</a></h3><p>用于查找其内部第一个符合条件的元素。</p><p><code>SessionPage</code>和<code>ChromiumPage</code>获取元素的方法是一致的，但前者返回的元素对象为<code>SessionElement</code>，后者是<code>ChromiumElement</code>。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>locator</code></td><td style="text-align:center;"><code>str</code><br><code>Tuple[str, str]</code></td><td style="text-align:center;">必填</td><td>元素的定位信息。可以是查询字符串，或 loc 元组</td></tr><tr><td style="text-align:center;"><code>index</code></td><td style="text-align:center;"><code>int</code></td><td style="text-align:center;"><code>1</code></td><td>获取第几个匹配的元素，从<code>1</code>开始，可输入负数表示从后面开始数</td></tr><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>等待元素出现的超时时间（秒），为<code>None</code>使用页面对象设置</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>SessionElement</code></td><td>s 模式下返回静态元素对象</td></tr><tr><td style="text-align:center;"><code>ChromiumElement</code></td><td>d 模式下返回找到的第一个符合条件的浏览器元素对象</td></tr><tr><td style="text-align:center;"><code>ChromiumFrame</code></td><td>当结果是框架元素时</td></tr><tr><td style="text-align:center;"><code>NoneElement</code></td><td>未找到符合条件的元素时返回</td></tr></tbody></table><div class="info custom-block"><p class="custom-block-title">说明</p><pre><code>- loc 元组是指 selenium 定位符，例：(By.ID, &#39;****&#39;)。下同。
- \`ele(&#39;****&#39;, index=2)\`和\`eles(&#39;****&#39;)[1]\`结果一样，不过前者会快很多。
</code></pre></div><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SessionPage</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SessionPage()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在页面内查找元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page.ele(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#one&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在元素内查找后代元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ele1.ele(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;第二行&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h3 id="📌-eles" tabindex="-1">📌 <code>eles()</code> <a class="header-anchor" href="#📌-eles" aria-label="Permalink to &quot;📌 \`eles()\`&quot;">​</a></h3><p>此方法与<code>ele()</code>相似，但返回的是匹配到的所有元素组成的列表。</p><p>页面对象和元素对象都可调用这个方法。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>locator</code></td><td style="text-align:center;"><code>str</code><br><code>Tuple[str, str]</code></td><td style="text-align:center;">必填</td><td>元素的定位信息，可以是查询字符串，或 loc 元组</td></tr><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>等待元素出现的超时时间（秒），为<code>None</code>使用页面对象设置</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>SessionElementsList</code></td><td>s 模式下返回静态元素对象组成的列表</td></tr><tr><td style="text-align:center;"><code>ChromiumElementsList</code></td><td>d 模式下返回浏览器元素对象组成的列表</td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 获取页面内的所有p元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p_eles </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab.eles(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tag:p&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 获取ele1元素内的所有p元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p_eles </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ele1.eles(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tag:p&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 打印第一个p元素的文本</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p_eles[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><hr><h3 id="📌-get-frame" tabindex="-1">📌 <code>get_frame()</code> <a class="header-anchor" href="#📌-get-frame" aria-label="Permalink to &quot;📌 \`get_frame()\`&quot;">​</a></h3><p><code>&lt;iframe&gt;</code>和<code>&lt;frame&gt;</code>也可以用<code>ele()</code>查找到，生成的对象是<code>ChromiumFrame</code>而不是<code>ChromiumElement</code>。</p><p>但不建议用<code>ele()</code>获取<code>&lt;iframe&gt;</code>元素，因为 IDE 无法正确提示后续操作。</p><p>建议用<code>get_frame()</code>方法获取，页面对象和元素对象都有这个方法。</p><p>使用方法与<code>ele()</code>一致，可以用定位符查找。还增加了用序号、id、name 属性定位元素的功能。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>loc_ind_ele</code></td><td style="text-align:center;"><code>str</code><br><code>int</code><br><code>ChromiumFrame</code></td><td style="text-align:center;">必填</td><td>定位符<br><code>&lt;iframe&gt;</code>元素序号（从<code>1</code>开始，负数表示倒数）<br><code>ChromiumFrame对象</code><br><code>id</code>属性内容<br><code>name</code>属性内容</td></tr><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>超时时间（秒），为<code>None</code>时使用页面超时时间</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumFrame</code></td><td><code>&lt;frame&gt;</code>或<code>&lt;iframe&gt;</code>元素对象</td></tr><tr><td style="text-align:center;"><code>NoneElement</code></td><td>找不到时返回<code>NoneElement</code></td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在标签页中获取第一个iframe元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iframe </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab.get_frame(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在元素中获取id为\`theFrame\`的&lt;iframe&gt;元素对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iframe </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ele.get_frame(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#theFrame&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h3 id="📌-get-frames" tabindex="-1">📌 <code>get_frames()</code> <a class="header-anchor" href="#📌-get-frames" aria-label="Permalink to &quot;📌 \`get_frames()\`&quot;">​</a></h3><p>此方法用于获取页面中多个符合条件的<code>&lt;frame&gt;</code>或<code>&lt;iframe&gt;</code>对象。</p><p>元素对象无此方法。</p><div class="info custom-block"><p class="custom-block-title">提醒</p><pre><code>获取所有\`&lt;iframe&gt;\`会很慢，而且浪费资源，非必要别用。
</code></pre></div><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>locator</code></td><td style="text-align:center;"><code>str</code><br><code>Tuple[str, str]</code></td><td style="text-align:center;"><code>None</code></td><td>定位符，为<code>None</code>时返回所有</td></tr><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>超时时间（秒），为<code>None</code>时使用页面超时时间</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumElementsList</code></td><td><code>&lt;frame&gt;</code>或<code>&lt;iframe&gt;</code>元素对象组成的列表</td></tr></tbody></table><hr><h2 id="✅️️-静态方式查找" tabindex="-1">✅️️ 静态方式查找 <a class="header-anchor" href="#✅️️-静态方式查找" aria-label="Permalink to &quot;✅️️ 静态方式查找&quot;">​</a></h2><p>静态元素即 s 模式的<code>SessionElement</code>元素对象，是纯文本构造的，因此用它处理速度非常快。<br> 对于复杂的页面，要在成百上千个元素中采集数据时，转换为静态元素可把速度提升几个数量级。<br> 作者曾在实践的时候，用同一套逻辑，仅仅把元素转换为静态，就把一个要 30 秒才完成的页面，加速到零点几秒完成。<br> 我们甚至可以把整个页面转换为静态元素，再在其中提取信息。<br> 当然，这种元素不能进行点击等交互。<br> 用<code>s_ele()</code>可在把查找到的动态元素转换为静态元素输出，或者获取元素或页面本身的静态元素副本。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><pre><code>如果需要获取多条数据，不要反复使用\`s_ele()\`，只要在容器元素调用一次获取其静态副本，再在其中执行获取多个元素。
</code></pre></div><h3 id="📌-s-ele" tabindex="-1">📌 <code>s_ele()</code> <a class="header-anchor" href="#📌-s-ele" aria-label="Permalink to &quot;📌 \`s_ele()\`&quot;">​</a></h3><p>页面对象和元素对象都拥有此方法，用于查找第一个匹配条件的元素，获取其静态版本。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>locator</code></td><td style="text-align:center;"><code>str</code><br><code>Tuple[str, str]</code></td><td style="text-align:center;"><code>None</code></td><td>元素的定位信息，可以是查询字符串，或 loc 元组，为<code>None</code>时获取调用者本身的静态版本</td></tr><tr><td style="text-align:center;"><code>index</code></td><td style="text-align:center;"><code>int</code></td><td style="text-align:center;"><code>1</code></td><td>获取第几个匹配的元素，从<code>1</code>开始，可输入负数表示从后面开始数</td></tr><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>查找元素超时时间（秒），为<code>None</code>与页面等待时间一致</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>SessionElement</code></td><td>返回查找到的第一个符合条件的元素对象的静态版本</td></tr><tr><td style="text-align:center;"><code>NoneElement</code></td><td>限时内未找到符合条件的元素时返回<code>NoneElement</code>对象</td></tr></tbody></table><div class="warning custom-block"><p class="custom-block-title">注意</p><pre><code>页面对象和元素对象的\`s_ele()\`方法不能搜索到在\`&lt;iframe&gt;\`里的元素，页面对象的静态版本也不能搜索\`&lt;iframe&gt;\`里的元素。
要使用\`&lt;iframe&gt;\`里元素的静态版本，可先获取该元素，再转换。而使用\`ChromiumFrame\`对象，则可以直接用\`s_ele()\`查找元素，这在后面章节再讲述。
</code></pre></div><div class="tip custom-block"><p class="custom-block-title">Tips</p><pre><code>从一个\`ChromiumElement\`元素获取到的\`SessionElement\`版本，依然能够使用相对定位方法定位祖先或兄弟元素。
</code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium().latest_tab</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在页面中查找元素，获取其静态版本</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab.s_ele(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;search text&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在动态元素中查找元素，获取其静态版本</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab.ele(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;search text&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ele.s_ele()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 获取页面元素的静态副本（不传入参数）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s_page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab.s_ele()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 获取动态元素的静态副本</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s_ele </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ele.s_ele()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在静态副本中查询下级元素（因为已经是静态元素，用ele()查找结果也是静态）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s_page.ele(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;search text&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s_ele.ele(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;search text&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h3 id="📌-s-eles" tabindex="-1">📌 <code>s_eles()</code> <a class="header-anchor" href="#📌-s-eles" aria-label="Permalink to &quot;📌 \`s_eles()\`&quot;">​</a></h3><p>此方法与<code>s_ele()</code>相似，但返回的是匹配到的所有元素组成的列表，或属性值组成的列表。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>locator</code></td><td style="text-align:center;"><code>str</code><br><code>Tuple[str, str]</code></td><td style="text-align:center;">必填</td><td>元素的定位信息，可以是查询字符串，或 loc 元组</td></tr><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>查找元素超时时间（秒），为<code>None</code>与页面等待时间一致</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>SessionElementsList</code></td><td>返回找到的所有元素的<code>SessionElement</code>版本组成的列表</td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium().latest_tab</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ele </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab.s_eles(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;search text&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ele.text)</span></span></code></pre></div><hr><h2 id="✅️-获取页面焦点元素" tabindex="-1">✅️ 获取页面焦点元素 <a class="header-anchor" href="#✅️-获取页面焦点元素" aria-label="Permalink to &quot;✅️ 获取页面焦点元素&quot;">​</a></h2><p>使用页面对象的<code>active_ele</code>属性获取页面上焦点所在元素。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab.active_ele</span></span></code></pre></div><hr><h2 id="✅️️-查找-iframe-中的元素" tabindex="-1">✅️️ 查找<code>&lt;iframe&gt;</code>中的元素 <a class="header-anchor" href="#✅️️-查找-iframe-中的元素" aria-label="Permalink to &quot;✅️️ 查找\`&lt;iframe&gt;\`中的元素&quot;">​</a></h2><h3 id="📌-在页面下跨级查找" tabindex="-1">📌 在页面下跨级查找 <a class="header-anchor" href="#📌-在页面下跨级查找" aria-label="Permalink to &quot;📌 在页面下跨级查找&quot;">​</a></h3><p>与 selenium 不同，本库可以直接查找同域<code>&lt;iframe&gt;</code>里面的元素。<br> 而且无视层级，可以直接获取到多层<code>&lt;iframe&gt;</code>里的元素。无需切入切出，大大简化了程序逻辑，使用更便捷。<br> 但同域的<code>&lt;iframe&gt;</code>才能这样查找。</p><p>假设在页面中有个两级<code>&lt;iframe&gt;</code>，其中有个元素<code>&lt;div id=&#39;abc&#39;&gt;&lt;/div&gt;</code>，可以这样获取：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium().latest_tab</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#abc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>获取前后无需切入切出，也不影响获取页面上其它元素。</p><p>如果用 selenium，要这样写：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">driver </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> webdriver.Chrome()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">driver.switch_to.frame(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">driver.switch_to.frame(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> driver.find_element(By.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;abc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">driver.switch_to.default_content()</span></span></code></pre></div><p>显然比较繁琐，而且切入到<code>&lt;iframe&gt;</code>后无法对<code>&lt;iframe&gt;</code>外的元素进行操作。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><pre><code>- 跨级查找只是页面对象支持，元素对象不能直接查找内部 iframe 里的元素。
- 跨级查找只能用于与主框架同域名的\`&lt;iframe&gt;\`，不同域名的请用下面的方法。
</code></pre></div><hr><h3 id="📌-在-iframe-元素内查找" tabindex="-1">📌 在 iframe 元素内查找 <a class="header-anchor" href="#📌-在-iframe-元素内查找" aria-label="Permalink to &quot;📌 在 iframe 元素内查找&quot;">​</a></h3><p>对于跨域的<code>&lt;iframe&gt;</code>，我们无法通过页面直接查找里面的元素，可以先获取到<code>&lt;iframe&gt;</code>元素，再在其下查找。</p><p>当然，非跨域<code>&lt;iframe&gt;</code>也可以这样操作。</p><p>假设一个<code>&lt;iframe&gt;</code>的 id 为 <code>&#39;iframe1&#39;</code>，要在其中查找一个 id 为<code>&#39;abc&#39;</code>的元素：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium().latest_tab</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iframe </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#iframe1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iframe(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#abc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>这个<code>&lt;iframe&gt;</code>元素是一个页面对象，因此可以继续在其下进行跨<code>&lt;iframe&gt;</code>查找（相对这个<code>&lt;iframe&gt;</code>不跨域的）。</p><hr><h2 id="✅️️-shadowroot内查找" tabindex="-1">✅️️ <code>ShadowRoot</code>内查找 <a class="header-anchor" href="#✅️️-shadowroot内查找" aria-label="Permalink to &quot;✅️️ \`ShadowRoot\`内查找&quot;">​</a></h2><p>本库把 shadow-root 也作为元素对象看待，是为<code>ShadowRoot</code>对象。 该对象可与普通元素一样查找下级元素和 DOM 内相对定位。<br> 对<code>ShadowRoot</code>对象进行相对定位时，把它看作其父对象内部的第一个对象，其余定位逻辑与普通对象一致。</p><p>用元素对象的<code>shadow_root</code>属性可获取<code>ShadowRoot</code>对象。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><pre><code>如果\`ShadowRoot\`元素的下级元素中有其它\`ShadowRoot\`元素，那这些下级\`ShadowRoot\`
元素内部是无法直接通过定位语句查找到的，只能先定位到其父元素，再用\`shadow-root\`属性获取。
</code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 获取一个 shadow-root 元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sr_ele </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page.ele(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#app&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).shadow_root</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在该元素下查找下级元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sr_ele.ele(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tag:div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用相对定位获取其它元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sr_ele.parent(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sr_ele.next(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tag:div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sr_ele.after(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tag:div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">eles </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sr_ele.nexts(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tag:div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 定位下级元素中的 shadow+-root 元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sr_ele2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sr_ele.ele(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tag:div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).shadow_root</span></span></code></pre></div><p>由于 shadow-root 不能跨级查找，链式操作非常常见，所以设计了一个简写：<code>sr</code>，功能和<code>shadow_root</code> 一样，都是获取元素内部的<code>ShadowRoot</code>。</p><p><strong>多级 shadow-root 链式操作示例：</strong></p><p>以下这段代码，可以打印浏览器历史第一页，可见是通过多级 shadow-root 来获取的。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium().latest_tab</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;chrome://history/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#history-app&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).sr(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#history&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).sr.eles(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;t:history-item&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i.sr(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#item-container&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).text.replace(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><hr><h2 id="✅️️-同时匹配多个定位符" tabindex="-1">✅️️ 同时匹配多个定位符 <a class="header-anchor" href="#✅️️-同时匹配多个定位符" aria-label="Permalink to &quot;✅️️ 同时匹配多个定位符&quot;">​</a></h2><p>所有页面或元素对象都有<code>find()</code>方法，可接收多个定位符，同时查找多个（批）不同定位符的元素。</p><p>以<code>dict</code>方法返回每个定位符结果。</p><div class="tip custom-block"><p class="custom-block-title">说明</p><pre><code>当\`first_ele\`为\`True\`时，如果一个定位符没有被执行过查找，它返回的结果为\`None\`。
</code></pre></div><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>locators</code></td><td style="text-align:center;"><code>List[str]</code><br><code>Tuple[str, str]</code><br><code>str</code></td><td style="text-align:center;">必填</td><td>一个定位符或多个组成的列表</td></tr><tr><td style="text-align:center;"><code>any_one</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>True</code></td><td>是否任何一个定位符找到结果即返回</td></tr><tr><td style="text-align:center;"><code>first_ele</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>True</code></td><td>每个定位符获取第一个元素还是所有元素</td></tr><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>超时时间（秒），为<code>None</code>使用该对象默认设置</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">说明</p><pre><code>以下所说的 “定位符”，是\`str\`或\`tuple\`类型的。
“元素对象”，是\`ChromiumElement\`（d 模式）或\`SessionElement\`（s 模式）类型的，没有找到时是\`NoneElement\`类型的。
“元素对象组成的列表” 是\`ChromiumElementsList\`（d 模式）或\`SessionElementsList\`（s 模式）类型的。
\`any_one\`参数为\`True\`时，以\`tuple\`方式返回找到目标的定位符和结果，为\`False\`时以\`dict\`方法返回每个定位符结果。
</code></pre></div><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th style="text-align:center;"><code>any_one</code>参数取值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>tuple(定位符, 元素对象)</code></td><td style="text-align:center;"><code>True</code></td><td><code>first_ele</code>为<code>True</code>时，返回第一个有结果的定位符找到的第一个元素对象</td></tr><tr><td style="text-align:center;"><code>tuple(定位符, 元素对象组成的列表)</code></td><td style="text-align:center;"><code>True</code></td><td><code>first_ele</code>为<code>False</code>时，返回第一个有结果的定位符找到的所有元素对象</td></tr><tr><td style="text-align:center;"><code>tuple(None, None)</code></td><td style="text-align:center;"><code>True</code></td><td>所有定位符都没有找到元素，返回<code>(None, None)</code></td></tr><tr><td style="text-align:center;"><code>dict{定位符: 元素对象}</code></td><td style="text-align:center;"><code>False</code></td><td><code>first_ele</code>为<code>True</code>时，每个定位符返回第一个元素，找不到时为<code>NoneElement</code></td></tr><tr><td style="text-align:center;"><code>dict{定位符: 元素对象组成的列表}</code></td><td style="text-align:center;"><code>False</code></td><td><code>first_ele</code>为<code>False</code>时，每个定位符返回所有结果元素组成的列表</td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium().latest_tab</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://www.baidu.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab.find([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#kw&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#su&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res)</span></span></code></pre></div>`,96)])])}const E=t(n,[["render",l]]);export{c as __pageData,E as default};
