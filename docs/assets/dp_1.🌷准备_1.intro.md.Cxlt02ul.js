import{_ as a,c as i,o as e,aN as n}from"./chunks/framework.0ZSa6Wd7.js";const k=JSON.parse('{"title":"基本概念","description":"","frontmatter":{"id":"intro","permalink":"/dp/prepare/intro","title":" 基本概念"},"headers":[],"relativePath":"dp/1.🌷准备/1.intro.md","filePath":"dp/1.🌷准备/1.intro.md"}'),t={name:"dp/1.🌷准备/1.intro.md"};function l(h,s,d,p,r,o){return e(),i("div",null,[...s[0]||(s[0]=[n(`<h1 id="⤵️drissionpage-基本概念解析" tabindex="-1">⤵️DrissionPage 基本概念解析 <a class="header-anchor" href="#⤵️drissionpage-基本概念解析" aria-label="Permalink to &quot;⤵️DrissionPage 基本概念解析&quot;">​</a></h1><h2 id="一、网页自动化概述" tabindex="-1">一、网页自动化概述 <a class="header-anchor" href="#一、网页自动化概述" aria-label="Permalink to &quot;一、网页自动化概述&quot;">​</a></h2><p>网页自动化主要存在两种常见形式，二者各有优劣，DrissionPage 对其进行了整合优化：</p><table tabindex="0"><thead><tr><th>自动化形式</th><th>优势</th><th>劣势</th><th>典型工具/实现</th></tr></thead><tbody><tr><td>直接向服务器发送数据包</td><td>轻量级、速度快，便于多线程与分布式部署</td><td>当数据包构成复杂或含加密技术时，开发难度大幅增加</td><td>requests 库</td></tr><tr><td>控制浏览器与网页交互</td><td>能处理复杂页面交互（如点击、填写表单），无需深入解构数据包</td><td>运行速度受浏览器制约，较慢且占用内存多</td><td>传统 selenium</td></tr></tbody></table><p>DrissionPage 以页面为单位，对 Chromium 协议和 requests 进行重新封装，实现了上述两种模式的互通，并加入常用的页面和元素控制功能，可显著降低开发难度与代码量。其核心是融合了操作浏览器的 Driver 对象与管理 requests 连接的 Session 对象，以“Page”为单位提供使用。</p><p>版本演进方面：</p><ul><li>旧版本：基于 selenium 和 requests 封装实现。</li><li>3.0 版：作者独立实现 selenium 全部功能，摆脱对 selenium 的依赖，功能更强、运行效率更高、开发更灵活。</li><li>4.0 版：在 3.0 基础上重构项目底层，逻辑更合理。 若需了解旧版使用方法，可查阅“旧版使用方法”章节。</li></ul><h2 id="二、基本使用逻辑" tabindex="-1">二、基本使用逻辑 <a class="header-anchor" href="#二、基本使用逻辑" aria-label="Permalink to &quot;二、基本使用逻辑&quot;">​</a></h2><p>无论是控制浏览器，还是收发数据包，DrissionPage 的操作逻辑保持一致，具体流程如下：</p><ol><li>创建页面对象：这是自动化操作的起点，根据需求选择合适的页面对象类型。</li><li>获取元素对象：从已创建的页面对象中，定位并获取所需的元素对象。</li><li>操作与数据获取：通过对元素对象进行读取（如获取文本、属性）或操作（如点击、输入），实现数据获取或页面控制。</li></ol><p>由此可见，DrissionPage 中最核心的两类对象为<strong>页面对象</strong>及其生成的<strong>元素对象</strong>。</p><h2 id="三、主要对象分类" tabindex="-1">三、主要对象分类 <a class="header-anchor" href="#三、主要对象分类" aria-label="Permalink to &quot;三、主要对象分类&quot;">​</a></h2><h3 id="一-浏览器和标签页对象" tabindex="-1">（一）浏览器和标签页对象 <a class="header-anchor" href="#一-浏览器和标签页对象" aria-label="Permalink to &quot;（一）浏览器和标签页对象&quot;">​</a></h3><table tabindex="0"><thead><tr><th>对象名称</th><th>功能描述</th></tr></thead><tbody><tr><td><code>Chromium</code></td><td>浏览器对象，主要用于连接浏览器、管理标签页以及执行其他与浏览器整体相关的操作</td></tr><tr><td><code>MixTab</code></td><td>浏览器标签页对象，由 <code>Chromium</code> 对象生成，一个 <code>MixTab</code> 对象对应控制一个实际的浏览器标签页</td></tr><tr><td><code>ChromiumTab</code></td><td>同样是标签页对象，由 <code>ChromiumPage</code> 对象产生，与 <code>MixTab</code> 不同的是，它无法切换收发数据包模式</td></tr></tbody></table><h3 id="二-元素对象" tabindex="-1">（二）元素对象 <a class="header-anchor" href="#二-元素对象" aria-label="Permalink to &quot;（二）元素对象&quot;">​</a></h3><table tabindex="0"><thead><tr><th>对象名称</th><th>功能描述</th></tr></thead><tbody><tr><td><code>ChromiumElement</code></td><td>浏览器元素对象，用于表示浏览器页面中的普通元素</td></tr><tr><td><code>SessionElement</code></td><td>静态元素对象，适用于基于数据包模式获取的页面元素</td></tr><tr><td><code>ChromiumFrame</code></td><td><code>&lt;iframe&gt;</code> 元素对象，兼具标签页对象和元素的特性，可处理页面中的 iframe 嵌套场景</td></tr><tr><td><code>ShadowRoot</code></td><td>shadow-root 元素对象，用于操作页面中 shadow DOM 结构内的元素</td></tr></tbody></table><h3 id="三-page-对象" tabindex="-1">（三）Page 对象 <a class="header-anchor" href="#三-page-对象" aria-label="Permalink to &quot;（三）Page 对象&quot;">​</a></h3><table tabindex="0"><thead><tr><th>对象名称</th><th>功能描述</th></tr></thead><tbody><tr><td><code>ChromiumPage</code></td><td>能够管理浏览器本身的标签页对象，可作为程序的入口，方便启动和管理浏览器相关操作</td></tr><tr><td><code>WebPage</code></td><td>与 <code>ChromiumPage</code> 类似，但其整合了浏览器控制和收发数据包两种功能，灵活性更高</td></tr><tr><td><code>SessionPage</code></td><td>单纯用于收发数据包的页面对象，可独立使用，适用于仅需通过数据包获取数据的场景</td></tr></tbody></table><h3 id="四-统一称呼约定" tabindex="-1">（四）统一称呼约定 <a class="header-anchor" href="#四-统一称呼约定" aria-label="Permalink to &quot;（四）统一称呼约定&quot;">​</a></h3><p>为方便文档表述，DrissionPage 中对部分对象有统一称呼：</p><ul><li><code>MixTab</code>、<code>ChromiumTab</code> 统称为 <strong>Tab 对象</strong>。</li><li><code>ChromiumPage</code>、<code>WebPage</code> 和 <code>SessionPage</code> 统称为 <strong>Page 对象</strong>。</li><li>Page 对象、Tab 对象和 <code>ChromiumFrame</code> 统称为 <strong>页面对象</strong>。</li></ul><h2 id="四、对象关系图" tabindex="-1">四、对象关系图 <a class="header-anchor" href="#四、对象关系图" aria-label="Permalink to &quot;四、对象关系图&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>├─ SessionPage</span></span>
<span class="line"><span>|     └─ SessionElement</span></span>
<span class="line"><span>|           └─ SessionElement</span></span>
<span class="line"><span>├─ Chromium</span></span>
<span class="line"><span>|     └─ MixTab</span></span>
<span class="line"><span>|           ├─ ChromiumElement</span></span>
<span class="line"><span>|           |    ├─ ChromiumElement</span></span>
<span class="line"><span>|           |    ├─ ChromiumFrame</span></span>
<span class="line"><span>|           |    └─ SessionElement</span></span>
<span class="line"><span>|           ├─ SessionElement</span></span>
<span class="line"><span>|           |    └─ SessionElement</span></span>
<span class="line"><span>|           ├─ ChromiumFrame</span></span>
<span class="line"><span>|           |    ├─ ChromiumElement</span></span>
<span class="line"><span>|           |    ├─ ChromiumFrame</span></span>
<span class="line"><span>|           |    └─ SessionElement</span></span>
<span class="line"><span>|           └─ ShadowRoot</span></span>
<span class="line"><span>|                ├─ ChromiumElement</span></span>
<span class="line"><span>|                ├─ ChromiumFrame</span></span>
<span class="line"><span>|                └─ SessionElement</span></span>
<span class="line"><span>├─ SessionOptions</span></span>
<span class="line"><span>└─ ChromiumOptions</span></span></code></pre></div><h2 id="五、工作模式" tabindex="-1">五、工作模式 <a class="header-anchor" href="#五、工作模式" aria-label="Permalink to &quot;五、工作模式&quot;">​</a></h2><p><code>MixTab</code> 和 <code>WebPage</code> 这两种对象支持两种工作模式，且两种模式使用方法一致，但同一时间只能处于一种模式，可根据实际需求灵活切换。</p><h3 id="一-d-模式" tabindex="-1">（一）d 模式 <a class="header-anchor" href="#一-d-模式" aria-label="Permalink to &quot;（一）d 模式&quot;">​</a></h3><ul><li><strong>模式含义</strong>：既代表 Driver，也有 Dynamic（动态）的含义。</li><li><strong>核心功能</strong>：用于控制浏览器，不仅能读取浏览器获取到的各类信息，还能对页面执行丰富操作，如点击按钮、填写表单、开关标签页、修改元素属性、执行 JavaScript 脚本等。</li><li><strong>优缺点</strong>：功能强大，可应对复杂页面交互场景；但运行速度受浏览器性能制约，相对较慢，且会占用较多内存资源。</li></ul><h3 id="二-s-模式" tabindex="-1">（二）s 模式 <a class="header-anchor" href="#二-s-模式" aria-label="Permalink to &quot;（二）s 模式&quot;">​</a></h3><ul><li><strong>模式含义</strong>：既代表 Session，也包含 speed（速度快）、silence（静默运行）的特点。</li><li><strong>核心功能</strong>：基于数据包进行读取或发送操作，仅能处理数据层面的交互。</li><li><strong>优缺点</strong>：运行速度比 d 模式快几个数量级，资源占用少；但无法对页面进行可视化操作，也不能运行 JavaScript 脚本。</li><li><strong>适用场景</strong>：当网站数据包结构较为简单，无需复杂页面交互即可获取所需数据时，优先选择 s 模式。</li></ul><h3 id="三-模式切换场景" tabindex="-1">（三）模式切换场景 <a class="header-anchor" href="#三-模式切换场景" aria-label="Permalink to &quot;（三）模式切换场景&quot;">​</a></h3><ol><li>登录验证严格场景：若网站登录验证复杂（如含验证码），难以通过解构数据包实现登录，可先用 d 模式控制浏览器完成登录操作，再切换至 s 模式进行后续的数据爬取，既规避了处理复杂 JavaScript 逻辑的问题，又能利用 s 模式的速度优势。</li><li>复杂页面数据处理场景：当页面数据由 JavaScript 动态生成且页面结构极其复杂时，可通过 d 模式读取页面元素，再将元素转换为 s 模式的元素进行分析，能大幅提升 d 模式下的数据处理速度。</li></ol><h2 id="六、配置管理" tabindex="-1">六、配置管理 <a class="header-anchor" href="#六、配置管理" aria-label="Permalink to &quot;六、配置管理&quot;">​</a></h2><p>在网页自动化中，requests 库和浏览器通常需要配置信息（如 <code>user_agent</code>、浏览器可执行文件路径、浏览器个性化配置等）才能正常工作，而编写这些配置代码往往繁琐且重复，影响代码简洁性。</p><p>DrissionPage 采用配置文件来管理常用配置信息，程序会自动读取默认配置文件中的内容，因此在示例代码中，通常无需显式编写配置相关代码。同时，该配置功能支持以下灵活用法：</p><ul><li>支持用户保存多个不同的配置文件，根据实际使用场景调用对应的配置。</li><li>允许直接在代码中编写配置信息，从而屏蔽程序对配置文件的读取操作。</li></ul><p><strong>注意事项</strong>：当需要将程序打包发布时，必须将配置信息写入代码中，或在打包后手动将配置文件复制到程序的运行路径下，否则程序可能会因无法读取配置而报错，具体可参考相关章节的详细说明。</p><h3 id="一-核心配置对象" tabindex="-1">（一）核心配置对象 <a class="header-anchor" href="#一-核心配置对象" aria-label="Permalink to &quot;（一）核心配置对象&quot;">​</a></h3><table tabindex="0"><thead><tr><th>配置对象名称</th><th>适用范围</th></tr></thead><tbody><tr><td><code>SessionOptions</code></td><td>用于 <code>SessionPage</code> 和 <code>WebPage</code> 的 s 模式配置，可设置与数据包收发相关的参数（如请求头、超时时间等）</td></tr><tr><td><code>ChromiumOptions</code></td><td>用于浏览器相关的配置，可设置浏览器路径、启动参数（如无头模式、窗口大小等）</td></tr></tbody></table><h2 id="七、定位符" tabindex="-1">七、定位符 <a class="header-anchor" href="#七、定位符" aria-label="Permalink to &quot;七、定位符&quot;">​</a></h2><p>定位符是 DrissionPage 的一大特色功能，用于在页面中定位所需元素，其设计简洁易用，可读性和易用性优于 XPath 等其他定位方式，同时兼容 XPath、CSS Selector、selenium 定位符。以下通过对比示例展示其优势：</p><h3 id="一-定位文本包含-abc-的元素" tabindex="-1">（一）定位文本包含 <code>&#39;abc&#39;</code> 的元素 <a class="header-anchor" href="#一-定位文本包含-abc-的元素" aria-label="Permalink to &quot;（一）定位文本包含 \`&#39;abc&#39;\` 的元素&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># DrissionPage</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;abc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># selenium</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> driver.find_element(By.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">XPATH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;//*[contains(text(), &quot;abc&quot;)]&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="二-定位-class-为-abc-的元素" tabindex="-1">（二）定位 class 为 <code>&#39;abc&#39;</code> 的元素 <a class="header-anchor" href="#二-定位-class-为-abc-的元素" aria-label="Permalink to &quot;（二）定位 class 为 \`&#39;abc&#39;\` 的元素&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># DrissionPage</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.abc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># selenium</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> driver.find_element(By.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CLASS_NAME</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;abc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="三-定位元素的兄弟元素" tabindex="-1">（三）定位元素的兄弟元素 <a class="header-anchor" href="#三-定位元素的兄弟元素" aria-label="Permalink to &quot;（三）定位元素的兄弟元素&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># DrissionPage</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ele.next()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 获取当前元素的后一个兄弟元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ele.prev(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 获取当前元素前面的第二个兄弟元素</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># selenium</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ele.find_element(By.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">XPATH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.//following-sibling::*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 获取后一个兄弟元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ele.find_element(By.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">XPATH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.//preceding-sibling::*[2]&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 获取前面第二个兄弟元素</span></span></code></pre></div><p>DrissionPage 的定位符还提供了更多灵活好用的定位方法，具体可查阅“查找元素”章节的详细介绍。</p>`,47)])])}const g=a(t,[["render",l]]);export{k as __pageData,g as default};
