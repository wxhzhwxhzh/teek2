import{_ as e,c as s,o as i,aM as a}from"./chunks/framework.CWgDeAH8.js";const k=JSON.parse('{"title":"🛰️ 访问网页","description":"","frontmatter":{"id":"visit","title":"🛰️ 访问网页"},"headers":[],"relativePath":"dp/2.浏览器控制/visit.md","filePath":"dp/2.浏览器控制/visit.md"}'),n={name:"dp/2.浏览器控制/visit.md"};function d(l,t,o,c,h,r){return i(),s("div",null,[...t[0]||(t[0]=[a(`<h1 id="访问网页" tabindex="-1">访问网页 <a class="header-anchor" href="#访问网页" aria-label="Permalink to &quot;访问网页&quot;">​</a></h1><div class="wwads-cn wwads-horizontal" data-id="317"></div><br><p>本节介绍 Tab 对象访问网页的相关内容。</p><h2 id="✅️️-连接方法" tabindex="-1">✅️️ 连接方法 <a class="header-anchor" href="#✅️️-连接方法" aria-label="Permalink to &quot;✅️️ 连接方法&quot;">​</a></h2><h3 id="📌-get" tabindex="-1">📌 <code>get()</code> <a class="header-anchor" href="#📌-get" aria-label="Permalink to &quot;📌 \`get()\`&quot;">​</a></h3><p>该方法用于跳转到一个网址。当连接失败时，程序会进行重试。</p><p>可指定本地文件路径。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>url</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;">必填</td><td>目标 url，可指向本地文件路径</td></tr><tr><td style="text-align:center;"><code>show_errmsg</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>False</code></td><td>连接出错时是否显示和抛出异常</td></tr><tr><td style="text-align:center;"><code>retry</code></td><td style="text-align:center;"><code>int</code></td><td style="text-align:center;"><code>None</code></td><td>重试次数，为<code>None</code>时使用页面参数，默认<code>3</code></td></tr><tr><td style="text-align:center;"><code>interval</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>重试间隔（秒），为<code>None</code>时使用页面参数，默认<code>2</code></td></tr><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>加载超时时间（秒）</td></tr><tr><td style="text-align:center;">-------</td><td style="text-align:center;">-------</td><td style="text-align:center;">---</td><td>------ 以下参数仅 s 模式有效 ------</td></tr><tr><td style="text-align:center;"><code>params</code></td><td style="text-align:center;"><code>dict</code></td><td style="text-align:center;"><code>None</code></td><td>url 请求参数</td></tr><tr><td style="text-align:center;"><code>data</code></td><td style="text-align:center;"><code>dict</code><br><code>str</code></td><td style="text-align:center;"><code>None</code></td><td>携带的数据</td></tr><tr><td style="text-align:center;"><code>json</code></td><td style="text-align:center;"><code>dict</code><br><code>str</code></td><td style="text-align:center;"><code>None</code></td><td>要发送的 JSON 数据，会自动设置 Content-Type 为<code>&#39;application/json&#39;</code></td></tr><tr><td style="text-align:center;"><code>headers</code></td><td style="text-align:center;"><code>dict</code></td><td style="text-align:center;"><code>None</code></td><td>请求头</td></tr><tr><td style="text-align:center;"><code>cookies</code></td><td style="text-align:center;"><code>dict</code><br><code>CookieJar</code></td><td style="text-align:center;"><code>None</code></td><td>cookies 信息</td></tr><tr><td style="text-align:center;"><code>files</code></td><td style="text-align:center;"><code>Any</code></td><td style="text-align:center;"><code>None</code></td><td>要上传的文件，可以是一个字典，其中键是文件名，值是文件对象或文件路径</td></tr><tr><td style="text-align:center;"><code>auth</code></td><td style="text-align:center;"><code>Any</code></td><td style="text-align:center;"><code>None</code></td><td>身份认证信息</td></tr><tr><td style="text-align:center;"><code>allow_redirects</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>True</code></td><td>是否允许重定向</td></tr><tr><td style="text-align:center;"><code>proxies</code></td><td style="text-align:center;"><code>dict</code></td><td style="text-align:center;"><code>None</code></td><td>代理信息</td></tr><tr><td style="text-align:center;"><code>hooks</code></td><td style="text-align:center;"><code>Any</code></td><td style="text-align:center;"><code>None</code></td><td>回调方法</td></tr><tr><td style="text-align:center;"><code>stream</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>None</code></td><td>是否使用流式传输</td></tr><tr><td style="text-align:center;"><code>verify</code></td><td style="text-align:center;"><code>bool</code><br><code>str</code></td><td style="text-align:center;"><code>None</code></td><td>是否验证 SSL 证书</td></tr><tr><td style="text-align:center;"><code>cert</code></td><td style="text-align:center;"><code>str</code><br><code>Tuple[str, str]</code></td><td style="text-align:center;"><code>None</code></td><td>SSL 客户端证书文件的路径(.pem 格式)，或(&#39;cert&#39;, &#39;key&#39;)元组</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>bool</code></td><td>访问是否成功</td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium().latest_tab</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://DrissionPage.cn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h3 id="📌-post" tabindex="-1">📌 <code>post()</code> <a class="header-anchor" href="#📌-post" aria-label="Permalink to &quot;📌 \`post()\`&quot;">​</a></h3><p>此方法用内置的<code>Session</code>对象以 POST 方式发送请求。</p><p>因为<code>post()</code>是使用<code>requests</code>的<code>post()</code>方法发送请求，参数和用法与<code>requests</code>一致。</p><p>此方法返回请求结果<code>Response</code>对象。</p><p>s 模式时，<code>post()</code>后结果还可用页面对象的<code>html</code>或<code>json</code>属性获取。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>url</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;">必填</td><td>目标 url，可指向本地文件路径</td></tr><tr><td style="text-align:center;"><code>show_errmsg</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>False</code></td><td>连接出错时是否显示和抛出异常</td></tr><tr><td style="text-align:center;"><code>retry</code></td><td style="text-align:center;"><code>int</code></td><td style="text-align:center;"><code>None</code></td><td>重试次数，为<code>None</code>时使用页面参数，默认<code>3</code></td></tr><tr><td style="text-align:center;"><code>interval</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>重试间隔（秒），为<code>None</code>时使用页面参数，默认<code>2</code></td></tr><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>加载超时时间（秒）</td></tr><tr><td style="text-align:center;"><code>params</code></td><td style="text-align:center;"><code>dict</code></td><td style="text-align:center;"><code>None</code></td><td>url 请求参数</td></tr><tr><td style="text-align:center;"><code>data</code></td><td style="text-align:center;"><code>dict</code><br><code>str</code></td><td style="text-align:center;"><code>None</code></td><td>携带的数据</td></tr><tr><td style="text-align:center;"><code>json</code></td><td style="text-align:center;"><code>dict</code><br><code>str</code></td><td style="text-align:center;"><code>None</code></td><td>要发送的 JSON 数据，会自动设置 Content-Type 为<code>&#39;application/json&#39;</code></td></tr><tr><td style="text-align:center;"><code>headers</code></td><td style="text-align:center;"><code>dict</code></td><td style="text-align:center;"><code>None</code></td><td>请求头</td></tr><tr><td style="text-align:center;"><code>cookies</code></td><td style="text-align:center;"><code>dict</code><br><code>CookieJar</code></td><td style="text-align:center;"><code>None</code></td><td>cookies 信息</td></tr><tr><td style="text-align:center;"><code>files</code></td><td style="text-align:center;"><code>Any</code></td><td style="text-align:center;"><code>None</code></td><td>要上传的文件，可以是一个字典，其中键是文件名，值是文件对象或文件路径</td></tr><tr><td style="text-align:center;"><code>auth</code></td><td style="text-align:center;"><code>Any</code></td><td style="text-align:center;"><code>None</code></td><td>身份认证信息</td></tr><tr><td style="text-align:center;"><code>allow_redirects</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>True</code></td><td>是否允许重定向</td></tr><tr><td style="text-align:center;"><code>proxies</code></td><td style="text-align:center;"><code>dict</code></td><td style="text-align:center;"><code>None</code></td><td>代理信息</td></tr><tr><td style="text-align:center;"><code>hooks</code></td><td style="text-align:center;"><code>Any</code></td><td style="text-align:center;"><code>None</code></td><td>回调方法</td></tr><tr><td style="text-align:center;"><code>stream</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>None</code></td><td>是否使用流式传输</td></tr><tr><td style="text-align:center;"><code>verify</code></td><td style="text-align:center;"><code>bool</code><br><code>str</code></td><td style="text-align:center;"><code>None</code></td><td>是否验证 SSL 证书</td></tr><tr><td style="text-align:center;"><code>cert</code></td><td style="text-align:center;"><code>str</code><br><code>Tuple[str, str]</code></td><td style="text-align:center;"><code>None</code></td><td>SSL 客户端证书文件的路径(.pem 格式)，或(&#39;cert&#39;, &#39;key&#39;)元组</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>Response</code></td><td>获取到的<code>Response</code>对象</td></tr></tbody></table><hr><h2 id="✅️️-设置超时和重试" tabindex="-1">✅️️ 设置超时和重试 <a class="header-anchor" href="#✅️️-设置超时和重试" aria-label="Permalink to &quot;✅️️ 设置超时和重试&quot;">​</a></h2><p>网络不稳定时，访问页面不一定成功，<code>get()</code>方法内置了超时和重试功能。通过<code>retry</code>、<code>interval</code>、<code>timeout</code>三个参数进行设置。<br> 其中，如不指定<code>timeout</code>参数，该参数会使用<code>ChromiumPage</code>的<code>timeouts</code>属性的<code>page_load</code>参数中的值。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium().latest_tab</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://DrissionPage.cn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">retry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">interval</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">timeout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h2 id="✅️️-加载模式" tabindex="-1">✅️️ 加载模式 <a class="header-anchor" href="#✅️️-加载模式" aria-label="Permalink to &quot;✅️️ 加载模式&quot;">​</a></h2><h3 id="📌-概述" tabindex="-1">📌 概述 <a class="header-anchor" href="#📌-概述" aria-label="Permalink to &quot;📌 概述&quot;">​</a></h3><p>加载模式是指 d 模式下程序在页面加载阶段的行为模式，有以下三种：</p><ul><li><code>normal()</code>：常规模式，会等待页面加载完毕，超时自动重试或停止，默认使用此模式</li><li><code>eager()</code>：加载完 DOM 或超时即停止加载，不加载页面资源</li><li><code>none()</code>：超时也不会自动停止，除非加载完成</li></ul><p>前两种模式下，页面加载过程会阻塞程序，直到加载完毕才执行后面的操作。</p><p><code>none()</code>模式下，只在连接阶段阻塞程序，加载阶段可自行根据情况执行<code>stop_loading()</code>停止加载。</p><p>这样提供给用户非常大的自由度，可等到关键数据包或元素出现就主动停止页面加载，大幅提升执行效率。</p><div class="info custom-block"><p class="custom-block-title">注意</p><pre><code>加载完成是指主文档完成，并不包括由 js 触发的加载和重定向的加载。
当文档加载完成，程序就判断加载完毕，此后发生的重定向或 js 加载数据需用其它逻辑处理。
</code></pre></div><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium().latest_tab</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.set.load_mode.eager()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置为eager模式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://DrissionPage.cn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h3 id="📌-模式设置" tabindex="-1">📌 模式设置 <a class="header-anchor" href="#📌-模式设置" aria-label="Permalink to &quot;📌 模式设置&quot;">​</a></h3><p>可通过 ini 文件、<code>ChromiumOptions</code>对象和页面对象的<code>set.load_mode.****()</code>方法进行设置。</p><p>运行时可随时动态设置。</p><p><strong>配置对象中设置</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ChromiumOptions, Chromium</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">co </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ChromiumOptions().set_load_mode(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;none&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">browser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium(co)</span></span></code></pre></div><p><strong>运行中设置</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium().latest_tab</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.set.load_mode.none()</span></span></code></pre></div><hr><h3 id="📌-none模式技巧" tabindex="-1">📌 <code>none</code>模式技巧 <a class="header-anchor" href="#📌-none模式技巧" aria-label="Permalink to &quot;📌 \`none\`模式技巧&quot;">​</a></h3><p><strong>示例 1，配合监听器</strong></p><p>跟监听器配合，可在获取到需要的数据包时，主动停止加载。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium().latest_tab</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.set.load_mode.none()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置加载模式为none</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.listen.start(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;api/getkeydata&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 指定监听目标并启动监听</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://www.hao123.com/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 访问网站</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">packet </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab.listen.wait()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 等待数据包</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.stop_loading()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 主动停止加载</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(packet.response.body)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 打印数据包正文</span></span></code></pre></div><p><strong>示例 2，配合元素查找</strong></p><p>跟元素查找配合，可在获取到某个指定元素时，主动停止加载。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium().latest_tab</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.set.load_mode.none()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置加载模式为none</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://www.hao123.com/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 访问网站</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab.ele(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;中国日报&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查找text包含“中国日报”的元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.stop_loading()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 主动停止加载</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ele.text)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 打印元素text</span></span></code></pre></div><p><strong>示例 2，配合页面特征</strong></p><p>可等待到页面到达某种状态时，主动停止加载。比如多级跳转的登录，可等待 title 变化到最终目标网址时停止。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium().latest_tab</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.set.load_mode.none()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置加载模式为none</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://www.hao123.com/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 访问网站</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.wait.title_change(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hao123&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 等待title变化出现目标文本</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.stop_loading()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 主动停止加载</span></span></code></pre></div>`,54)])])}const g=e(n,[["render",d]]);export{k as __pageData,g as default};
