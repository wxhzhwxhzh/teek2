import{_ as e,c as s,o as a,aN as d}from"./chunks/framework.0ZSa6Wd7.js";const g=JSON.parse('{"title":"🛰️ 元素交互","description":"","frontmatter":{"id":"ele_operation","title":"🛰️ 元素交互"},"headers":[],"relativePath":"dp/2.浏览器控制/ele_operation.md","filePath":"dp/2.浏览器控制/ele_operation.md"}'),l={name:"dp/2.浏览器控制/ele_operation.md"};function i(n,t,o,c,h,r){return a(),s("div",null,[...t[0]||(t[0]=[d('<h1 id="🛰️-元素交互" tabindex="-1">🛰️ 元素交互 <a class="header-anchor" href="#🛰️-元素交互" aria-label="Permalink to &quot;🛰️ 元素交互&quot;">​</a></h1><div class="wwads-cn wwads-horizontal" data-id="317"></div><br><p>本节介绍与浏览器元素的交互。浏览器元素对象为<code>ChromiumElement</code>。</p><h2 id="✅️️-点击元素" tabindex="-1">✅️️ 点击元素 <a class="header-anchor" href="#✅️️-点击元素" aria-label="Permalink to &quot;✅️️ 点击元素&quot;">​</a></h2><h3 id="📌-click-和click-left" tabindex="-1">📌 <code>click()</code>和<code>click.left()</code> <a class="header-anchor" href="#📌-click-和click-left" aria-label="Permalink to &quot;📌 `click()`和`click.left()`&quot;">​</a></h3><p>这两个方法作用是一样的，用于左键点击元素。可选择模拟点击或 js 点击。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>by_js</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>False</code></td><td>指定点击行为方式。<br>为<code>None</code>时，如不被遮挡，用模拟点击，否则用 js 点击<br>为<code>True</code>时直接用 js 点击；<br>为<code>False</code>时强制模拟点击，被遮挡也会进行点击</td></tr><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>1.5</code></td><td>模拟点击的超时时间（秒），等待元素可见、可用、进入视口</td></tr><tr><td style="text-align:center;"><code>wait_stop</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>True</code></td><td>点击前是否等待元素停止运动</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>False</code></td><td><code>by_js</code>为<code>False</code>，且元素不可用、不可见时，返回<code>False</code></td></tr><tr><td style="text-align:center;"><code>True</code></td><td>除以上情况，其余情况都返回<code>True</code></td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 对ele元素进行模拟点击，如判断被遮挡也会点击</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele.click()</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用js方式点击ele元素，无视遮罩层</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele.click(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">by_js</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如元素不被遮挡，用模拟点击，否则用js点击</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele.click(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">by_js</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>默认情况下，<code>by_js</code>为<code>None</code>，优先用模拟方式点击，如遇遮挡、元素不可用、不可见、无法自动进入视口，等待直到超时后自动改用 js 方式点击。</p><p><code>by_js</code>为<code>False</code>，程序会强制使用模拟点击，即使被遮挡也会点击元素位置。如果元素不可见、不可用，会返回<code>False</code>。如元素无法自动滚动到视口，会改用 js 点击。</p><p><code>by_js</code>为<code>True</code>时，则可无视任何遮挡，只要元素在 DOM 内，就能点击得到，但元素是否响应点击视网页所用架构而定。</p><p>可以根据需要灵活地对元素进行操作。</p><p>在模拟点击前，程序会先尝试把元素滚动到视口中。</p><p>默认情况下，如无法进行模拟点击（元素无法进入视口、不可用、隐藏）时，左键单击会返回<code>False</code>。但也可以通过全局设置使其抛出异常：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage.common </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Settings</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Settings.set_raise_click_failed(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele.click()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如无法点击则抛出异常</span></span></code></pre></div><hr><h3 id="📌-click-right" tabindex="-1">📌 <code>click.right()</code> <a class="header-anchor" href="#📌-click-right" aria-label="Permalink to &quot;📌 `click.right()`&quot;">​</a></h3><p>此方法实现右键单击元素。</p><p><strong>参数：</strong> 无</p><p><strong>返回：</strong><code>None</code></p><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele.click.right()</span></span></code></pre></div><hr><h3 id="📌-click-middle" tabindex="-1">📌 <code>click.middle()</code> <a class="header-anchor" href="#📌-click-middle" aria-label="Permalink to &quot;📌 `click.middle()`&quot;">​</a></h3><p>此方法实现中键单击元素。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>get_tab</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>True</code></td><td>是否返回新出现的 Tab 对象</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumTab</code></td><td style="text-align:center;">如<code>get_tab</code>参数为<code>True</code>，元素在<code>ChromiumTab</code>返回对象</td></tr><tr><td style="text-align:center;"><code>MixTab</code></td><td style="text-align:center;">如<code>get_tab</code>参数为<code>True</code>，元素在<code>MixTab</code>里时返回的对象</td></tr><tr><td style="text-align:center;"><code>None</code></td><td style="text-align:center;"><code>get_tab</code>参数为<code>False</code>时</td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ele.click.middle()</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tab.title)</span></span></code></pre></div><hr><h3 id="📌-click-multi" tabindex="-1">📌 <code>click.multi()</code> <a class="header-anchor" href="#📌-click-multi" aria-label="Permalink to &quot;📌 `click.multi()`&quot;">​</a></h3><p>此方法实现左键多次点击元素。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>times</code></td><td style="text-align:center;"><code>int</code></td><td style="text-align:center;"><code>2</code></td><td>点击次数</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><hr><h3 id="📌-click-at" tabindex="-1">📌 <code>click.at()</code> <a class="header-anchor" href="#📌-click-at" aria-label="Permalink to &quot;📌 `click.at()`&quot;">​</a></h3><p>此方法用于带偏移量点击元素，偏移量相对于元素左上角坐标。不传入<code>offset_x</code>和<code>offset_y</code>时点击元素中间点。<br> 点击的目标不一定在元素上，可以传入负值，或大于元素大小的值，点击元素附近的区域。向右和向下为正值，向左和向上为负值。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>offset_x</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>相对元素左上角坐标的 x 轴偏移量，向下向右为正</td></tr><tr><td style="text-align:center;"><code>offset_y</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>相对元素左上角坐标的 y 轴偏移量，向下向右为正</td></tr><tr><td style="text-align:center;"><code>button</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;"><code>&#39;left&#39;</code></td><td>要点击的键，传入<code>&#39;left&#39;</code>、<code>&#39;right&#39;</code>、<code>&#39;middle&#39;</code>、<code>&#39;back&#39;</code>、<code>&#39;forward&#39;</code></td></tr><tr><td style="text-align:center;"><code>count</code></td><td style="text-align:center;"><code>int</code></td><td style="text-align:center;"><code>1</code></td><td>点击次数</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 点击元素右上方 50*50 的位置</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele.click.at(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 点击元素上中部，x相对左上角向右偏移50，y保持在元素中点</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele.click.at(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">offset_x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 和click()一致，但没有重试功能</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele.click.at()</span></span></code></pre></div><hr><h3 id="📌-click-to-upload" tabindex="-1">📌 <code>click.to_upload()</code> <a class="header-anchor" href="#📌-click-to-upload" aria-label="Permalink to &quot;📌 `click.to_upload()`&quot;">​</a></h3><p>此方法用于点击元素，触发文件选择框并把指定的文件路径添加到网页，详见“文件上传”章节。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>file_paths</code></td><td style="text-align:center;"><code>str</code><br><code>Path</code><br><code>list</code><br><code>tuple</code></td><td style="text-align:center;">必填</td><td>文件路径，如果上传框支持多文件，可传入列表或字符串，字符串时多个文件用<code>\\n</code>分隔</td></tr><tr><td style="text-align:center;"><code>by_js</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>False</code></td><td>是否用 js 方式点击，逻辑与<code>click()</code>一致</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><hr><h3 id="📌-click-to-download" tabindex="-1">📌 <code>click.to_download()</code> <a class="header-anchor" href="#📌-click-to-download" aria-label="Permalink to &quot;📌 `click.to_download()`&quot;">​</a></h3><p>此方法用于点击元素触发下载，并返回下载任务对象。用法详见“文件下载”章节。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>save_path</code></td><td style="text-align:center;"><code>str</code><br><code>Path</code></td><td style="text-align:center;">必填</td><td>保存路径，为<code>None</code>保存在原来设置的，如未设置保存到当前路径</td></tr><tr><td style="text-align:center;"><code>rename</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;"><code>None</code></td><td>重命名文件名，为<code>None</code>则不修改</td></tr><tr><td style="text-align:center;"><code>suffix</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;"><code>&#39;left&#39;</code></td><td>指定文件后缀，为<code>None</code>则不修改</td></tr><tr><td style="text-align:center;"><code>new_tab</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>1</code></td><td>该下载是否在新 tab 中触发</td></tr><tr><td style="text-align:center;"><code>by_js</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>False</code></td><td>是否用 js 方式点击，逻辑与<code>click()</code>一致</td></tr><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>超时时间（秒），为<code>None</code>时使用页面对象默认超时时间</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>DownloadMission</code></td><td style="text-align:center;">下载任务对象</td></tr></tbody></table><hr><h3 id="📌-click-for-new-tab" tabindex="-1">📌 <code>click.for_new_tab()</code> <a class="header-anchor" href="#📌-click-for-new-tab" aria-label="Permalink to &quot;📌 `click.for_new_tab()`&quot;">​</a></h3><p>在预期点击后会出现新 tab 的时候，可用此方法点击，会等待并返回新 tab 对象。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>by_js</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>False</code></td><td>是否用 js 方式点击，逻辑与<code>click()</code>一致</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumTab</code></td><td style="text-align:center;">元素在<code>ChromiumTab</code>里时返回</td></tr><tr><td style="text-align:center;"><code>MixTab</code></td><td style="text-align:center;">元素在<code>MixTab</code>里时返回</td></tr></tbody></table><hr><h2 id="✅️️-输入内容" tabindex="-1">✅️️ 输入内容 <a class="header-anchor" href="#✅️️-输入内容" aria-label="Permalink to &quot;✅️️ 输入内容&quot;">​</a></h2><h3 id="📌-clear" tabindex="-1">📌 <code>clear()</code> <a class="header-anchor" href="#📌-clear" aria-label="Permalink to &quot;📌 `clear()`&quot;">​</a></h3><p>此方法用于清空元素文本，可选择模拟按键或 js 方式。</p><p>模拟按键方式会自动输入<code>ctrl-a-del</code>组合键来清除文本框，js 方式则直接把元素<code>value</code>属性设置为<code>&#39;&#39;</code>。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>by_js</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>False</code></td><td>是否用 js 方式清空</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele.clear()</span></span></code></pre></div><hr><h3 id="📌-input" tabindex="-1">📌 <code>input()</code> <a class="header-anchor" href="#📌-input" aria-label="Permalink to &quot;📌 `input()`&quot;">​</a></h3><p>此方法用于向元素输入文本或组合键，也可用于输入文件路径到上传控件。可选择输入前是否清空元素。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>vals</code></td><td style="text-align:center;"><code>Any</code></td><td style="text-align:center;"><code>False</code></td><td>文本值或按键组合<br>对文件上传控件时输入路径字符串或其组成的列表</td></tr><tr><td style="text-align:center;"><code>clear</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>False</code></td><td>输入前是否清空文本框</td></tr><tr><td style="text-align:center;"><code>by_js</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>False</code></td><td>是否用 js 方式输入，为<code>True</code>时不能输入组合键</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><div class="tip custom-block"><p class="custom-block-title">Tips</p><pre><code>- 有些文本框可以接收回车代替点击按钮，可以直接在文本末尾加上`&#39;\\n&#39;`。\n- 会自动把非`str`数据转换为`str`。\n</code></pre></div><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输入文本</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele.input(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello world!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输入文本并回车</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele.input(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello world!</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h3 id="📌-输入组合键" tabindex="-1">📌 输入组合键 <a class="header-anchor" href="#📌-输入组合键" aria-label="Permalink to &quot;📌 输入组合键&quot;">​</a></h3><p>使用组合键或要传入特殊按键前，先要导入按键类<code>Keys</code>。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage.common </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Keys</span></span></code></pre></div><p>然后将组合键放在一个<code>tuple</code>中传入<code>input()</code>即可。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele.input((Keys.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CTRL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Keys.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DEL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ctrl+a+del</span></span></code></pre></div><p><code>Keys</code>内置了 5 个常用组合键，分别为<code>CTRL_A</code>、<code>CTRL_C</code>、<code>CTRL_X</code>、<code>CTRL_V</code>、<code>CTRL_Z</code>、<code>CTRL_Y</code>。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele.input(Keys.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CTRL_A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 全选</span></span></code></pre></div><hr><h3 id="📌-focus" tabindex="-1">📌 <code>focus()</code> <a class="header-anchor" href="#📌-focus" aria-label="Permalink to &quot;📌 `focus()`&quot;">​</a></h3><p>此方法用于使元素获取焦点。</p><p><strong>参数：</strong> 无</p><p><strong>返回：</strong> <code>None</code></p><hr><h2 id="✅️️-拖拽和悬停" tabindex="-1">✅️️ 拖拽和悬停 <a class="header-anchor" href="#✅️️-拖拽和悬停" aria-label="Permalink to &quot;✅️️ 拖拽和悬停&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">Tips</p><pre><code>除了以下方法，本库还提供更灵活的动作链功能，详见后面章节。\n</code></pre></div><h3 id="📌-drag" tabindex="-1">📌 <code>drag()</code> <a class="header-anchor" href="#📌-drag" aria-label="Permalink to &quot;📌 `drag()`&quot;">​</a></h3><p>此方法用于拖拽元素到相对于当前的一个新位置，可以设置速度。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>offset_x</code></td><td style="text-align:center;"><code>int</code></td><td style="text-align:center;"><code>0</code></td><td>x 轴偏移量，向下向右为正</td></tr><tr><td style="text-align:center;"><code>offset_y</code></td><td style="text-align:center;"><code>int</code></td><td style="text-align:center;"><code>0</code></td><td>y 轴偏移量，向下向右为正</td></tr><tr><td style="text-align:center;"><code>duration</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>0.5</code></td><td>用时，单位秒，传入<code>0</code>即瞬间到达</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 拖动当前元素到距离50*50的位置，用时1秒</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele.drag(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h3 id="📌-drag-to" tabindex="-1">📌 <code>drag_to()</code> <a class="header-anchor" href="#📌-drag-to" aria-label="Permalink to &quot;📌 `drag_to()`&quot;">​</a></h3><p>此方法用于拖拽元素到另一个元素上或一个坐标上。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ele_or_loc</code></td><td style="text-align:center;"><code>ChromiumElement</code><br><code>Tuple[int, int]</code></td><td style="text-align:center;">必填</td><td>另一个元素对象或坐标元组</td></tr><tr><td style="text-align:center;"><code>duration</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>0.5</code></td><td>用时，单位秒，传入<code>0</code>即瞬间到达</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 把 ele1 拖拽到 ele2 上</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page.ele(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#div1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page.ele(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#div2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele1.drag_to(ele2)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 把 ele1 拖拽到网页 50, 50 的位置</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele1.drag_to((</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><hr><h3 id="📌-hover" tabindex="-1">📌 <code>hover()</code> <a class="header-anchor" href="#📌-hover" aria-label="Permalink to &quot;📌 `hover()`&quot;">​</a></h3><p>此方法用于模拟鼠标悬停在元素上，可接受偏移量，偏移量相对于元素左上角坐标。不传入<code>offset_x</code>和<code>offset_y</code>值时悬停在元素中点。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>offset_x</code></td><td style="text-align:center;"><code>int</code></td><td style="text-align:center;"><code>None</code></td><td>相对元素左上角坐标的 x 轴偏移量，向下向右为正</td></tr><tr><td style="text-align:center;"><code>offset_y</code></td><td style="text-align:center;"><code>int</code></td><td style="text-align:center;"><code>None</code></td><td>相对元素左上角坐标的 y 轴偏移量，向下向右为正</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 悬停在元素右上方 50*50 的位置</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele.hover(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 悬停在元素上中部，x 相对左上角向右偏移50，y 保持在元素中点</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele.hover(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">offset_x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 悬停在元素中点</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele.hover()</span></span></code></pre></div><hr><h2 id="✅️️-修改元素" tabindex="-1">✅️️ 修改元素 <a class="header-anchor" href="#✅️️-修改元素" aria-label="Permalink to &quot;✅️️ 修改元素&quot;">​</a></h2><h3 id="📌-set-innerhtml" tabindex="-1">📌 <code>set.innerHTML()</code> <a class="header-anchor" href="#📌-set-innerhtml" aria-label="Permalink to &quot;📌 `set.innerHTML()`&quot;">​</a></h3><p>此方法用于设置元素的 innerHTML 内容。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>html</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;">必填</td><td>html文本</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><hr><h3 id="📌-set-property" tabindex="-1">📌 <code>set.property()</code> <a class="header-anchor" href="#📌-set-property" aria-label="Permalink to &quot;📌 `set.property()`&quot;">​</a></h3><p>此方法用于设置元素<code>property</code>属性。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>name</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;">必填</td><td>属性名</td></tr><tr><td style="text-align:center;"><code>value</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;">必填</td><td>属性值</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele.set.property(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;value&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello world!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h3 id="📌-set-style" tabindex="-1">📌 <code>set.style()</code> <a class="header-anchor" href="#📌-set-style" aria-label="Permalink to &quot;📌 `set.style()`&quot;">​</a></h3><p>此方法用于设置元素样式。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>name</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;">必填</td><td>属性名</td></tr><tr><td style="text-align:center;"><code>value</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;">必填</td><td>属性值</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><hr><h3 id="📌-set-attr" tabindex="-1">📌 <code>set.attr()</code> <a class="header-anchor" href="#📌-set-attr" aria-label="Permalink to &quot;📌 `set.attr()`&quot;">​</a></h3><p>此方法用于设置元素 attribute 属性。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>name</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;">必填</td><td>属性名</td></tr><tr><td style="text-align:center;"><code>value</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;">必填</td><td>属性值</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele.set.attr(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;href&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://DrissionPage.cn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h3 id="📌-remove-attr" tabindex="-1">📌 <code>remove_attr()</code> <a class="header-anchor" href="#📌-remove-attr" aria-label="Permalink to &quot;📌 `remove_attr()`&quot;">​</a></h3><p>此方法用于删除元素 attribute 属性。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>name</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;">必填</td><td>属性名</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele.remove_attr(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;href&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h3 id="📌-set-value" tabindex="-1">📌 <code>set.value()</code> <a class="header-anchor" href="#📌-set-value" aria-label="Permalink to &quot;📌 `set.value()`&quot;">​</a></h3><p>此方法用于设置元素<code>value</code>值。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>value</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;">必填</td><td>属性值</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><hr><h3 id="📌-check" tabindex="-1">📌 <code>check()</code> <a class="header-anchor" href="#📌-check" aria-label="Permalink to &quot;📌 `check()`&quot;">​</a></h3><p>此方法用于选中或取消选中元素。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>uncheck</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>False</code></td><td>是否取消选中</td></tr><tr><td style="text-align:center;"><code>by_js</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>False</code></td><td>是否用 js 方式选择</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><hr><h2 id="✅️️-执行-js-脚本" tabindex="-1">✅️️ 执行 js 脚本 <a class="header-anchor" href="#✅️️-执行-js-脚本" aria-label="Permalink to &quot;✅️️ 执行 js 脚本&quot;">​</a></h2><h3 id="📌-run-js" tabindex="-1">📌 <code>run_js()</code> <a class="header-anchor" href="#📌-run-js" aria-label="Permalink to &quot;📌 `run_js()`&quot;">​</a></h3><p>此方法用于对元素执行 js 代码，代码中用<code>this</code>表示元素自己。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>script</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;">必填</td><td>js 脚本文本或脚本文件路径</td></tr><tr><td style="text-align:center;"><code>*args</code></td><td style="text-align:center;">-</td><td style="text-align:center;">无</td><td>传入的参数，按顺序在js文本中对应<code>arguments[0]</code>、<code>arguments[1]</code>...</td></tr><tr><td style="text-align:center;"><code>as_expr</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>False</code></td><td>是否作为表达式运行，为<code>True</code>时<code>args</code>参数无效</td></tr><tr><td style="text-align:center;"><code>timetout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>js 超时时间（秒），为<code>None</code>则使用页面<code>timeouts.script</code>设置</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>Any</code></td><td>脚本执行结果</td></tr></tbody></table><div class="warning custom-block"><p class="custom-block-title">注意</p><pre><code>要获取 js 结果记得写上`return`。\n</code></pre></div><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用执行 js 的方式点击元素</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele.run_js(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;this.click();&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用 js 获取元素高度</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ele.run_js(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;return this.offsetHeight;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h3 id="📌-run-async-js" tabindex="-1">📌 <code>run_async_js()</code> <a class="header-anchor" href="#📌-run-async-js" aria-label="Permalink to &quot;📌 `run_async_js()`&quot;">​</a></h3><p>此方法用于以异步方式执行 js 代码，代码中用<code>this</code>表示元素自己。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>script</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;">必填</td><td>js 脚本文本</td></tr><tr><td style="text-align:center;"><code>*args</code></td><td style="text-align:center;">-</td><td style="text-align:center;">无</td><td>传入的参数，按顺序在js文本中对应<code>arguments[0]</code>、<code>arguments[1]</code>...</td></tr><tr><td style="text-align:center;"><code>as_expr</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>False</code></td><td>是否作为表达式运行，为<code>True</code>时<code>args</code>参数无效</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><hr><h3 id="📌-add-init-js" tabindex="-1">📌 <code>add_init_js()</code> <a class="header-anchor" href="#📌-add-init-js" aria-label="Permalink to &quot;📌 `add_init_js()`&quot;">​</a></h3><p>此方法用于添加初始化脚本，在页面加载任何脚本前执行。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>script</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;">必填</td><td>js 脚本文本</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>str</code></td><td>添加的脚本的 id</td></tr></tbody></table><hr><h3 id="📌-remove-init-js" tabindex="-1">📌 <code>remove_init_js()</code> <a class="header-anchor" href="#📌-remove-init-js" aria-label="Permalink to &quot;📌 `remove_init_js()`&quot;">​</a></h3><p>此方法用于删除初始化脚本，<code>script_id</code>传入<code>None</code>时删除所有。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>script_id</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;"><code>None</code></td><td>脚本的id，传入<code>None</code>时删除所有</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><hr><h2 id="✅️️-元素滚动" tabindex="-1">✅️️ 元素滚动 <a class="header-anchor" href="#✅️️-元素滚动" aria-label="Permalink to &quot;✅️️ 元素滚动&quot;">​</a></h2><p>元素滚动功能藏在<code>scroll</code>属性中。用于使可滚动的容器元素内部进行滚动，或使元素本身滚动到可见。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 滚动到底部</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele.scroll.to_bottom()</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 滚动到最右边</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele.scroll.to_rightmost()</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 向下滚动 200 像素</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele.scroll.down(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 滚动到指定位置</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele.scroll.to_location(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 滚动页面使自己可见</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele.scroll.to_see()</span></span></code></pre></div><h3 id="📌-scroll-或scroll-down" tabindex="-1">📌 <code>scroll()</code>或<code>scroll.down()</code> <a class="header-anchor" href="#📌-scroll-或scroll-down" aria-label="Permalink to &quot;📌 `scroll()`或`scroll.down()`&quot;">​</a></h3><p>这两个方法效果是一样的，用于使元素向下滚动若干像素，水平位置不变。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>pixel</code></td><td style="text-align:center;"><code>int</code></td><td style="text-align:center;">必填</td><td>滚动的像素</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumElement</code></td><td>执行滚动的元素自身</td></tr></tbody></table><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 向下滚动30像素</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele.scroll(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele.scroll.down(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h3 id="📌-scroll-up" tabindex="-1">📌 <code>scroll.up()</code> <a class="header-anchor" href="#📌-scroll-up" aria-label="Permalink to &quot;📌 `scroll.up()`&quot;">​</a></h3><p>此方法用于使元素向上滚动若干像素，水平位置不变。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>pixel</code></td><td style="text-align:center;"><code>int</code></td><td style="text-align:center;">必填</td><td>滚动的像素</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumElement</code></td><td>执行滚动的元素自身</td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">page.scroll.up(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h3 id="📌-scroll-right" tabindex="-1">📌 <code>scroll.right()</code> <a class="header-anchor" href="#📌-scroll-right" aria-label="Permalink to &quot;📌 `scroll.right()`&quot;">​</a></h3><p>此方法用于使元素内滚动条向右滚动若干像素，垂直位置不变。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>pixel</code></td><td style="text-align:center;"><code>int</code></td><td style="text-align:center;">必填</td><td>滚动的像素</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumElement</code></td><td>执行滚动的元素自身</td></tr></tbody></table><hr><h3 id="📌-scroll-left" tabindex="-1">📌 <code>scroll.left()</code> <a class="header-anchor" href="#📌-scroll-left" aria-label="Permalink to &quot;📌 `scroll.left()`&quot;">​</a></h3><p>此方法用于使元素内滚动条向左滚动若干像素，垂直位置不变。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>pixel</code></td><td style="text-align:center;"><code>int</code></td><td style="text-align:center;">必填</td><td>滚动的像素</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumElement</code></td><td>执行滚动的元素自身</td></tr></tbody></table><hr><h3 id="📌-scroll-to-top" tabindex="-1">📌 <code>scroll.to_top()</code> <a class="header-anchor" href="#📌-scroll-to-top" aria-label="Permalink to &quot;📌 `scroll.to_top()`&quot;">​</a></h3><p>此方法用于滚动到元素顶部，水平位置不变。</p><p><strong>参数：</strong> 无</p><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumElement</code></td><td>执行滚动的元素自身</td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">page.scroll.to_top()</span></span></code></pre></div><hr><h3 id="📌-scroll-to-bottom" tabindex="-1">📌 <code>scroll.to_bottom()</code> <a class="header-anchor" href="#📌-scroll-to-bottom" aria-label="Permalink to &quot;📌 `scroll.to_bottom()`&quot;">​</a></h3><p>此方法用于滚动到元素底部，水平位置不变。</p><p><strong>参数：</strong> 无</p><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumElement</code></td><td>执行滚动的元素自身</td></tr></tbody></table><hr><h3 id="📌-scroll-to-half" tabindex="-1">📌 <code>scroll.to_half()</code> <a class="header-anchor" href="#📌-scroll-to-half" aria-label="Permalink to &quot;📌 `scroll.to_half()`&quot;">​</a></h3><p>此方法用于滚动到元素垂直中间位置，水平位置不变。</p><p><strong>参数：</strong> 无</p><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumElement</code></td><td>执行滚动的元素自身</td></tr></tbody></table><hr><h3 id="📌-scroll-to-rightmost" tabindex="-1">📌 <code>scroll.to_rightmost()</code> <a class="header-anchor" href="#📌-scroll-to-rightmost" aria-label="Permalink to &quot;📌 `scroll.to_rightmost()`&quot;">​</a></h3><p>此方法用于滚动到元素最右边，垂直位置不变。</p><p><strong>参数：</strong> 无</p><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumElement</code></td><td>执行滚动的元素自身</td></tr></tbody></table><hr><h3 id="📌-scroll-to-leftmost" tabindex="-1">📌 <code>scroll.to_leftmost()</code> <a class="header-anchor" href="#📌-scroll-to-leftmost" aria-label="Permalink to &quot;📌 `scroll.to_leftmost()`&quot;">​</a></h3><p>此方法用于滚动到元素最左边，垂直位置不变。</p><p><strong>参数：</strong> 无</p><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumElement</code></td><td>执行滚动的元素自身</td></tr></tbody></table><hr><h3 id="📌-scroll-to-location" tabindex="-1">📌 <code>scroll.to_location()</code> <a class="header-anchor" href="#📌-scroll-to-location" aria-label="Permalink to &quot;📌 `scroll.to_location()`&quot;">​</a></h3><p>此方法用于滚动到元素滚动到指定位置。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>x</code></td><td style="text-align:center;"><code>int</code></td><td style="text-align:center;">必填</td><td>水平位置</td></tr><tr><td style="text-align:center;"><code>y</code></td><td style="text-align:center;"><code>int</code></td><td style="text-align:center;">必填</td><td>垂直位置</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumElement</code></td><td>执行滚动的元素自身</td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">page.scroll.to_location(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h3 id="📌-scroll-to-see" tabindex="-1">📌 <code>scroll.to_see()</code> <a class="header-anchor" href="#📌-scroll-to-see" aria-label="Permalink to &quot;📌 `scroll.to_see()`&quot;">​</a></h3><p>此方法用于滚动页面直到元素可见。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>center</code></td><td style="text-align:center;"><code>bool</code><br><code>None</code></td><td style="text-align:center;"><code>None</code></td><td>是否尽量滚动到页面正中，为<code>None</code>时如果被遮挡，则滚动到页面正中</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumElement</code></td><td>执行滚动的元素自身</td></tr></tbody></table><hr><h3 id="📌-scroll-to-center" tabindex="-1">📌 <code>scroll.to_center()</code> <a class="header-anchor" href="#📌-scroll-to-center" aria-label="Permalink to &quot;📌 `scroll.to_center()`&quot;">​</a></h3><p>此方法用于尽量把元素滚动到视口正中。</p><p><strong>参数：</strong> 无</p><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumElement</code></td><td>执行滚动的元素自身</td></tr></tbody></table><hr><h2 id="✅️️-列表选择" tabindex="-1">✅️️ 列表选择 <a class="header-anchor" href="#✅️️-列表选择" aria-label="Permalink to &quot;✅️️ 列表选择&quot;">​</a></h2><p><code>&lt;select&gt;</code>下拉列表元素功能在<code>select</code>属性中。可自动等待列表项出现再实施选择。</p><p>此属性用于对<code>&lt;select&gt;</code>元素的操作。非<code>&lt;select&gt;</code>元素此属性为<code>None</code>。</p><p>假设有以下<code>&lt;select&gt;</code>元素，下面示例以此为基础：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">select</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;s&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> multiple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">option</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;value1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;text1&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">option</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">option</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;value2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;text2&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">option</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">option</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;value3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;text3&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">option</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="📌-点击列表项元素进行选取" tabindex="-1">📌 点击列表项元素进行选取 <a class="header-anchor" href="#📌-点击列表项元素进行选取" aria-label="Permalink to &quot;📌 点击列表项元素进行选取&quot;">​</a></h3><p>可以获取<code>&lt;option&gt;</code>元素，进行选取或取消选择。</p><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium().latest_tab</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;t:select&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;t:option&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele.click()</span></span></code></pre></div><hr><h3 id="📌-select-和select-by-text" tabindex="-1">📌 <code>select()</code>和<code>select.by_text()</code> <a class="header-anchor" href="#📌-select-和select-by-text" aria-label="Permalink to &quot;📌 `select()`和`select.by_text()`&quot;">​</a></h3><p>这两个方法功能一样，用于按文本选择列表项。如为多选列表，可多选。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>text</code></td><td style="text-align:center;"><code>str</code><br><code>list</code><br><code>tuple</code></td><td style="text-align:center;">必填</td><td>作为选择条件的文本，传入<code>list</code>或<code>tuple</code>可选择多项</td></tr><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>超时时间（秒），为<code>None</code>默认使用页面超时时间</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>bool</code></td><td>是否选择成功</td></tr></tbody></table><hr><h3 id="📌-select-by-value" tabindex="-1">📌 <code>select.by_value()</code> <a class="header-anchor" href="#📌-select-by-value" aria-label="Permalink to &quot;📌 `select.by_value()`&quot;">​</a></h3><p>此方法用于按<code>value</code>属性选择列表项。如为多选列表，可多选。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>value</code></td><td style="text-align:center;"><code>str</code><br><code>list</code><br><code>tuple</code></td><td style="text-align:center;">必填</td><td>作为选择条件的<code>value</code>值，传入<code>list</code>或<code>tuple</code>可选择多项</td></tr><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>超时时间（秒），为<code>None</code>默认使用页面超时时间</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>bool</code></td><td>是否选择成功</td></tr></tbody></table><hr><h3 id="📌-select-by-index" tabindex="-1">📌 <code>select.by_index()</code> <a class="header-anchor" href="#📌-select-by-index" aria-label="Permalink to &quot;📌 `select.by_index()`&quot;">​</a></h3><p>此方法用于按序号选择列表项，从<code>1</code>开始。如为多选列表，可多选。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>index</code></td><td style="text-align:center;"><code>int</code><br><code>list</code><br><code>tuple</code></td><td style="text-align:center;">必填</td><td>选择第几项，传入<code>list</code>或<code>tuple</code>可选择多项</td></tr><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>超时时间（秒），为<code>None</code>默认使用页面超时时间</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>bool</code></td><td>是否选择成功</td></tr></tbody></table><hr><h3 id="📌-select-by-locator" tabindex="-1">📌 <code>select.by_locator()</code> <a class="header-anchor" href="#📌-select-by-locator" aria-label="Permalink to &quot;📌 `select.by_locator()`&quot;">​</a></h3><p>此方法可用定位符筛选选项元素。如为多选列表，可多选。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>locator</code></td><td style="text-align:center;"><code>str</code><br><code>list</code><br><code>tuple</code></td><td style="text-align:center;">必填</td><td>定位符，传入<code>list</code>或<code>tuple</code>可选择多项</td></tr><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>超时时间（秒），为<code>None</code>默认使用页面超时时间</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>bool</code></td><td>是否选择成功</td></tr></tbody></table><hr><h3 id="📌-select-by-option" tabindex="-1">📌 <code>select.by_option()</code> <a class="header-anchor" href="#📌-select-by-option" aria-label="Permalink to &quot;📌 `select.by_option()`&quot;">​</a></h3><p>此方法用于选中单个或多个列表项元素。如为多选列表，可多选。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>option</code></td><td style="text-align:center;"><code>ChromiumElement</code><br><code>List[ChromiumElement]</code></td><td style="text-align:center;">必填</td><td><code>&lt;option&gt;</code>元素或它们组成的列表</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium().latest_tab</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">select </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;t:select&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">option </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> select(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;t:option&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">select.select.by_option(option)</span></span></code></pre></div><hr><h3 id="📌-select-cancel-by-text" tabindex="-1">📌 <code>select.cancel_by_text()</code> <a class="header-anchor" href="#📌-select-cancel-by-text" aria-label="Permalink to &quot;📌 `select.cancel_by_text()`&quot;">​</a></h3><p>此方法用于按文本取消选择列表项。如为多选列表，可取消多项。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>text</code></td><td style="text-align:center;"><code>str</code><br><code>list</code><br><code>tuple</code></td><td style="text-align:center;">必填</td><td>作为选择条件的文本，传入<code>list</code>或<code>tuple</code>可选择多项</td></tr><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>超时时间（秒），为<code>None</code>默认使用页面超时时间</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>bool</code></td><td>是否选择成功</td></tr></tbody></table><hr><h3 id="📌-select-cancel-by-value" tabindex="-1">📌 <code>select.cancel_by_value()</code> <a class="header-anchor" href="#📌-select-cancel-by-value" aria-label="Permalink to &quot;📌 `select.cancel_by_value()`&quot;">​</a></h3><p>此方法用于按<code>value</code>属性取消选择列表项。如为多选列表，可取消多项。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>value</code></td><td style="text-align:center;"><code>str</code><br><code>list</code><br><code>tuple</code></td><td style="text-align:center;">必填</td><td>作为选择条件的<code>value</code>值，传入<code>list</code>或<code>tuple</code>可选择多项</td></tr><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>超时时间（秒），为<code>None</code>默认使用页面超时时间</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>bool</code></td><td>是否选择成功</td></tr></tbody></table><hr><h3 id="📌-select-cancel-by-index" tabindex="-1">📌 <code>select.cancel_by_index()</code> <a class="header-anchor" href="#📌-select-cancel-by-index" aria-label="Permalink to &quot;📌 `select.cancel_by_index()`&quot;">​</a></h3><p>此方法用于按序号取消选择列表项，从<code>1</code>开始。如为多选列表，可取消多项。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>index</code></td><td style="text-align:center;"><code>int</code><br><code>list</code><br><code>tuple</code></td><td style="text-align:center;">必填</td><td>选择第几项，传入<code>list</code>或<code>tuple</code>可选择多项</td></tr><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>超时时间（秒），为<code>None</code>默认使用页面超时时间</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>bool</code></td><td>是否选择成功</td></tr></tbody></table><hr><h3 id="📌-select-cancel-by-locator" tabindex="-1">📌 <code>select.cancel_by_locator()</code> <a class="header-anchor" href="#📌-select-cancel-by-locator" aria-label="Permalink to &quot;📌 `select.cancel_by_locator()`&quot;">​</a></h3><p>此方法可用定位符筛选选项元素。如为多选列表，可取消多项。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>locator</code></td><td style="text-align:center;"><code>str</code><br><code>list</code><br><code>tuple</code></td><td style="text-align:center;">必填</td><td>定位符，传入<code>list</code>或<code>tuple</code>可选择多项</td></tr><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>超时时间，为<code>None</code>默认使用页面超时时间</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>bool</code></td><td>是否选择成功</td></tr></tbody></table><hr><h3 id="📌-select-cancel-by-option" tabindex="-1">📌 <code>select.cancel_by_option()</code> <a class="header-anchor" href="#📌-select-cancel-by-option" aria-label="Permalink to &quot;📌 `select.cancel_by_option()`&quot;">​</a></h3><p>此方法用于取消选中单个或多个列表项元素。如为多选列表，可多选。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>option</code></td><td style="text-align:center;"><code>ChromiumElement</code><br><code>List[ChromiumElement]</code></td><td style="text-align:center;">必填</td><td><code>&lt;option&gt;</code>元素或它们组成的列表</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><hr><h3 id="📌-select-all" tabindex="-1">📌 <code>select.all()</code> <a class="header-anchor" href="#📌-select-all" aria-label="Permalink to &quot;📌 `select.all()`&quot;">​</a></h3><p>此方法用于全选所有项。多选列表才有效。</p><p><strong>参数：</strong> 无</p><p><strong>返回：</strong><code>None</code></p><hr><h3 id="📌-select-clear" tabindex="-1">📌 <code>select.clear()</code> <a class="header-anchor" href="#📌-select-clear" aria-label="Permalink to &quot;📌 `select.clear()`&quot;">​</a></h3><p>此方法用于取消所有项选中状态。多选列表才有效。</p><p><strong>参数：</strong> 无</p><p><strong>返回：</strong><code>None</code></p><hr><h3 id="📌-select-invert" tabindex="-1">📌 <code>select.invert()</code> <a class="header-anchor" href="#📌-select-invert" aria-label="Permalink to &quot;📌 `select.invert()`&quot;">​</a></h3><p>此方法用于反选。多选列表才有效。</p><p><strong>参数：</strong> 无</p><p><strong>返回：</strong><code>None</code></p><hr><h3 id="📌-select-is-multi" tabindex="-1">📌 <code>select.is_multi</code> <a class="header-anchor" href="#📌-select-is-multi" aria-label="Permalink to &quot;📌 `select.is_multi`&quot;">​</a></h3><p>此属性返回当前元素是否多选列表。</p><p><strong>返回类型：</strong><code>bool</code></p><hr><h3 id="📌-select-options" tabindex="-1">📌 <code>select.options</code> <a class="header-anchor" href="#📌-select-options" aria-label="Permalink to &quot;📌 `select.options`&quot;">​</a></h3><p>此属性返回当前列表元素所有选项元素对象。</p><p><strong>返回类型：</strong><code>ChromiumElement</code></p><hr><h3 id="📌-select-selected-option" tabindex="-1">📌 <code>select.selected_option</code> <a class="header-anchor" href="#📌-select-selected-option" aria-label="Permalink to &quot;📌 `select.selected_option`&quot;">​</a></h3><p>此属性返回当前元素选中的选项（单选列表）。</p><p><strong>返回类型：</strong><code>ChromiumElement</code></p><hr><h3 id="📌-select-selected-options" tabindex="-1">📌 <code>select.selected_options</code> <a class="header-anchor" href="#📌-select-selected-options" aria-label="Permalink to &quot;📌 `select.selected_options`&quot;">​</a></h3><p>此属性返回当前元素所有选中的选项（多选列表）。</p><p><strong>返回类型：</strong><code>List[ChromiumElement]</code></p>',341)])])}const y=e(l,[["render",i]]);export{g as __pageData,y as default};
