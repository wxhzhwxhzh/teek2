window.__VP_HASH_MAP__=JSON.parse("{\"api-examples.md\":\"BkSU6e1g\",\"dp_1.🌷准备_1.intro.md\":\"S3mOGZkz\",\"dp_1.🌷准备_2.install.md\":\"DKy2iodT\",\"dp_2.浏览器控制_actions.md\":\"B7upA8B-\",\"dp_2.浏览器控制_browser_object.md\":\"kZH-20bp\",\"dp_2.浏览器控制_browser_options.md\":\"CWS4_QF_\",\"dp_2.浏览器控制_connect_browser.md\":\"B-RtcaH4\",\"dp_2.浏览器控制_console.md\":\"BO8Vsd2F\",\"dp_2.浏览器控制_docker.md\":\"BXGy_HjL\",\"dp_2.浏览器控制_ele_operation.md\":\"BEw3eYF-\",\"dp_2.浏览器控制_get_ele_info.md\":\"fJUCEV-K\",\"dp_2.浏览器控制_get_page_info.md\":\"tKFJE1Dj\",\"dp_2.浏览器控制_iframe.md\":\"CFe-8RwH\",\"dp_2.浏览器控制_intro.md\":\"B8rJdSAm\",\"dp_2.浏览器控制_listener.md\":\"BfeZGg-e\",\"dp_2.浏览器控制_mode_change.md\":\"7xcKHqAM\",\"dp_2.浏览器控制_page_operation.md\":\"DOSeFQqt\",\"dp_2.浏览器控制_pages.md\":\"CaHFBfdH\",\"dp_2.浏览器控制_screen.md\":\"CiIxnZyx\",\"dp_2.浏览器控制_tabs.md\":\"wms434NJ\",\"dp_2.浏览器控制_upload.md\":\"DDaZPUis\",\"dp_2.浏览器控制_visit.md\":\"B9xwXdZk\",\"dp_2.浏览器控制_waiting.md\":\"B_L-HUSB\",\"dp_2.浏览器控制_元素定位_behavior.md\":\"CeVrTIWP\",\"dp_2.浏览器控制_元素定位_filter.md\":\"Csoe6zW9\",\"dp_2.浏览器控制_元素定位_find_in_object.md\":\"C1G3_Nsr\",\"dp_2.浏览器控制_元素定位_intro.md\":\"C-Q8eI8N\",\"dp_2.浏览器控制_元素定位_relative.md\":\"Ckt0h-4N\",\"dp_2.浏览器控制_元素定位_sheet.md\":\"B-J2DKgS\",\"dp_2.浏览器控制_元素定位_simplify.md\":\"To0GxLIu\",\"dp_2.浏览器控制_元素定位_syntax.md\":\"zigfS7hQ\",\"dp_3.下载_browser.md\":\"Cw8JZSmI\",\"dp_3.下载_downloadkit.md\":\"CvglUrTx\",\"dp_3.下载_intro.md\":\"vi-w_GEZ\",\"index.md\":\"COzhPeWJ\",\"markdown-examples.md\":\"DMFEFAXx\",\"readme.md\":\"Bc7SP2L-\"}");function deserializeFunctions(r){return Array.isArray(r)?r.map(deserializeFunctions):typeof r=="object"&&r!==null?Object.keys(r).reduce((t,n)=>(t[n]=deserializeFunctions(r[n]),t),{}):typeof r=="string"&&r.startsWith("_vp-fn_")?new Function(`return ${r.slice(7)}`)():r};window.__VP_SITE_DATA__=deserializeFunctions(JSON.parse("{\"lang\":\"en-US\",\"dir\":\"ltr\",\"title\":\"DrissionPage文档镜像站\",\"description\":\"DrissionPage文档镜像\",\"base\":\"/\",\"head\":[],\"router\":{\"prefetchLinks\":true},\"appearance\":true,\"themeConfig\":{\"teekHome\":false,\"vpHome\":true,\"sidebarTrigger\":true,\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"footerInfo\":{\"theme\":{\"name\":\"Theme By Teek\"},\"copyright\":{\"createYear\":2025,\"suffix\":\"Teek\"}},\"codeBlock\":{\"copiedDone\":\"_vp-fn_(TkMessage) => TkMessage.success(\\\"\\\\u590D\\\\u5236\\\\u6210\\\\u529F\\\\uFF01\\\")\"},\"articleShare\":{\"enabled\":true},\"nav\":[{\"text\":\"🏠️Home\",\"link\":\"/\"},{\"text\":\"📘文档\",\"link\":\"/dp/prepare/intro\",\"activeMatch\":\"dp/1.🌷准备/1.intro\"}],\"sidebar\":{\"/\":[{\"text\":\"api-examples\",\"link\":\"/api-examples\"},{\"text\":\"markdown-examples\",\"link\":\"/markdown-examples\"},{\"text\":\"readme\",\"link\":\"/readme\"}],\"/docs/\":[{\"text\":\"assets\",\"items\":[{\"text\":\"chunks\",\"items\":[]}]},{\"text\":\"dp\",\"items\":[{\"text\":\"🌷准备\",\"items\":[]},{\"text\":\"浏览器控制\",\"items\":[{\"text\":\"元素定位\",\"items\":[]}]},{\"text\":\"下载\",\"items\":[]}]}],\"/dp/\":[{\"text\":\"🌷准备\",\"items\":[{\"text\":\" 基本概念\",\"link\":\"/dp/1.🌷准备/1.intro\"},{\"text\":\"安装指南\",\"link\":\"/dp/1.🌷准备/2.install\"}]},{\"text\":\"浏览器控制\",\"items\":[{\"text\":\"🛰️ 动作链\",\"link\":\"/dp/2.浏览器控制/actions\"},{\"text\":\"🛰️ 浏览器对象\",\"link\":\"/dp/2.浏览器控制/browser_object\"},{\"text\":\"🛰️ 浏览器启动设置\",\"link\":\"/dp/2.浏览器控制/browser_options\"},{\"text\":\"🛰️ 连接浏览器\",\"link\":\"/dp/2.浏览器控制/connect_browser\"},{\"text\":\"🛰️ 获取控制台信息\",\"link\":\"/dp/2.浏览器控制/console\"},{\"text\":\"🛰️ 其他\",\"link\":\"/dp/2.浏览器控制/docker\"},{\"text\":\"🛰️ 元素交互\",\"link\":\"/dp/2.浏览器控制/ele_operation\"},{\"text\":\"🛰️ 获取元素信息\",\"link\":\"/dp/2.浏览器控制/get_ele_info\"},{\"text\":\"🛰️ 获取网页信息\",\"link\":\"/dp/2.浏览器控制/get_page_info\"},{\"text\":\"🛰️ iframe 操作\",\"link\":\"/dp/2.浏览器控制/iframe\"},{\"text\":\"🛰️ 概述\",\"link\":\"/dp/2.浏览器控制/intro\"},{\"text\":\"🛰️ 监听网络数据\",\"link\":\"/dp/2.浏览器控制/listener\"},{\"text\":\"🛰️ 模式切换\",\"link\":\"/dp/2.浏览器控制/mode_change\"},{\"text\":\"🛰️ Page 对象\",\"link\":\"/dp/2.浏览器控制/pages\"},{\"text\":\"🛰️ 页面交互\",\"link\":\"/dp/2.浏览器控制/page_operation\"},{\"text\":\"🛰️ 截图和录像\",\"link\":\"/dp/2.浏览器控制/screen\"},{\"text\":\"🛰️ 标签页管理\",\"link\":\"/dp/2.浏览器控制/tabs\"},{\"text\":\"🛰️ 上传文件\",\"link\":\"/dp/2.浏览器控制/upload\"},{\"text\":\"🛰️ 访问网页\",\"link\":\"/dp/2.浏览器控制/visit\"},{\"text\":\"🛰️ 等待\",\"link\":\"/dp/2.浏览器控制/waiting\"},{\"text\":\"元素定位\",\"items\":[{\"text\":\"🔦 行为模式\",\"link\":\"/dp/2.浏览器控制/元素定位/behavior\"},{\"text\":\"🔦 在结果列表中筛选\",\"link\":\"/dp/2.浏览器控制/元素定位/filter\"},{\"text\":\"🔦 页面或元素内查找\",\"link\":\"/dp/2.浏览器控制/元素定位/find_in_object\"},{\"text\":\"🔦 概述\",\"link\":\"/dp/2.浏览器控制/元素定位/intro\"},{\"text\":\"🔦 相对定位\",\"link\":\"/dp/2.浏览器控制/元素定位/relative\"},{\"text\":\"🔦 语法速查表\",\"link\":\"/dp/2.浏览器控制/元素定位/sheet\"},{\"text\":\"🔦 简化写法\",\"link\":\"/dp/2.浏览器控制/元素定位/simplify\"},{\"text\":\"🔦 定位语法\",\"link\":\"/dp/2.浏览器控制/元素定位/syntax\"}]}]},{\"text\":\"下载\",\"items\":[{\"text\":\"⤵️ 浏览器下载\",\"link\":\"/dp/3.下载/browser\"},{\"text\":\"⤵️ download方法\",\"link\":\"/dp/3.下载/DownloadKit\"},{\"text\":\"⤵️ 概述\",\"link\":\"/dp/3.下载/intro\"}]}]},\"socialLinks\":[{\"icon\":\"github\",\"link\":\"https://github.com/vuejs/vitepress\"}],\"permalinks\":{\"map\":{\"dp/1.🌷准备/1.intro\":\"/dp/prepare/intro.html\",\"dp/1.🌷准备/2.install\":\"/dp/prepare/install.html\"},\"inv\":{\"/dp/prepare/intro.html\":\"dp/1.🌷准备/1.intro\",\"/dp/prepare/install.html\":\"dp/1.🌷准备/2.install\"}},\"docAnalysisInfo\":{\"fileList\":[{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\api-examples.md\",\"relativePath\":\"api-examples.md\"},{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\1.🌷准备\\\\1.intro.md\",\"relativePath\":\"dp/1.🌷准备/1.intro.md\"},{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\1.🌷准备\\\\2.install.md\",\"relativePath\":\"dp/1.🌷准备/2.install.md\"},{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\actions.md\",\"relativePath\":\"dp/2.浏览器控制/actions.md\"},{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\browser_object.md\",\"relativePath\":\"dp/2.浏览器控制/browser_object.md\"},{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\browser_options.md\",\"relativePath\":\"dp/2.浏览器控制/browser_options.md\"},{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\connect_browser.md\",\"relativePath\":\"dp/2.浏览器控制/connect_browser.md\"},{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\console.md\",\"relativePath\":\"dp/2.浏览器控制/console.md\"},{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\docker.md\",\"relativePath\":\"dp/2.浏览器控制/docker.md\"},{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\ele_operation.md\",\"relativePath\":\"dp/2.浏览器控制/ele_operation.md\"},{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\get_ele_info.md\",\"relativePath\":\"dp/2.浏览器控制/get_ele_info.md\"},{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\get_page_info.md\",\"relativePath\":\"dp/2.浏览器控制/get_page_info.md\"},{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\iframe.md\",\"relativePath\":\"dp/2.浏览器控制/iframe.md\"},{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\intro.md\",\"relativePath\":\"dp/2.浏览器控制/intro.md\"},{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\listener.md\",\"relativePath\":\"dp/2.浏览器控制/listener.md\"},{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\mode_change.md\",\"relativePath\":\"dp/2.浏览器控制/mode_change.md\"},{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\pages.md\",\"relativePath\":\"dp/2.浏览器控制/pages.md\"},{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\page_operation.md\",\"relativePath\":\"dp/2.浏览器控制/page_operation.md\"},{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\screen.md\",\"relativePath\":\"dp/2.浏览器控制/screen.md\"},{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\tabs.md\",\"relativePath\":\"dp/2.浏览器控制/tabs.md\"},{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\upload.md\",\"relativePath\":\"dp/2.浏览器控制/upload.md\"},{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\visit.md\",\"relativePath\":\"dp/2.浏览器控制/visit.md\"},{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\waiting.md\",\"relativePath\":\"dp/2.浏览器控制/waiting.md\"},{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\元素定位\\\\behavior.md\",\"relativePath\":\"dp/2.浏览器控制/元素定位/behavior.md\"},{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\元素定位\\\\filter.md\",\"relativePath\":\"dp/2.浏览器控制/元素定位/filter.md\"},{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\元素定位\\\\find_in_object.md\",\"relativePath\":\"dp/2.浏览器控制/元素定位/find_in_object.md\"},{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\元素定位\\\\intro.md\",\"relativePath\":\"dp/2.浏览器控制/元素定位/intro.md\"},{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\元素定位\\\\relative.md\",\"relativePath\":\"dp/2.浏览器控制/元素定位/relative.md\"},{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\元素定位\\\\sheet.md\",\"relativePath\":\"dp/2.浏览器控制/元素定位/sheet.md\"},{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\元素定位\\\\simplify.md\",\"relativePath\":\"dp/2.浏览器控制/元素定位/simplify.md\"},{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\元素定位\\\\syntax.md\",\"relativePath\":\"dp/2.浏览器控制/元素定位/syntax.md\"},{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\3.下载\\\\browser.md\",\"relativePath\":\"dp/3.下载/browser.md\"},{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\3.下载\\\\DownloadKit.md\",\"relativePath\":\"dp/3.下载/DownloadKit.md\"},{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\3.下载\\\\intro.md\",\"relativePath\":\"dp/3.下载/intro.md\"},{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\markdown-examples.md\",\"relativePath\":\"markdown-examples.md\"},{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\readme.md\",\"relativePath\":\"readme.md\"}],\"totalFileWords\":65068,\"eachFileWords\":[{\"fileInfo\":{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\api-examples.md\",\"relativePath\":\"api-examples.md\"},\"wordCount\":119,\"readingTime\":\"1m\",\"frontmatter\":{\"outline\":\"deep\"}},{\"fileInfo\":{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\1.🌷准备\\\\1.intro.md\",\"relativePath\":\"dp/1.🌷准备/1.intro.md\"},\"wordCount\":2096,\"readingTime\":\"7.4m\",\"frontmatter\":{\"id\":\"intro\",\"permalink\":\"/dp/prepare/intro\",\"title\":\" 基本概念\"}},{\"fileInfo\":{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\1.🌷准备\\\\2.install.md\",\"relativePath\":\"dp/1.🌷准备/2.install.md\"},\"wordCount\":560,\"readingTime\":\"2.1m\",\"frontmatter\":{\"id\":\"install\",\"permalink\":\"/dp/prepare/install\",\"title\":\"安装指南\"}},{\"fileInfo\":{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\actions.md\",\"relativePath\":\"dp/2.浏览器控制/actions.md\"},\"wordCount\":2871,\"readingTime\":\"11.2m\",\"frontmatter\":{\"id\":\"actions\",\"title\":\"🛰️ 动作链\"}},{\"fileInfo\":{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\browser_object.md\",\"relativePath\":\"dp/2.浏览器控制/browser_object.md\"},\"wordCount\":3029,\"readingTime\":\"11.5m\",\"frontmatter\":{\"id\":\"browser_object\",\"title\":\"🛰️ 浏览器对象\"}},{\"fileInfo\":{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\browser_options.md\",\"relativePath\":\"dp/2.浏览器控制/browser_options.md\"},\"wordCount\":4527,\"readingTime\":\"16.9m\",\"frontmatter\":{\"id\":\"browser_options\",\"title\":\"🛰️ 浏览器启动设置\"}},{\"fileInfo\":{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\connect_browser.md\",\"relativePath\":\"dp/2.浏览器控制/connect_browser.md\"},\"wordCount\":2998,\"readingTime\":\"11.4m\",\"frontmatter\":{\"id\":\"connect_browser\",\"title\":\"🛰️ 连接浏览器\"}},{\"fileInfo\":{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\console.md\",\"relativePath\":\"dp/2.浏览器控制/console.md\"},\"wordCount\":514,\"readingTime\":\"1.9m\",\"frontmatter\":{\"id\":\"console\",\"title\":\"🛰️ 获取控制台信息\"}},{\"fileInfo\":{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\docker.md\",\"relativePath\":\"dp/2.浏览器控制/docker.md\"},\"wordCount\":1195,\"readingTime\":\"5.3m\",\"frontmatter\":{\"id\":\"docker\",\"title\":\"🛰️ 其他\"}},{\"fileInfo\":{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\ele_operation.md\",\"relativePath\":\"dp/2.浏览器控制/ele_operation.md\"},\"wordCount\":4831,\"readingTime\":\"18.6m\",\"frontmatter\":{\"id\":\"ele_operation\",\"title\":\"🛰️ 元素交互\"}},{\"fileInfo\":{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\get_ele_info.md\",\"relativePath\":\"dp/2.浏览器控制/get_ele_info.md\"},\"wordCount\":2478,\"readingTime\":\"9.3m\",\"frontmatter\":{\"id\":\"get_ele_info\",\"title\":\"🛰️ 获取元素信息\"}},{\"fileInfo\":{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\get_page_info.md\",\"relativePath\":\"dp/2.浏览器控制/get_page_info.md\"},\"wordCount\":1425,\"readingTime\":\"5.6m\",\"frontmatter\":{\"id\":\"get_page_info\",\"title\":\"🛰️ 获取网页信息\"}},{\"fileInfo\":{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\iframe.md\",\"relativePath\":\"dp/2.浏览器控制/iframe.md\"},\"wordCount\":1051,\"readingTime\":\"4.1m\",\"frontmatter\":{\"id\":\"iframe\",\"title\":\"🛰️ iframe 操作\"}},{\"fileInfo\":{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\intro.md\",\"relativePath\":\"dp/2.浏览器控制/intro.md\"},\"wordCount\":742,\"readingTime\":\"2.9m\",\"frontmatter\":{\"id\":\"intro\",\"title\":\"🛰️ 概述\"}},{\"fileInfo\":{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\listener.md\",\"relativePath\":\"dp/2.浏览器控制/listener.md\"},\"wordCount\":2136,\"readingTime\":\"8.4m\",\"frontmatter\":{\"id\":\"listener\",\"title\":\"🛰️ 监听网络数据\"}},{\"fileInfo\":{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\mode_change.md\",\"relativePath\":\"dp/2.浏览器控制/mode_change.md\"},\"wordCount\":681,\"readingTime\":\"2.6m\",\"frontmatter\":{\"id\":\"mode_change\",\"title\":\"🛰️ 模式切换\"}},{\"fileInfo\":{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\pages.md\",\"relativePath\":\"dp/2.浏览器控制/pages.md\"},\"wordCount\":464,\"readingTime\":\"1.8m\",\"frontmatter\":{\"id\":\"pages\",\"title\":\"🛰️ Page 对象\"}},{\"fileInfo\":{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\page_operation.md\",\"relativePath\":\"dp/2.浏览器控制/page_operation.md\"},\"wordCount\":4728,\"readingTime\":\"18.5m\",\"frontmatter\":{\"id\":\"page_operation\",\"title\":\"🛰️ 页面交互\"}},{\"fileInfo\":{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\screen.md\",\"relativePath\":\"dp/2.浏览器控制/screen.md\"},\"wordCount\":1187,\"readingTime\":\"4.7m\",\"frontmatter\":{\"id\":\"screen\",\"title\":\"🛰️ 截图和录像\"}},{\"fileInfo\":{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\tabs.md\",\"relativePath\":\"dp/2.浏览器控制/tabs.md\"},\"wordCount\":1166,\"readingTime\":\"4.7m\",\"frontmatter\":{\"id\":\"tabs\",\"title\":\"🛰️ 标签页管理\"}},{\"fileInfo\":{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\upload.md\",\"relativePath\":\"dp/2.浏览器控制/upload.md\"},\"wordCount\":862,\"readingTime\":\"3.3m\",\"frontmatter\":{\"id\":\"upload\",\"title\":\"🛰️ 上传文件\"}},{\"fileInfo\":{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\visit.md\",\"relativePath\":\"dp/2.浏览器控制/visit.md\"},\"wordCount\":1514,\"readingTime\":\"6.1m\",\"frontmatter\":{\"id\":\"visit\",\"title\":\"🛰️ 访问网页\"}},{\"fileInfo\":{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\waiting.md\",\"relativePath\":\"dp/2.浏览器控制/waiting.md\"},\"wordCount\":4113,\"readingTime\":\"15.6m\",\"frontmatter\":{\"id\":\"waiting\",\"title\":\"🛰️ 等待\"}},{\"fileInfo\":{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\元素定位\\\\behavior.md\",\"relativePath\":\"dp/2.浏览器控制/元素定位/behavior.md\"},\"wordCount\":832,\"readingTime\":\"3.2m\",\"frontmatter\":{\"id\":\"behavior\",\"title\":\"🔦 行为模式\"}},{\"fileInfo\":{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\元素定位\\\\filter.md\",\"relativePath\":\"dp/2.浏览器控制/元素定位/filter.md\"},\"wordCount\":3399,\"readingTime\":\"12.9m\",\"frontmatter\":{\"id\":\"filter\",\"title\":\"🔦 在结果列表中筛选\"}},{\"fileInfo\":{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\元素定位\\\\find_in_object.md\",\"relativePath\":\"dp/2.浏览器控制/元素定位/find_in_object.md\"},\"wordCount\":2987,\"readingTime\":\"11.4m\",\"frontmatter\":{\"id\":\"find_in_object\",\"title\":\"🔦 页面或元素内查找\"}},{\"fileInfo\":{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\元素定位\\\\intro.md\",\"relativePath\":\"dp/2.浏览器控制/元素定位/intro.md\"},\"wordCount\":660,\"readingTime\":\"2.5m\",\"frontmatter\":{\"id\":\"intro\",\"title\":\"🔦 概述\"}},{\"fileInfo\":{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\元素定位\\\\relative.md\",\"relativePath\":\"dp/2.浏览器控制/元素定位/relative.md\"},\"wordCount\":3552,\"readingTime\":\"13.4m\",\"frontmatter\":{\"id\":\"relative\",\"title\":\"🔦 相对定位\"}},{\"fileInfo\":{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\元素定位\\\\sheet.md\",\"relativePath\":\"dp/2.浏览器控制/元素定位/sheet.md\"},\"wordCount\":1193,\"readingTime\":\"5.2m\",\"frontmatter\":{\"id\":\"sheet\",\"title\":\"🔦 语法速查表\"}},{\"fileInfo\":{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\元素定位\\\\simplify.md\",\"relativePath\":\"dp/2.浏览器控制/元素定位/simplify.md\"},\"wordCount\":489,\"readingTime\":\"1.9m\",\"frontmatter\":{\"id\":\"simplify\",\"title\":\"🔦 简化写法\"}},{\"fileInfo\":{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\2.浏览器控制\\\\元素定位\\\\syntax.md\",\"relativePath\":\"dp/2.浏览器控制/元素定位/syntax.md\"},\"wordCount\":2685,\"readingTime\":\"10.3m\",\"frontmatter\":{\"id\":\"syntax\",\"title\":\"🔦 定位语法\"}},{\"fileInfo\":{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\3.下载\\\\browser.md\",\"relativePath\":\"dp/3.下载/browser.md\"},\"wordCount\":2227,\"readingTime\":\"8.5m\",\"frontmatter\":{\"id\":\"browser\",\"title\":\"⤵️ 浏览器下载\"}},{\"fileInfo\":{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\3.下载\\\\DownloadKit.md\",\"relativePath\":\"dp/3.下载/DownloadKit.md\"},\"wordCount\":1250,\"readingTime\":\"5.1m\",\"frontmatter\":{\"id\":\"DownloadKit\",\"title\":\"⤵️ download方法\"}},{\"fileInfo\":{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\dp\\\\3.下载\\\\intro.md\",\"relativePath\":\"dp/3.下载/intro.md\"},\"wordCount\":366,\"readingTime\":\"1.4m\",\"frontmatter\":{\"id\":\"intro\",\"title\":\"⤵️ 概述\"}},{\"fileInfo\":{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\markdown-examples.md\",\"relativePath\":\"markdown-examples.md\"},\"wordCount\":133,\"readingTime\":\"1m\",\"frontmatter\":{}},{\"fileInfo\":{\"filePath\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\导航\\\\teek2\\\\readme.md\",\"relativePath\":\"readme.md\"},\"wordCount\":8,\"readingTime\":\"1m\",\"frontmatter\":{}}],\"lastCommitTime\":\"2025/9/25 12:58:36\"},\"catalogues\":{\"arr\":[],\"map\":{},\"inv\":{}},\"posts\":{\"allPosts\":[{\"url\":\"/api-examples.html\",\"relativePath\":\"/api-examples.html\",\"frontmatter\":{\"outline\":\"deep\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"Runtime API Examples\",\"date\":\"2025-09-25 10:07:04\",\"capture\":\"Runtime API Examples\\nThis page demonstrates usage of some of the runtime APIs provided by VitePress.\\nThe main `useData()` API can be used to access site, theme, and page data for the current page. It works in both `.md` and `.vue` files:\\n```md\\n&lt;script setup\\nimport { useData } from 'vitepress'\\ncon\"},{\"url\":\"/dp/1.🌷准备/1.intro.html\",\"relativePath\":\"/dp/1.🌷准备/1.intro.html\",\"frontmatter\":{\"id\":\"intro\",\"permalink\":\"/dp/prepare/intro\",\"title\":\" 基本概念\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\" 基本概念\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"⤵️DrissionPage 基本概念解析\\r\\n 一、网页自动化概述\\r\\n网页自动化主要存在两种常见形式，二者各有优劣，DrissionPage 对其进行了整合优化：\\r\\n\\r\\n|自动化形式|优势|劣势|典型工具/实现|\\r\\n| ---- | ---- | ---- | ---- |\\r\\n|直接向服务器发送数据包|轻量级、速度快，便于多线程与分布式部署|当数据包构成复杂或含加密技术时，开发难度大幅增加|requests 库|\\r\\n|控制浏览器与网页交互|能处理复杂页面交互（如点击、填写表单），无需深入解构数据包|运行速度受浏览器制约，较慢且占用内存多|传统 selenium|\\r\\n\\r\\nDrissionPage\"},{\"url\":\"/dp/1.🌷准备/2.install.html\",\"relativePath\":\"/dp/1.🌷准备/2.install.html\",\"frontmatter\":{\"id\":\"install\",\"permalink\":\"/dp/prepare/install\",\"title\":\"安装指南\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"安装指南\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"DrissionPage 安装指南\\r\\n本文档基于网页 http://drissionpage.cn/get_start/installation 内容整理，详细介绍 DrissionPage 的运行环境要求、安装步骤及版本升级方法，帮助用户快速完成工具部署。\\r\\n\\r\\n\\r\\n 一、运行环境要求\\r\\n在安装 DrissionPage 前，请确保本地环境满足以下条件，避免因环境不兼容导致工具无法正常使用：\\r\\n\\r\\n| 环境类别 | 具体要求 | 补充说明 |\\r\\n|----------|----------|----------|\\r\\n| 操作系统 | Windows、Linux、Mac | 支持主流桌面操作系\"},{\"url\":\"/dp/2.浏览器控制/actions.html\",\"relativePath\":\"/dp/2.浏览器控制/actions.html\",\"frontmatter\":{\"id\":\"actions\",\"title\":\"🛰️ 动作链\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 动作链\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"动作链可以在浏览器上完成一系列交互行为，如鼠标移动、鼠标点击、键盘输入等。\\r\\n\\r\\n浏览器页面对象都支持使用动作链。\\r\\n\\r\\n可以链式操作，也可以分开执行，每个动作执行即生效，无需`perform()`。\\r\\n\\r\\n这些操作皆为模拟，真正的鼠标不会移动，因此可以多个标签页同时操作。\\r\\n\\r\\n ✅️ 使用方法\\r\\n\\r\\n可以用上述对象内置的`actions`属性调用动作链，也可以主动创建一个动作链对象，将页面对象传入使用。\\r\\n\\r\\n这两种方式唯一区别是，前者会等待页面加载完毕再执行，后者不会。\\r\\n\\r\\n 📌 使用内置`actions`属性\\r\\n\\r\\n:::info 说明\\r\\n    这种方式会等到页面框架文档（不包括\"},{\"url\":\"/dp/2.浏览器控制/browser_object.html\",\"relativePath\":\"/dp/2.浏览器控制/browser_object.html\",\"frontmatter\":{\"id\":\"browser_object\",\"title\":\"🛰️ 浏览器对象\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 浏览器对象\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"我们已经了解如何创建浏览器对象，本节介绍浏览器对象的功能。\\r\\n\\r\\n:::note 说明\\r\\n    文中的 “Tab 对象” 是`ChromiumTab`和`MixTab`的统称。\\r\\n:::\\r\\n\\r\\n ✅️️ 获取标签页对象或信息\\r\\n\\r\\n 📌 `get_tab()`\\r\\n\\r\\n此方法用于获取一个标签页对象或它的 id。\\r\\n\\r\\n`id_or_num`不为`None`时，获取`id_or_num`指定的标签页。后面几个参数无效。\\r\\n\\r\\n`id_or_num`为`None`时，根据后面几个参数指定的条件查找标签页（与关系）。\\r\\n\\r\\n|    参数名称    |             类型        \"},{\"url\":\"/dp/2.浏览器控制/browser_options.html\",\"relativePath\":\"/dp/2.浏览器控制/browser_options.html\",\"frontmatter\":{\"id\":\"browser_options\",\"title\":\"🛰️ 浏览器启动设置\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 浏览器启动设置\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"浏览器的启动配置非常繁杂，本库使用`ChromiumOptions`类管理启动配置，并且内置了常用配置的设置接口。\\r\\n\\r\\n:::warning 注意\\r\\n    该对象只能用于浏览器的启动，浏览器启动后，再修改该配置没有任何效果。接管已打开的浏览器时，启动配置也是无效的。\\r\\n:::\\r\\n\\r\\n ✅️️ 创建对象\\r\\n\\r\\n 📌 导入\\r\\n\\r\\n```python\\r\\nfrom DrissionPage import ChromiumOptions\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n 📌 初始化参数\\r\\n\\r\\n`ChromiumOptions`对象用于管理浏览器初始化配置。可从配置文件中读取配置来进行初始化。\\r\\n\\r\"},{\"url\":\"/dp/2.浏览器控制/connect_browser.html\",\"relativePath\":\"/dp/2.浏览器控制/connect_browser.html\",\"frontmatter\":{\"id\":\"connect_browser\",\"title\":\"🛰️ 连接浏览器\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 连接浏览器\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"`Chromium`对象用于连接和管理浏览器。标签页的开关和获取、整体运行参数配置、浏览器信息获取等都由它进行。\\r\\n\\r\\n根据不同的配置，可以接管已打开的浏览器，也可以启动新的浏览器。\\r\\n\\r\\n每个浏览器只能有一个`Chromium`对象（同一进程中）。对同一个浏览器重复使用`Chromium()`获取的都是同一个对象。\\r\\n\\r\\n:::tip Tips\\r\\n    程序结束时，被打开的浏览器不会主动关闭（VSCode 启动的除外），以便下次运行程序时使用。\\r\\n    新手在使用无头模式时需注意，程序关闭后其实浏览器进程还在，只是看不见。\\r\\n:::\\r\\n\\r\\n ✅️ `Chromium`初始化参数\\r\\n\\r\\n|\"},{\"url\":\"/dp/2.浏览器控制/console.html\",\"relativePath\":\"/dp/2.浏览器控制/console.html\",\"frontmatter\":{\"id\":\"console\",\"title\":\"🛰️ 获取控制台信息\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 获取控制台信息\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n获取控制台信息的逻辑和监听网络数据差不多，是通过监听控制台数据实现的。\\r\\n\\r\\n:::warning 注意\\r\\n    不是所有显示在控制台的信息都能获取，需要用`console.log()`等方法输出到控制台的才能获取。\\r\\n:::\\r\\n\\r\\n ✅️ 示例\\r\\n\\r\\n```python\\r\\nfrom DrissionPage import Chromium\\r\\n\\r\\ntab = Chromium().latest_tab\\r\\ntab.console.start()\\r\\ntab.run_js('con\"},{\"url\":\"/dp/2.浏览器控制/docker.html\",\"relativePath\":\"/dp/2.浏览器控制/docker.html\",\"frontmatter\":{\"id\":\"docker\",\"title\":\"🛰️ 其他\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 其他\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"Docker 常用命令参考手册\\r\\n\\r\\n 镜像相关命令\\r\\n\\r\\n 搜索和拉取镜像\\r\\n```bash\\r\\n 搜索镜像\\r\\ndocker search nginx\\r\\n\\r\\n 拉取镜像\\r\\ndocker pull nginx\\r\\ndocker pull nginx:1.20   指定版本\\r\\n\\r\\n 查看本地镜像\\r\\ndocker images\\r\\ndocker image ls\\r\\n\\r\\n 删除镜像\\r\\ndocker rmi nginx\\r\\ndocker rmi image_id\\r\\n```\\r\\n 国内镜像源\\r\\n```bash\\r\\n\\r\\n\\r\\n 使用 Python 3.9 的 slim 版本作为基础镜像\\r\\nFROM docker.m.d\"},{\"url\":\"/dp/2.浏览器控制/ele_operation.html\",\"relativePath\":\"/dp/2.浏览器控制/ele_operation.html\",\"frontmatter\":{\"id\":\"ele_operation\",\"title\":\"🛰️ 元素交互\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 元素交互\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n本节介绍与浏览器元素的交互。浏览器元素对象为`ChromiumElement`。\\r\\n\\r\\n ✅️️ 点击元素\\r\\n\\r\\n 📌 `click()`和`click.left()`\\r\\n\\r\\n这两个方法作用是一样的，用于左键点击元素。可选择模拟点击或 js 点击。\\r\\n\\r\\n|    参数名称     |   类型    |   默认值   | 说明                                                                          \"},{\"url\":\"/dp/2.浏览器控制/get_ele_info.html\",\"relativePath\":\"/dp/2.浏览器控制/get_ele_info.html\",\"frontmatter\":{\"id\":\"get_ele_info\",\"title\":\"🛰️ 获取元素信息\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 获取元素信息\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"浏览器元素对应的对象是`ChromiumElement`和`ShadowRoot`，本节介绍如何获取元素信息。\\r\\n\\r\\n ✅️️ 内容和属性\\r\\n\\r\\n 📌 `tag`\\r\\n\\r\\n此属性返回元素的标签名。\\r\\n\\r\\n返回类型：`str`\\r\\n\\r\\n---\\r\\n\\r\\n 📌 `html`\\r\\n\\r\\n此属性返回元素的`outerHTML`文本。\\r\\n\\r\\n返回类型：`str`\\r\\n\\r\\n---\\r\\n\\r\\n 📌 `inner_html`\\r\\n\\r\\n此属性返回元素的`innerHTML`文本。\\r\\n\\r\\n返回类型：`str`\\r\\n\\r\\n---\\r\\n\\r\\n 📌 `text`\\r\\n\\r\\n此属性返回元素内所有文本组合成的字符串。  \\r\\n该字符串已格式化，即已\"},{\"url\":\"/dp/2.浏览器控制/get_page_info.html\",\"relativePath\":\"/dp/2.浏览器控制/get_page_info.html\",\"frontmatter\":{\"id\":\"get_page_info\",\"title\":\"🛰️ 获取网页信息\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 获取网页信息\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n成功访问网页后，可使用 Tab 对象属性和方法获取页面信息。\\r\\n\\r\\n ✅️️ 页面信息\\r\\n\\r\\n 📌 `html`\\r\\n\\r\\n此属性返回当前页面 html 文本。\\r\\n\\r\\n:::info 注意\\r\\n    html 文本不包含`&lt;iframe&gt;`元素内容。\\r\\n:::\\r\\n\\r\\n返回类型：`str`\\r\\n\\r\\n---\\r\\n\\r\\n 📌 `json`\\r\\n\\r\\n此属性把请求内容解析成 json。\\r\\n\\r\\n假如用浏览器访问会返回 `*.json` 文件的 url，浏览器会把 json 数据显示出来\"},{\"url\":\"/dp/2.浏览器控制/iframe.html\",\"relativePath\":\"/dp/2.浏览器控制/iframe.html\",\"frontmatter\":{\"id\":\"iframe\",\"title\":\"🛰️ iframe 操作\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ iframe 操作\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n`&lt;iframe&gt;`元素是一种特殊的元素，它既是元素，也是页面。\\r\\n\\r\\nDrissionPage 无需切入切出即可处理`&lt;iframe&gt;`元素。\\r\\n可实现跨级元素查找、元素内部单独跳转、同时操作`&lt;iframe&gt;`内外元素、多线程控制多个`&lt;iframe&gt;`等操作。\\r\\n\\r\\n ✅️ 获取`&lt;iframe&gt;`对象\\r\\n\\r\\n获取`&lt;iframe&gt;`对象的方法有两种，可用获取普通元素的方式获取，或者用`get_fra\"},{\"url\":\"/dp/2.浏览器控制/intro.html\",\"relativePath\":\"/dp/2.浏览器控制/intro.html\",\"frontmatter\":{\"id\":\"intro\",\"title\":\"🛰️ 概述\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 概述\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n ✅️️ 基本逻辑\\r\\n\\r\\n操作浏览器的基本逻辑如下：\\r\\n\\r\\n1. 创建浏览器对象，用于启动或接管浏览器\\r\\n2. 获取一个 Tab 对象\\r\\n3. 使用 Tab 对象访问网址\\r\\n4. 使用 Tab 对象获取标签页内需要的元素对象\\r\\n5. 使用元素对象进行交互\\r\\n\\r\\n除此以外，还能执行更为复杂的操作，如执行 js 代码、监听网络数据、下载文件等。这些在后面的章节再介绍。\\r\\n\\r\\n示例： 在百度搜索 “Drissionpage”，并打印结果。\\r\\n\\r\\n```python\\r\\n 导入\\r\\nfro\"},{\"url\":\"/dp/2.浏览器控制/listener.html\",\"relativePath\":\"/dp/2.浏览器控制/listener.html\",\"frontmatter\":{\"id\":\"listener\",\"title\":\"🛰️ 监听网络数据\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 监听网络数据\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n许多网页的数据来自接口，在网站使用过程中动态加载，如使用 JS 加载内容的翻页列表。\\r\\n\\r\\n这些数据通常以 json 形式发送，浏览器接收后，对其进行解析，再加载到 DOM 相应位置。\\r\\n\\r\\n做数据采集的时候，我们往往从 DOM 中去获取解析后数据的，可能存在数据不全、加载响应不及时、难以判断加载完成等问题。\\r\\n\\r\\n如果我们可以拿到浏览器收发的数据包，根据数据包状态判断下一步操作，甚至直接获取数据，岂不是爽爆了？\\r\\n\\r\\nDrissionPage 每个页面对象（包括 Tab 和 \"},{\"url\":\"/dp/2.浏览器控制/mode_change.html\",\"relativePath\":\"/dp/2.浏览器控制/mode_change.html\",\"frontmatter\":{\"id\":\"mode_change\",\"title\":\"🛰️ 模式切换\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 模式切换\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n`MixTab`和`WebPage`有两种模式，d 模式用于控制浏览器，s 模式使用`requests`收发数据包。\\r\\n\\r\\n两种模式访问页面和提取数据的逻辑是一致的，使用同一套 api。\\r\\n\\r\\n每个标签页对象创建时都处于 d 模式。\\r\\n\\r\\n使用`change_mode()`方法进行切换。模式切换的时候会同步登录信息。\\r\\n\\r\\ns 模式下仍然可以控制浏览器，但因为共用 api，`ele()`等两种模式共用的方法，查找对象是`requests`的结果，而非浏览器。\\r\\n\\r\\n因此 s 模\"},{\"url\":\"/dp/2.浏览器控制/page_operation.html\",\"relativePath\":\"/dp/2.浏览器控制/page_operation.html\",\"frontmatter\":{\"id\":\"page_operation\",\"title\":\"🛰️ 页面交互\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 页面交互\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n本节介绍浏览器页面交互功能。\\r\\n\\r\\n一个 Tab 对象控制一个浏览器的标签页，是页面控制的主要单位。\\r\\n\\r\\n ✅️️ 页面跳转\\r\\n\\r\\n 📌 `get()`\\r\\n\\r\\n详见 “访问网页” 章节。\\r\\n\\r\\n---\\r\\n\\r\\n 📌 `back()`\\r\\n\\r\\n此方法用于在浏览历史中后退若干步。\\r\\n\\r\\n|  参数名称   |  类型   | 默认值 | 说明   |\\r\\n|:-------:|:-----:|:---:|------|\\r\\n| `steps` | `int` | `1` | 后退步数\"},{\"url\":\"/dp/2.浏览器控制/pages.html\",\"relativePath\":\"/dp/2.浏览器控制/pages.html\",\"frontmatter\":{\"id\":\"pages\",\"title\":\"🛰️ Page 对象\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ Page 对象\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n`ChromiumPage`和`WebPage`是 4.1 之前用于连接和控制浏览器的对象。\\r\\n\\r\\n4.1 这些功能由`Chromium`实现，但`ChromiumPage`和`WebPage`仍能正常使用。\\r\\n\\r\\n对比`Chromium`，`ChromiumPage`和`WebPage`在连接浏览器时可以少写一行代码，但在多标签页操作的时候容易造成混乱。\\r\\n\\r\\n更详细的用法可以看旧版文档。\\r\\n\\r\\n ✅️️ `ChromiumPage`\\r\\n\\r\\n`ChromiumPage`把浏览\"},{\"url\":\"/dp/2.浏览器控制/screen.html\",\"relativePath\":\"/dp/2.浏览器控制/screen.html\",\"frontmatter\":{\"id\":\"screen\",\"title\":\"🛰️ 截图和录像\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 截图和录像\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n ✅️️ 页面截图\\r\\n\\r\\n使用页面对象的`get_screenshot()`方法对页面进行截图，可对整个网页、可见网页、指定范围截图。\\r\\n\\r\\n对可视范围外截图需要 90 以上版本浏览器支持。\\r\\n\\r\\n下面三个参数三选一，优先级：`as_bytes`&gt;`as_base64`&gt;`path`。\\r\\n\\r\\n| 参数名称           | 类型                | 默认值     | 说明                                     \"},{\"url\":\"/dp/2.浏览器控制/tabs.html\",\"relativePath\":\"/dp/2.浏览器控制/tabs.html\",\"frontmatter\":{\"id\":\"tabs\",\"title\":\"🛰️ 标签页管理\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 标签页管理\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n浏览器的标签页由 Tab 对象（`ChromiumTab`和`MixTab`）控制。\\r\\n\\r\\n与网页的交互都由标签页对象进行。\\r\\n\\r\\n默认情况下，一个标签页由一个 Tab 对象控制。\\r\\n\\r\\n多个 Tab 对象可以同时操作，不需要切换焦点，也不需要激活到前台。\\r\\n\\r\\n:::tip 提醒\\r\\n    当禁用单例模式后，一个标签页也可以被多个 Tab 对象同时控制。\\r\\n:::\\r\\n\\r\\n ✅️️ 获取标签页对象\\r\\n\\r\\n 📌 获取最后激活的标签页\\r\\n\\r\\n`Chromium`对象的`lates\"},{\"url\":\"/dp/2.浏览器控制/upload.html\",\"relativePath\":\"/dp/2.浏览器控制/upload.html\",\"frontmatter\":{\"id\":\"upload\",\"title\":\"🛰️ 上传文件\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 上传文件\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n上传文件有两种方式：\\r\\n\\r\\n- 拦截文件输入框，自动填入路径\\r\\n- 找到`&lt;input&gt;`元素，填入文件路径\\r\\n\\r\\n ✅️️ 自然的交互\\r\\n\\r\\n传统自动化工具的文件上传，需要开发者在 DOM 里找到文件上传控件，然后用元素对象的`input()`方法填入路径。\\r\\n\\r\\n有些上传控件是临时加载的，有些藏得很深，找起来费时费力。\\r\\n\\r\\n本库提供一种自然的文件上传方式，无需在 DOM 里找控件，只要自然地点击触发文件选择框，程序就能主动截获，并填写设定好的路径，开发更省事。\"},{\"url\":\"/dp/2.浏览器控制/visit.html\",\"relativePath\":\"/dp/2.浏览器控制/visit.html\",\"frontmatter\":{\"id\":\"visit\",\"title\":\"🛰️ 访问网页\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 访问网页\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n本节介绍 Tab 对象访问网页的相关内容。\\r\\n\\r\\n ✅️️ 连接方法\\r\\n\\r\\n 📌 `get()`\\r\\n\\r\\n该方法用于跳转到一个网址。当连接失败时，程序会进行重试。\\r\\n\\r\\n可指定本地文件路径。\\r\\n\\r\\n|       参数名称        | 类型               | 默认值     | 说明                                                    |\\r\\n|:-----------------:|:------------\"},{\"url\":\"/dp/2.浏览器控制/waiting.html\",\"relativePath\":\"/dp/2.浏览器控制/waiting.html\",\"frontmatter\":{\"id\":\"waiting\",\"title\":\"🛰️ 等待\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 等待\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n网络环境不稳定，页面 js 运行时间也难以确定，自动化过程中经常遇到需要等待的情况。\\r\\n\\r\\n如果总是用`sleep()`，显得不太优雅，等待多了浪费时间，等待不够会导致报错。\\r\\n\\r\\n因此，程序能够智能等待是非常重要的，DrissionPage 内置了一些等待方法，可以提高程序稳定性和效率。\\r\\n\\r\\n它们藏在页面对象和元素对象的`wait`属性里。\\r\\n\\r\\n等待方法均有`timeout`参数，可自行设得超时时间，也可以设置超时后返回`False`还是抛出异常。\\r\\n\\r\\n ✅️️ 浏览器\"},{\"url\":\"/dp/2.浏览器控制/元素定位/behavior.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/behavior.html\",\"frontmatter\":{\"id\":\"behavior\",\"title\":\"🔦 行为模式\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 行为模式\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"✅️ 等待元素\\r\\n\\r\\n由于网络、js 运行时间的不确定性，经常需要等待元素加载到 DOM 中才能使用。\\r\\n\\r\\n浏览器所有查找元素操作都自带等待，时间默认跟随元素所在页面`timeout`属性（默认 10 秒），也可以在每次查找时单独设置，单独设置的等待时间不会改变页面原来设置。\\r\\n\\r\\n 📌 内置等待\\r\\n\\r\\n```python\\r\\nfrom DrissionPage import Chromium\\r\\n\\r\\ntab = Chromium().latest_tab\\r\\n 设置查找元素超时时间为 5 秒\\r\\ntab.set.timeouts(5)\\r\\n\\r\\n 使用页面超时时间来查找元素（5 秒）\\r\\nele1 =\"},{\"url\":\"/dp/2.浏览器控制/元素定位/filter.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/filter.html\",\"frontmatter\":{\"id\":\"filter\",\"title\":\"🔦 在结果列表中筛选\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 在结果列表中筛选\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"本节介绍在元素列表中按需要进行筛选，获取指定元素。\\r\\n\\r\\n`eles()`、`nexts()`等能够获取多个元素的方法，返回的列表可进行进一步筛选，以获取指定的元素。\\r\\n\\r\\n:::info 说明\\r\\n    浏览器页面对象和`SessionPage`产生的元素列表均有此功能，前者筛选功能比后者多。\\r\\n:::\\r\\n\\r\\n示例1，筛选并返回元素列表：\\r\\n\\r\\n```python\\r\\nfrom DrissionPage import Chromium\\r\\n\\r\\ntab = Chromium().latest_tab\\r\\ntab.get('https://www.baidu.com')\\r\\neles = tab('s-\"},{\"url\":\"/dp/2.浏览器控制/元素定位/find_in_object.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/find_in_object.html\",\"frontmatter\":{\"id\":\"find_in_object\",\"title\":\"🔦 页面或元素内查找\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 页面或元素内查找\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"✅️️ 页面或元素内查找\\r\\n\\r\\n页面对象和元素对象都拥有`ele()`和`eles()`方法，用于获取其内部指定子元素。\\r\\n\\r\\n 📌 `ele()`\\r\\n\\r\\n用于查找其内部第一个符合条件的元素。\\r\\n\\r\\n`SessionPage`和`ChromiumPage`获取元素的方法是一致的，但前者返回的元素对象为`SessionElement`，后者是`ChromiumElement`。\\r\\n\\r\\n|         参数名称         |                        类型                        |  默认值   | 说明                   \"},{\"url\":\"/dp/2.浏览器控制/元素定位/intro.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/intro.html\",\"frontmatter\":{\"id\":\"intro\",\"title\":\"🔦 概述\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 概述\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n定位元素是自动化重中之重的技能。  \\r\\n虽然可在开发者工具直接复制绝对路径，但这样做有几个缺点：\\r\\n\\r\\n- 代码冗长，可读性低\\r\\n- 动态页面容易导致元素失效\\r\\n- 无法使用相对定位\\r\\n- 网页稍有改动或者出现临时元素就不能用，容错性低\\r\\n- 无法跨`&lt;iframe&gt;`查找元素\\r\\n\\r\\n因此作者极不建议使用右键复制的元素路径。\\r\\n\\r\\n本库提供一套简洁易用的语法，用于快速定位元素，并且内置等待功能、支持链式查找，减少了代码的复杂性。  \\r\\n同时也兼容 css selec\"},{\"url\":\"/dp/2.浏览器控制/元素定位/relative.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/relative.html\",\"frontmatter\":{\"id\":\"relative\",\"title\":\"🔦 相对定位\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 相对定位\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"相对定位的意思是以一个已获取的元素为基准，按需要使用不同方法获取指定的其它元素。\\r\\n\\r\\n相对定位有基于 DOM 的方式和基于视觉的方式两种\\r\\n\\r\\n ✅️️ 基于 DOM 相对定位\\r\\n\\r\\n以下方法可以以某元素为基准，在 DOM 中按照条件获取其直接子节点、同级节点、祖先元素、文档前后节点。  \\r\\n\\r\\n这里说的是 “节点”，不是 “元素”。因为相对定位可以获取除元素外的其它节点，包括文本、注释节点。\\r\\n\\r\\n:::warning 注意\\r\\n    如果元素在`&lt;iframe\\r\\n:::\\r\\n\\r\\n 📌 获取父级元素\\r\\n\\r\\n🔸 `parent()`\\r\\n\\r\\n此方法获取当前元素某一级父元素，可指定筛选条\"},{\"url\":\"/dp/2.浏览器控制/元素定位/sheet.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/sheet.html\",\"frontmatter\":{\"id\":\"sheet\",\"title\":\"🔦 语法速查表\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 语法速查表\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n ✅️ 定位语法\\r\\n\\r\\n 📌 基本用法\\r\\n\\r\\n|    写法     |       精确匹配        |    模糊匹配    |   匹配开头   |   匹配结尾   |                   说明                    |\\r\\n|:---------:|:-----------------:|:----------:|:--------:|:--------:|:------------------------------------\"},{\"url\":\"/dp/2.浏览器控制/元素定位/simplify.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/simplify.html\",\"frontmatter\":{\"id\":\"simplify\",\"title\":\"🔦 简化写法\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 简化写法\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n为进一步精简代码，定位语法都可以用简化形式来表示，使语句更短，链式操作时更清晰。\\r\\n\\r\\n ✅️ 定位符语法简化\\r\\n\\r\\n- 定位语法都有其简化形式\\r\\n- 页面和元素对象都实现了`__call__()`方法，所以`page.ele('')`可简化为`page('')`\\r\\n- 查找方法都支持链式操作\\r\\n\\r\\n示例：\\r\\n\\r\\n```python\\r\\n 查找tag为div的元素\\r\\nele = tab.ele('tag:div')   原写法\\r\\nele = tab('t:div')   简化写法\"},{\"url\":\"/dp/2.浏览器控制/元素定位/syntax.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/syntax.html\",\"frontmatter\":{\"id\":\"syntax\",\"title\":\"🔦 定位语法\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 定位语法\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"定位语法用于指明以哪种方式去查找指定元素，语法简洁明了，熟练使用可大幅提高程序可读性。\\r\\n\\r\\n所有涉及获取元素的操作都可以使用定位语法，如`ele()`、`actions.move_to()`、`wait.eles_loaded()`、`get_frame()`等等。\\r\\n\\r\\n定位语法用于简化代码，提高可读性，但并不覆盖所有复杂场景。很复杂的场景可直接用 xpath 查找。\\r\\n\\r\\n以下使用这个页面进行讲解。\\r\\n\\r\\n```html\\r\\n&lt;html\\r\\n&lt;body&gt;\\r\\n&lt;div id=\\\"one\\\"&gt;\\r\\n    &lt;p class=\\\"p_cls\\\" id=\\\"row1\\\" dat\"},{\"url\":\"/dp/3.下载/DownloadKit.html\",\"relativePath\":\"/dp/3.下载/DownloadKit.html\",\"frontmatter\":{\"id\":\"DownloadKit\",\"title\":\"⤵️ download方法\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"⤵️ download方法\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\nDrissionPage 每种页面对象都内置一个下载工具，提供任务管理、多线程并发、大文件分块、自动重连、文件名冲突处理等功能。\\r\\n\\r\\n该工具现已独立打包成一个库，名为 DownloadKit，详细介绍见：DownloadKit。\\r\\n\\r\\n这里只介绍其主要功能，具体使用和设置方法请移步该文档。\\r\\n\\r\\n ✅️️ 功能简介\\r\\n\\r\\n 📌 支持该工具的对象\\r\\n\\r\\n以下对象均支持\\r\\n\\r\\n- `SessionPage`\\r\\n- `ChromiumTab`\\r\\n- `MixTab`\\r\\n- `Ch\"},{\"url\":\"/dp/3.下载/browser.html\",\"relativePath\":\"/dp/3.下载/browser.html\",\"frontmatter\":{\"id\":\"browser\",\"title\":\"⤵️ 浏览器下载\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"⤵️ 浏览器下载\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n本节介绍对浏览器下载任务进行设置的功能。\\r\\n\\r\\n ✅️ 概述\\r\\n\\r\\n 📌 功能\\r\\n\\r\\nDrissionPage 提供以下功能，用于对浏览器下载任务进行控制：\\r\\n\\r\\n- 每个 tab 对象可独立设置文件保存路径\\r\\n- 下载前可指定文件名称，实现文件重命名\\r\\n- 可设置存在同名文件时的处理方式\\r\\n- 可获取任务下载进度\\r\\n- 可等待下载任务结束\\r\\n- 可取消任务\\r\\n- 可拦截下载任务并获取其信息\\r\\n\\r\\n---\\r\\n\\r\\n ⚠️ 注意事项\\r\\n\\r\\n 📌 记得等待任务结束\\r\\n\\r\\n因技术原\"},{\"url\":\"/dp/3.下载/intro.html\",\"relativePath\":\"/dp/3.下载/intro.html\",\"frontmatter\":{\"id\":\"intro\",\"title\":\"⤵️ 概述\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"⤵️ 概述\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\nDrissionPage 提供了强大的文件下载管理功能。\\r\\n\\r\\n能够主动发起下载任务，也能够对浏览器触发的下载任务进行管理。\\r\\n\\r\\n ✅️️ `download()`方法\\r\\n\\r\\n该方法可以主动发起下载任务，提供任务管理、多线程、大文件分块、自动重连、文件名冲突处理等功能。\\r\\n\\r\\n页面对象、`&lt;iframe&gt;`元素对象均支持此方法。\\r\\n\\r\\n此方法是封装 requests 实现的，下载时会自动同步 cookies。\\r\\n\\r\\n示例：\\r\\n\\r\\n```python\\r\\nfrom D\"},{\"url\":\"/\",\"relativePath\":\"/\",\"frontmatter\":{\"layout\":\"home\",\"hero\":{\"name\":\"DrissionPage文档\",\"text\":\"镜像网站\",\"tagline\":\"✨一个基于 Python 的网页自动化工具\",\"actions\":[{\"theme\":\"brand\",\"text\":\"文档\",\"link\":\"/dp/prepare/intro\"},{\"theme\":\"alt\",\"text\":\"视频\",\"link\":\"https://space.bilibili.com/20526000/lists/4870840?type=season\"},{\"theme\":\"alt\",\"text\":\"插件\",\"link\":\"https://docs.qq.com/aio/p/sc4xdbyayxdf36f?p=CDNmOdRjNMOM5hGBSjJQ2X\"}],\"image\":{\"src\":\"/dp-logo.png\",\"alt\":\"Teek\"}},\"features\":[{\"title\":\"文档\",\"details\":\"DrissionPage 镜像文档\",\"link\":\"/dp/prepare/intro\"},{\"title\":\"官方教学视频\",\"details\":\"B站教学视频\",\"link\":\"https://space.bilibili.com/20526000/lists/4870840?type=season\"},{\"title\":\"插件\",\"details\":\"DrissionPage专用浏览器插件(有免费版和VIP版)\",\"link\":\"https://docs.qq.com/aio/p/sc4xdbyayxdf36f?p=CDNmOdRjNMOM5hGBSjJQ2X\"}]},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"\",\"date\":\"2025-09-25 10:07:04\",\"capture\":\"加入社区\\n 打赏原作者\\n&lt;script setup lang=\\\"ts\\\"\\nimport { onMounted } from \\\"vue\\\";\\nimport { useData } from \\\"vitepress\\\";\\nimport { readingIcon } from \\\"vitepress-theme-teek\\\"\\nconst { frontmatter } = useData();\\nonMounted(() =&gt; {\\n  const heroTextDom = document.querySelector&lt;HTMLElement&gt;(\\\".VPHero .text\\\");\\n  \"},{\"url\":\"/markdown-examples.html\",\"relativePath\":\"/markdown-examples.html\",\"frontmatter\":{},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"Markdown Extension Examples\",\"date\":\"2025-09-25 10:07:04\",\"capture\":\"This page demonstrates some of the built-in markdown extensions provided by VitePress.\\n Syntax Highlighting\\nVitePress provides Syntax Highlighting powered by Shiki, with additional features like line-highlighting:\\nInput\\n````md\\n```js{4}\\nexport default {\\n  data () {\\n    return {\\n      msg: 'Highlighte\"},{\"url\":\"/readme.html\",\"relativePath\":\"/readme.html\",\"frontmatter\":{},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"html\",\"date\":\"2025-09-25 12:42:06\",\"capture\":\"\"}],\"originPosts\":[{\"url\":\"/api-examples.html\",\"relativePath\":\"/api-examples.html\",\"frontmatter\":{\"outline\":\"deep\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"Runtime API Examples\",\"date\":\"2025-09-25 10:07:04\",\"capture\":\"Runtime API Examples\\nThis page demonstrates usage of some of the runtime APIs provided by VitePress.\\nThe main `useData()` API can be used to access site, theme, and page data for the current page. It works in both `.md` and `.vue` files:\\n```md\\n&lt;script setup\\nimport { useData } from 'vitepress'\\ncon\"},{\"url\":\"/dp/1.🌷准备/1.intro.html\",\"relativePath\":\"/dp/1.🌷准备/1.intro.html\",\"frontmatter\":{\"id\":\"intro\",\"permalink\":\"/dp/prepare/intro\",\"title\":\" 基本概念\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\" 基本概念\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"⤵️DrissionPage 基本概念解析\\r\\n 一、网页自动化概述\\r\\n网页自动化主要存在两种常见形式，二者各有优劣，DrissionPage 对其进行了整合优化：\\r\\n\\r\\n|自动化形式|优势|劣势|典型工具/实现|\\r\\n| ---- | ---- | ---- | ---- |\\r\\n|直接向服务器发送数据包|轻量级、速度快，便于多线程与分布式部署|当数据包构成复杂或含加密技术时，开发难度大幅增加|requests 库|\\r\\n|控制浏览器与网页交互|能处理复杂页面交互（如点击、填写表单），无需深入解构数据包|运行速度受浏览器制约，较慢且占用内存多|传统 selenium|\\r\\n\\r\\nDrissionPage\"},{\"url\":\"/dp/1.🌷准备/2.install.html\",\"relativePath\":\"/dp/1.🌷准备/2.install.html\",\"frontmatter\":{\"id\":\"install\",\"permalink\":\"/dp/prepare/install\",\"title\":\"安装指南\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"安装指南\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"DrissionPage 安装指南\\r\\n本文档基于网页 http://drissionpage.cn/get_start/installation 内容整理，详细介绍 DrissionPage 的运行环境要求、安装步骤及版本升级方法，帮助用户快速完成工具部署。\\r\\n\\r\\n\\r\\n 一、运行环境要求\\r\\n在安装 DrissionPage 前，请确保本地环境满足以下条件，避免因环境不兼容导致工具无法正常使用：\\r\\n\\r\\n| 环境类别 | 具体要求 | 补充说明 |\\r\\n|----------|----------|----------|\\r\\n| 操作系统 | Windows、Linux、Mac | 支持主流桌面操作系\"},{\"url\":\"/dp/2.浏览器控制/actions.html\",\"relativePath\":\"/dp/2.浏览器控制/actions.html\",\"frontmatter\":{\"id\":\"actions\",\"title\":\"🛰️ 动作链\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 动作链\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"动作链可以在浏览器上完成一系列交互行为，如鼠标移动、鼠标点击、键盘输入等。\\r\\n\\r\\n浏览器页面对象都支持使用动作链。\\r\\n\\r\\n可以链式操作，也可以分开执行，每个动作执行即生效，无需`perform()`。\\r\\n\\r\\n这些操作皆为模拟，真正的鼠标不会移动，因此可以多个标签页同时操作。\\r\\n\\r\\n ✅️ 使用方法\\r\\n\\r\\n可以用上述对象内置的`actions`属性调用动作链，也可以主动创建一个动作链对象，将页面对象传入使用。\\r\\n\\r\\n这两种方式唯一区别是，前者会等待页面加载完毕再执行，后者不会。\\r\\n\\r\\n 📌 使用内置`actions`属性\\r\\n\\r\\n:::info 说明\\r\\n    这种方式会等到页面框架文档（不包括\"},{\"url\":\"/dp/2.浏览器控制/browser_object.html\",\"relativePath\":\"/dp/2.浏览器控制/browser_object.html\",\"frontmatter\":{\"id\":\"browser_object\",\"title\":\"🛰️ 浏览器对象\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 浏览器对象\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"我们已经了解如何创建浏览器对象，本节介绍浏览器对象的功能。\\r\\n\\r\\n:::note 说明\\r\\n    文中的 “Tab 对象” 是`ChromiumTab`和`MixTab`的统称。\\r\\n:::\\r\\n\\r\\n ✅️️ 获取标签页对象或信息\\r\\n\\r\\n 📌 `get_tab()`\\r\\n\\r\\n此方法用于获取一个标签页对象或它的 id。\\r\\n\\r\\n`id_or_num`不为`None`时，获取`id_or_num`指定的标签页。后面几个参数无效。\\r\\n\\r\\n`id_or_num`为`None`时，根据后面几个参数指定的条件查找标签页（与关系）。\\r\\n\\r\\n|    参数名称    |             类型        \"},{\"url\":\"/dp/2.浏览器控制/browser_options.html\",\"relativePath\":\"/dp/2.浏览器控制/browser_options.html\",\"frontmatter\":{\"id\":\"browser_options\",\"title\":\"🛰️ 浏览器启动设置\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 浏览器启动设置\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"浏览器的启动配置非常繁杂，本库使用`ChromiumOptions`类管理启动配置，并且内置了常用配置的设置接口。\\r\\n\\r\\n:::warning 注意\\r\\n    该对象只能用于浏览器的启动，浏览器启动后，再修改该配置没有任何效果。接管已打开的浏览器时，启动配置也是无效的。\\r\\n:::\\r\\n\\r\\n ✅️️ 创建对象\\r\\n\\r\\n 📌 导入\\r\\n\\r\\n```python\\r\\nfrom DrissionPage import ChromiumOptions\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n 📌 初始化参数\\r\\n\\r\\n`ChromiumOptions`对象用于管理浏览器初始化配置。可从配置文件中读取配置来进行初始化。\\r\\n\\r\"},{\"url\":\"/dp/2.浏览器控制/connect_browser.html\",\"relativePath\":\"/dp/2.浏览器控制/connect_browser.html\",\"frontmatter\":{\"id\":\"connect_browser\",\"title\":\"🛰️ 连接浏览器\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 连接浏览器\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"`Chromium`对象用于连接和管理浏览器。标签页的开关和获取、整体运行参数配置、浏览器信息获取等都由它进行。\\r\\n\\r\\n根据不同的配置，可以接管已打开的浏览器，也可以启动新的浏览器。\\r\\n\\r\\n每个浏览器只能有一个`Chromium`对象（同一进程中）。对同一个浏览器重复使用`Chromium()`获取的都是同一个对象。\\r\\n\\r\\n:::tip Tips\\r\\n    程序结束时，被打开的浏览器不会主动关闭（VSCode 启动的除外），以便下次运行程序时使用。\\r\\n    新手在使用无头模式时需注意，程序关闭后其实浏览器进程还在，只是看不见。\\r\\n:::\\r\\n\\r\\n ✅️ `Chromium`初始化参数\\r\\n\\r\\n|\"},{\"url\":\"/dp/2.浏览器控制/console.html\",\"relativePath\":\"/dp/2.浏览器控制/console.html\",\"frontmatter\":{\"id\":\"console\",\"title\":\"🛰️ 获取控制台信息\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 获取控制台信息\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n获取控制台信息的逻辑和监听网络数据差不多，是通过监听控制台数据实现的。\\r\\n\\r\\n:::warning 注意\\r\\n    不是所有显示在控制台的信息都能获取，需要用`console.log()`等方法输出到控制台的才能获取。\\r\\n:::\\r\\n\\r\\n ✅️ 示例\\r\\n\\r\\n```python\\r\\nfrom DrissionPage import Chromium\\r\\n\\r\\ntab = Chromium().latest_tab\\r\\ntab.console.start()\\r\\ntab.run_js('con\"},{\"url\":\"/dp/2.浏览器控制/docker.html\",\"relativePath\":\"/dp/2.浏览器控制/docker.html\",\"frontmatter\":{\"id\":\"docker\",\"title\":\"🛰️ 其他\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 其他\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"Docker 常用命令参考手册\\r\\n\\r\\n 镜像相关命令\\r\\n\\r\\n 搜索和拉取镜像\\r\\n```bash\\r\\n 搜索镜像\\r\\ndocker search nginx\\r\\n\\r\\n 拉取镜像\\r\\ndocker pull nginx\\r\\ndocker pull nginx:1.20   指定版本\\r\\n\\r\\n 查看本地镜像\\r\\ndocker images\\r\\ndocker image ls\\r\\n\\r\\n 删除镜像\\r\\ndocker rmi nginx\\r\\ndocker rmi image_id\\r\\n```\\r\\n 国内镜像源\\r\\n```bash\\r\\n\\r\\n\\r\\n 使用 Python 3.9 的 slim 版本作为基础镜像\\r\\nFROM docker.m.d\"},{\"url\":\"/dp/2.浏览器控制/ele_operation.html\",\"relativePath\":\"/dp/2.浏览器控制/ele_operation.html\",\"frontmatter\":{\"id\":\"ele_operation\",\"title\":\"🛰️ 元素交互\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 元素交互\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n本节介绍与浏览器元素的交互。浏览器元素对象为`ChromiumElement`。\\r\\n\\r\\n ✅️️ 点击元素\\r\\n\\r\\n 📌 `click()`和`click.left()`\\r\\n\\r\\n这两个方法作用是一样的，用于左键点击元素。可选择模拟点击或 js 点击。\\r\\n\\r\\n|    参数名称     |   类型    |   默认值   | 说明                                                                          \"},{\"url\":\"/dp/2.浏览器控制/get_ele_info.html\",\"relativePath\":\"/dp/2.浏览器控制/get_ele_info.html\",\"frontmatter\":{\"id\":\"get_ele_info\",\"title\":\"🛰️ 获取元素信息\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 获取元素信息\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"浏览器元素对应的对象是`ChromiumElement`和`ShadowRoot`，本节介绍如何获取元素信息。\\r\\n\\r\\n ✅️️ 内容和属性\\r\\n\\r\\n 📌 `tag`\\r\\n\\r\\n此属性返回元素的标签名。\\r\\n\\r\\n返回类型：`str`\\r\\n\\r\\n---\\r\\n\\r\\n 📌 `html`\\r\\n\\r\\n此属性返回元素的`outerHTML`文本。\\r\\n\\r\\n返回类型：`str`\\r\\n\\r\\n---\\r\\n\\r\\n 📌 `inner_html`\\r\\n\\r\\n此属性返回元素的`innerHTML`文本。\\r\\n\\r\\n返回类型：`str`\\r\\n\\r\\n---\\r\\n\\r\\n 📌 `text`\\r\\n\\r\\n此属性返回元素内所有文本组合成的字符串。  \\r\\n该字符串已格式化，即已\"},{\"url\":\"/dp/2.浏览器控制/get_page_info.html\",\"relativePath\":\"/dp/2.浏览器控制/get_page_info.html\",\"frontmatter\":{\"id\":\"get_page_info\",\"title\":\"🛰️ 获取网页信息\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 获取网页信息\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n成功访问网页后，可使用 Tab 对象属性和方法获取页面信息。\\r\\n\\r\\n ✅️️ 页面信息\\r\\n\\r\\n 📌 `html`\\r\\n\\r\\n此属性返回当前页面 html 文本。\\r\\n\\r\\n:::info 注意\\r\\n    html 文本不包含`&lt;iframe&gt;`元素内容。\\r\\n:::\\r\\n\\r\\n返回类型：`str`\\r\\n\\r\\n---\\r\\n\\r\\n 📌 `json`\\r\\n\\r\\n此属性把请求内容解析成 json。\\r\\n\\r\\n假如用浏览器访问会返回 `*.json` 文件的 url，浏览器会把 json 数据显示出来\"},{\"url\":\"/dp/2.浏览器控制/iframe.html\",\"relativePath\":\"/dp/2.浏览器控制/iframe.html\",\"frontmatter\":{\"id\":\"iframe\",\"title\":\"🛰️ iframe 操作\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ iframe 操作\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n`&lt;iframe&gt;`元素是一种特殊的元素，它既是元素，也是页面。\\r\\n\\r\\nDrissionPage 无需切入切出即可处理`&lt;iframe&gt;`元素。\\r\\n可实现跨级元素查找、元素内部单独跳转、同时操作`&lt;iframe&gt;`内外元素、多线程控制多个`&lt;iframe&gt;`等操作。\\r\\n\\r\\n ✅️ 获取`&lt;iframe&gt;`对象\\r\\n\\r\\n获取`&lt;iframe&gt;`对象的方法有两种，可用获取普通元素的方式获取，或者用`get_fra\"},{\"url\":\"/dp/2.浏览器控制/intro.html\",\"relativePath\":\"/dp/2.浏览器控制/intro.html\",\"frontmatter\":{\"id\":\"intro\",\"title\":\"🛰️ 概述\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 概述\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n ✅️️ 基本逻辑\\r\\n\\r\\n操作浏览器的基本逻辑如下：\\r\\n\\r\\n1. 创建浏览器对象，用于启动或接管浏览器\\r\\n2. 获取一个 Tab 对象\\r\\n3. 使用 Tab 对象访问网址\\r\\n4. 使用 Tab 对象获取标签页内需要的元素对象\\r\\n5. 使用元素对象进行交互\\r\\n\\r\\n除此以外，还能执行更为复杂的操作，如执行 js 代码、监听网络数据、下载文件等。这些在后面的章节再介绍。\\r\\n\\r\\n示例： 在百度搜索 “Drissionpage”，并打印结果。\\r\\n\\r\\n```python\\r\\n 导入\\r\\nfro\"},{\"url\":\"/dp/2.浏览器控制/listener.html\",\"relativePath\":\"/dp/2.浏览器控制/listener.html\",\"frontmatter\":{\"id\":\"listener\",\"title\":\"🛰️ 监听网络数据\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 监听网络数据\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n许多网页的数据来自接口，在网站使用过程中动态加载，如使用 JS 加载内容的翻页列表。\\r\\n\\r\\n这些数据通常以 json 形式发送，浏览器接收后，对其进行解析，再加载到 DOM 相应位置。\\r\\n\\r\\n做数据采集的时候，我们往往从 DOM 中去获取解析后数据的，可能存在数据不全、加载响应不及时、难以判断加载完成等问题。\\r\\n\\r\\n如果我们可以拿到浏览器收发的数据包，根据数据包状态判断下一步操作，甚至直接获取数据，岂不是爽爆了？\\r\\n\\r\\nDrissionPage 每个页面对象（包括 Tab 和 \"},{\"url\":\"/dp/2.浏览器控制/mode_change.html\",\"relativePath\":\"/dp/2.浏览器控制/mode_change.html\",\"frontmatter\":{\"id\":\"mode_change\",\"title\":\"🛰️ 模式切换\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 模式切换\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n`MixTab`和`WebPage`有两种模式，d 模式用于控制浏览器，s 模式使用`requests`收发数据包。\\r\\n\\r\\n两种模式访问页面和提取数据的逻辑是一致的，使用同一套 api。\\r\\n\\r\\n每个标签页对象创建时都处于 d 模式。\\r\\n\\r\\n使用`change_mode()`方法进行切换。模式切换的时候会同步登录信息。\\r\\n\\r\\ns 模式下仍然可以控制浏览器，但因为共用 api，`ele()`等两种模式共用的方法，查找对象是`requests`的结果，而非浏览器。\\r\\n\\r\\n因此 s 模\"},{\"url\":\"/dp/2.浏览器控制/page_operation.html\",\"relativePath\":\"/dp/2.浏览器控制/page_operation.html\",\"frontmatter\":{\"id\":\"page_operation\",\"title\":\"🛰️ 页面交互\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 页面交互\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n本节介绍浏览器页面交互功能。\\r\\n\\r\\n一个 Tab 对象控制一个浏览器的标签页，是页面控制的主要单位。\\r\\n\\r\\n ✅️️ 页面跳转\\r\\n\\r\\n 📌 `get()`\\r\\n\\r\\n详见 “访问网页” 章节。\\r\\n\\r\\n---\\r\\n\\r\\n 📌 `back()`\\r\\n\\r\\n此方法用于在浏览历史中后退若干步。\\r\\n\\r\\n|  参数名称   |  类型   | 默认值 | 说明   |\\r\\n|:-------:|:-----:|:---:|------|\\r\\n| `steps` | `int` | `1` | 后退步数\"},{\"url\":\"/dp/2.浏览器控制/pages.html\",\"relativePath\":\"/dp/2.浏览器控制/pages.html\",\"frontmatter\":{\"id\":\"pages\",\"title\":\"🛰️ Page 对象\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ Page 对象\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n`ChromiumPage`和`WebPage`是 4.1 之前用于连接和控制浏览器的对象。\\r\\n\\r\\n4.1 这些功能由`Chromium`实现，但`ChromiumPage`和`WebPage`仍能正常使用。\\r\\n\\r\\n对比`Chromium`，`ChromiumPage`和`WebPage`在连接浏览器时可以少写一行代码，但在多标签页操作的时候容易造成混乱。\\r\\n\\r\\n更详细的用法可以看旧版文档。\\r\\n\\r\\n ✅️️ `ChromiumPage`\\r\\n\\r\\n`ChromiumPage`把浏览\"},{\"url\":\"/dp/2.浏览器控制/screen.html\",\"relativePath\":\"/dp/2.浏览器控制/screen.html\",\"frontmatter\":{\"id\":\"screen\",\"title\":\"🛰️ 截图和录像\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 截图和录像\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n ✅️️ 页面截图\\r\\n\\r\\n使用页面对象的`get_screenshot()`方法对页面进行截图，可对整个网页、可见网页、指定范围截图。\\r\\n\\r\\n对可视范围外截图需要 90 以上版本浏览器支持。\\r\\n\\r\\n下面三个参数三选一，优先级：`as_bytes`&gt;`as_base64`&gt;`path`。\\r\\n\\r\\n| 参数名称           | 类型                | 默认值     | 说明                                     \"},{\"url\":\"/dp/2.浏览器控制/tabs.html\",\"relativePath\":\"/dp/2.浏览器控制/tabs.html\",\"frontmatter\":{\"id\":\"tabs\",\"title\":\"🛰️ 标签页管理\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 标签页管理\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n浏览器的标签页由 Tab 对象（`ChromiumTab`和`MixTab`）控制。\\r\\n\\r\\n与网页的交互都由标签页对象进行。\\r\\n\\r\\n默认情况下，一个标签页由一个 Tab 对象控制。\\r\\n\\r\\n多个 Tab 对象可以同时操作，不需要切换焦点，也不需要激活到前台。\\r\\n\\r\\n:::tip 提醒\\r\\n    当禁用单例模式后，一个标签页也可以被多个 Tab 对象同时控制。\\r\\n:::\\r\\n\\r\\n ✅️️ 获取标签页对象\\r\\n\\r\\n 📌 获取最后激活的标签页\\r\\n\\r\\n`Chromium`对象的`lates\"},{\"url\":\"/dp/2.浏览器控制/upload.html\",\"relativePath\":\"/dp/2.浏览器控制/upload.html\",\"frontmatter\":{\"id\":\"upload\",\"title\":\"🛰️ 上传文件\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 上传文件\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n上传文件有两种方式：\\r\\n\\r\\n- 拦截文件输入框，自动填入路径\\r\\n- 找到`&lt;input&gt;`元素，填入文件路径\\r\\n\\r\\n ✅️️ 自然的交互\\r\\n\\r\\n传统自动化工具的文件上传，需要开发者在 DOM 里找到文件上传控件，然后用元素对象的`input()`方法填入路径。\\r\\n\\r\\n有些上传控件是临时加载的，有些藏得很深，找起来费时费力。\\r\\n\\r\\n本库提供一种自然的文件上传方式，无需在 DOM 里找控件，只要自然地点击触发文件选择框，程序就能主动截获，并填写设定好的路径，开发更省事。\"},{\"url\":\"/dp/2.浏览器控制/visit.html\",\"relativePath\":\"/dp/2.浏览器控制/visit.html\",\"frontmatter\":{\"id\":\"visit\",\"title\":\"🛰️ 访问网页\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 访问网页\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n本节介绍 Tab 对象访问网页的相关内容。\\r\\n\\r\\n ✅️️ 连接方法\\r\\n\\r\\n 📌 `get()`\\r\\n\\r\\n该方法用于跳转到一个网址。当连接失败时，程序会进行重试。\\r\\n\\r\\n可指定本地文件路径。\\r\\n\\r\\n|       参数名称        | 类型               | 默认值     | 说明                                                    |\\r\\n|:-----------------:|:------------\"},{\"url\":\"/dp/2.浏览器控制/waiting.html\",\"relativePath\":\"/dp/2.浏览器控制/waiting.html\",\"frontmatter\":{\"id\":\"waiting\",\"title\":\"🛰️ 等待\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 等待\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n网络环境不稳定，页面 js 运行时间也难以确定，自动化过程中经常遇到需要等待的情况。\\r\\n\\r\\n如果总是用`sleep()`，显得不太优雅，等待多了浪费时间，等待不够会导致报错。\\r\\n\\r\\n因此，程序能够智能等待是非常重要的，DrissionPage 内置了一些等待方法，可以提高程序稳定性和效率。\\r\\n\\r\\n它们藏在页面对象和元素对象的`wait`属性里。\\r\\n\\r\\n等待方法均有`timeout`参数，可自行设得超时时间，也可以设置超时后返回`False`还是抛出异常。\\r\\n\\r\\n ✅️️ 浏览器\"},{\"url\":\"/dp/2.浏览器控制/元素定位/behavior.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/behavior.html\",\"frontmatter\":{\"id\":\"behavior\",\"title\":\"🔦 行为模式\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 行为模式\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"✅️ 等待元素\\r\\n\\r\\n由于网络、js 运行时间的不确定性，经常需要等待元素加载到 DOM 中才能使用。\\r\\n\\r\\n浏览器所有查找元素操作都自带等待，时间默认跟随元素所在页面`timeout`属性（默认 10 秒），也可以在每次查找时单独设置，单独设置的等待时间不会改变页面原来设置。\\r\\n\\r\\n 📌 内置等待\\r\\n\\r\\n```python\\r\\nfrom DrissionPage import Chromium\\r\\n\\r\\ntab = Chromium().latest_tab\\r\\n 设置查找元素超时时间为 5 秒\\r\\ntab.set.timeouts(5)\\r\\n\\r\\n 使用页面超时时间来查找元素（5 秒）\\r\\nele1 =\"},{\"url\":\"/dp/2.浏览器控制/元素定位/filter.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/filter.html\",\"frontmatter\":{\"id\":\"filter\",\"title\":\"🔦 在结果列表中筛选\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 在结果列表中筛选\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"本节介绍在元素列表中按需要进行筛选，获取指定元素。\\r\\n\\r\\n`eles()`、`nexts()`等能够获取多个元素的方法，返回的列表可进行进一步筛选，以获取指定的元素。\\r\\n\\r\\n:::info 说明\\r\\n    浏览器页面对象和`SessionPage`产生的元素列表均有此功能，前者筛选功能比后者多。\\r\\n:::\\r\\n\\r\\n示例1，筛选并返回元素列表：\\r\\n\\r\\n```python\\r\\nfrom DrissionPage import Chromium\\r\\n\\r\\ntab = Chromium().latest_tab\\r\\ntab.get('https://www.baidu.com')\\r\\neles = tab('s-\"},{\"url\":\"/dp/2.浏览器控制/元素定位/find_in_object.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/find_in_object.html\",\"frontmatter\":{\"id\":\"find_in_object\",\"title\":\"🔦 页面或元素内查找\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 页面或元素内查找\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"✅️️ 页面或元素内查找\\r\\n\\r\\n页面对象和元素对象都拥有`ele()`和`eles()`方法，用于获取其内部指定子元素。\\r\\n\\r\\n 📌 `ele()`\\r\\n\\r\\n用于查找其内部第一个符合条件的元素。\\r\\n\\r\\n`SessionPage`和`ChromiumPage`获取元素的方法是一致的，但前者返回的元素对象为`SessionElement`，后者是`ChromiumElement`。\\r\\n\\r\\n|         参数名称         |                        类型                        |  默认值   | 说明                   \"},{\"url\":\"/dp/2.浏览器控制/元素定位/intro.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/intro.html\",\"frontmatter\":{\"id\":\"intro\",\"title\":\"🔦 概述\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 概述\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n定位元素是自动化重中之重的技能。  \\r\\n虽然可在开发者工具直接复制绝对路径，但这样做有几个缺点：\\r\\n\\r\\n- 代码冗长，可读性低\\r\\n- 动态页面容易导致元素失效\\r\\n- 无法使用相对定位\\r\\n- 网页稍有改动或者出现临时元素就不能用，容错性低\\r\\n- 无法跨`&lt;iframe&gt;`查找元素\\r\\n\\r\\n因此作者极不建议使用右键复制的元素路径。\\r\\n\\r\\n本库提供一套简洁易用的语法，用于快速定位元素，并且内置等待功能、支持链式查找，减少了代码的复杂性。  \\r\\n同时也兼容 css selec\"},{\"url\":\"/dp/2.浏览器控制/元素定位/relative.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/relative.html\",\"frontmatter\":{\"id\":\"relative\",\"title\":\"🔦 相对定位\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 相对定位\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"相对定位的意思是以一个已获取的元素为基准，按需要使用不同方法获取指定的其它元素。\\r\\n\\r\\n相对定位有基于 DOM 的方式和基于视觉的方式两种\\r\\n\\r\\n ✅️️ 基于 DOM 相对定位\\r\\n\\r\\n以下方法可以以某元素为基准，在 DOM 中按照条件获取其直接子节点、同级节点、祖先元素、文档前后节点。  \\r\\n\\r\\n这里说的是 “节点”，不是 “元素”。因为相对定位可以获取除元素外的其它节点，包括文本、注释节点。\\r\\n\\r\\n:::warning 注意\\r\\n    如果元素在`&lt;iframe\\r\\n:::\\r\\n\\r\\n 📌 获取父级元素\\r\\n\\r\\n🔸 `parent()`\\r\\n\\r\\n此方法获取当前元素某一级父元素，可指定筛选条\"},{\"url\":\"/dp/2.浏览器控制/元素定位/sheet.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/sheet.html\",\"frontmatter\":{\"id\":\"sheet\",\"title\":\"🔦 语法速查表\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 语法速查表\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n ✅️ 定位语法\\r\\n\\r\\n 📌 基本用法\\r\\n\\r\\n|    写法     |       精确匹配        |    模糊匹配    |   匹配开头   |   匹配结尾   |                   说明                    |\\r\\n|:---------:|:-----------------:|:----------:|:--------:|:--------:|:------------------------------------\"},{\"url\":\"/dp/2.浏览器控制/元素定位/simplify.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/simplify.html\",\"frontmatter\":{\"id\":\"simplify\",\"title\":\"🔦 简化写法\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 简化写法\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n为进一步精简代码，定位语法都可以用简化形式来表示，使语句更短，链式操作时更清晰。\\r\\n\\r\\n ✅️ 定位符语法简化\\r\\n\\r\\n- 定位语法都有其简化形式\\r\\n- 页面和元素对象都实现了`__call__()`方法，所以`page.ele('')`可简化为`page('')`\\r\\n- 查找方法都支持链式操作\\r\\n\\r\\n示例：\\r\\n\\r\\n```python\\r\\n 查找tag为div的元素\\r\\nele = tab.ele('tag:div')   原写法\\r\\nele = tab('t:div')   简化写法\"},{\"url\":\"/dp/2.浏览器控制/元素定位/syntax.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/syntax.html\",\"frontmatter\":{\"id\":\"syntax\",\"title\":\"🔦 定位语法\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 定位语法\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"定位语法用于指明以哪种方式去查找指定元素，语法简洁明了，熟练使用可大幅提高程序可读性。\\r\\n\\r\\n所有涉及获取元素的操作都可以使用定位语法，如`ele()`、`actions.move_to()`、`wait.eles_loaded()`、`get_frame()`等等。\\r\\n\\r\\n定位语法用于简化代码，提高可读性，但并不覆盖所有复杂场景。很复杂的场景可直接用 xpath 查找。\\r\\n\\r\\n以下使用这个页面进行讲解。\\r\\n\\r\\n```html\\r\\n&lt;html\\r\\n&lt;body&gt;\\r\\n&lt;div id=\\\"one\\\"&gt;\\r\\n    &lt;p class=\\\"p_cls\\\" id=\\\"row1\\\" dat\"},{\"url\":\"/dp/3.下载/DownloadKit.html\",\"relativePath\":\"/dp/3.下载/DownloadKit.html\",\"frontmatter\":{\"id\":\"DownloadKit\",\"title\":\"⤵️ download方法\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"⤵️ download方法\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\nDrissionPage 每种页面对象都内置一个下载工具，提供任务管理、多线程并发、大文件分块、自动重连、文件名冲突处理等功能。\\r\\n\\r\\n该工具现已独立打包成一个库，名为 DownloadKit，详细介绍见：DownloadKit。\\r\\n\\r\\n这里只介绍其主要功能，具体使用和设置方法请移步该文档。\\r\\n\\r\\n ✅️️ 功能简介\\r\\n\\r\\n 📌 支持该工具的对象\\r\\n\\r\\n以下对象均支持\\r\\n\\r\\n- `SessionPage`\\r\\n- `ChromiumTab`\\r\\n- `MixTab`\\r\\n- `Ch\"},{\"url\":\"/dp/3.下载/browser.html\",\"relativePath\":\"/dp/3.下载/browser.html\",\"frontmatter\":{\"id\":\"browser\",\"title\":\"⤵️ 浏览器下载\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"⤵️ 浏览器下载\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n本节介绍对浏览器下载任务进行设置的功能。\\r\\n\\r\\n ✅️ 概述\\r\\n\\r\\n 📌 功能\\r\\n\\r\\nDrissionPage 提供以下功能，用于对浏览器下载任务进行控制：\\r\\n\\r\\n- 每个 tab 对象可独立设置文件保存路径\\r\\n- 下载前可指定文件名称，实现文件重命名\\r\\n- 可设置存在同名文件时的处理方式\\r\\n- 可获取任务下载进度\\r\\n- 可等待下载任务结束\\r\\n- 可取消任务\\r\\n- 可拦截下载任务并获取其信息\\r\\n\\r\\n---\\r\\n\\r\\n ⚠️ 注意事项\\r\\n\\r\\n 📌 记得等待任务结束\\r\\n\\r\\n因技术原\"},{\"url\":\"/dp/3.下载/intro.html\",\"relativePath\":\"/dp/3.下载/intro.html\",\"frontmatter\":{\"id\":\"intro\",\"title\":\"⤵️ 概述\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"⤵️ 概述\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\nDrissionPage 提供了强大的文件下载管理功能。\\r\\n\\r\\n能够主动发起下载任务，也能够对浏览器触发的下载任务进行管理。\\r\\n\\r\\n ✅️️ `download()`方法\\r\\n\\r\\n该方法可以主动发起下载任务，提供任务管理、多线程、大文件分块、自动重连、文件名冲突处理等功能。\\r\\n\\r\\n页面对象、`&lt;iframe&gt;`元素对象均支持此方法。\\r\\n\\r\\n此方法是封装 requests 实现的，下载时会自动同步 cookies。\\r\\n\\r\\n示例：\\r\\n\\r\\n```python\\r\\nfrom D\"},{\"url\":\"/markdown-examples.html\",\"relativePath\":\"/markdown-examples.html\",\"frontmatter\":{},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"Markdown Extension Examples\",\"date\":\"2025-09-25 10:07:04\",\"capture\":\"This page demonstrates some of the built-in markdown extensions provided by VitePress.\\n Syntax Highlighting\\nVitePress provides Syntax Highlighting powered by Shiki, with additional features like line-highlighting:\\nInput\\n````md\\n```js{4}\\nexport default {\\n  data () {\\n    return {\\n      msg: 'Highlighte\"},{\"url\":\"/readme.html\",\"relativePath\":\"/readme.html\",\"frontmatter\":{},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"html\",\"date\":\"2025-09-25 12:42:06\",\"capture\":\"\"}],\"sortPostsByDateAndSticky\":[{\"url\":\"/readme.html\",\"relativePath\":\"/readme.html\",\"frontmatter\":{},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"html\",\"date\":\"2025-09-25 12:42:06\",\"capture\":\"\"},{\"url\":\"/dp/1.🌷准备/1.intro.html\",\"relativePath\":\"/dp/1.🌷准备/1.intro.html\",\"frontmatter\":{\"id\":\"intro\",\"permalink\":\"/dp/prepare/intro\",\"title\":\" 基本概念\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\" 基本概念\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"⤵️DrissionPage 基本概念解析\\r\\n 一、网页自动化概述\\r\\n网页自动化主要存在两种常见形式，二者各有优劣，DrissionPage 对其进行了整合优化：\\r\\n\\r\\n|自动化形式|优势|劣势|典型工具/实现|\\r\\n| ---- | ---- | ---- | ---- |\\r\\n|直接向服务器发送数据包|轻量级、速度快，便于多线程与分布式部署|当数据包构成复杂或含加密技术时，开发难度大幅增加|requests 库|\\r\\n|控制浏览器与网页交互|能处理复杂页面交互（如点击、填写表单），无需深入解构数据包|运行速度受浏览器制约，较慢且占用内存多|传统 selenium|\\r\\n\\r\\nDrissionPage\"},{\"url\":\"/dp/1.🌷准备/2.install.html\",\"relativePath\":\"/dp/1.🌷准备/2.install.html\",\"frontmatter\":{\"id\":\"install\",\"permalink\":\"/dp/prepare/install\",\"title\":\"安装指南\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"安装指南\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"DrissionPage 安装指南\\r\\n本文档基于网页 http://drissionpage.cn/get_start/installation 内容整理，详细介绍 DrissionPage 的运行环境要求、安装步骤及版本升级方法，帮助用户快速完成工具部署。\\r\\n\\r\\n\\r\\n 一、运行环境要求\\r\\n在安装 DrissionPage 前，请确保本地环境满足以下条件，避免因环境不兼容导致工具无法正常使用：\\r\\n\\r\\n| 环境类别 | 具体要求 | 补充说明 |\\r\\n|----------|----------|----------|\\r\\n| 操作系统 | Windows、Linux、Mac | 支持主流桌面操作系\"},{\"url\":\"/dp/2.浏览器控制/actions.html\",\"relativePath\":\"/dp/2.浏览器控制/actions.html\",\"frontmatter\":{\"id\":\"actions\",\"title\":\"🛰️ 动作链\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 动作链\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"动作链可以在浏览器上完成一系列交互行为，如鼠标移动、鼠标点击、键盘输入等。\\r\\n\\r\\n浏览器页面对象都支持使用动作链。\\r\\n\\r\\n可以链式操作，也可以分开执行，每个动作执行即生效，无需`perform()`。\\r\\n\\r\\n这些操作皆为模拟，真正的鼠标不会移动，因此可以多个标签页同时操作。\\r\\n\\r\\n ✅️ 使用方法\\r\\n\\r\\n可以用上述对象内置的`actions`属性调用动作链，也可以主动创建一个动作链对象，将页面对象传入使用。\\r\\n\\r\\n这两种方式唯一区别是，前者会等待页面加载完毕再执行，后者不会。\\r\\n\\r\\n 📌 使用内置`actions`属性\\r\\n\\r\\n:::info 说明\\r\\n    这种方式会等到页面框架文档（不包括\"},{\"url\":\"/dp/2.浏览器控制/browser_object.html\",\"relativePath\":\"/dp/2.浏览器控制/browser_object.html\",\"frontmatter\":{\"id\":\"browser_object\",\"title\":\"🛰️ 浏览器对象\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 浏览器对象\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"我们已经了解如何创建浏览器对象，本节介绍浏览器对象的功能。\\r\\n\\r\\n:::note 说明\\r\\n    文中的 “Tab 对象” 是`ChromiumTab`和`MixTab`的统称。\\r\\n:::\\r\\n\\r\\n ✅️️ 获取标签页对象或信息\\r\\n\\r\\n 📌 `get_tab()`\\r\\n\\r\\n此方法用于获取一个标签页对象或它的 id。\\r\\n\\r\\n`id_or_num`不为`None`时，获取`id_or_num`指定的标签页。后面几个参数无效。\\r\\n\\r\\n`id_or_num`为`None`时，根据后面几个参数指定的条件查找标签页（与关系）。\\r\\n\\r\\n|    参数名称    |             类型        \"},{\"url\":\"/dp/2.浏览器控制/browser_options.html\",\"relativePath\":\"/dp/2.浏览器控制/browser_options.html\",\"frontmatter\":{\"id\":\"browser_options\",\"title\":\"🛰️ 浏览器启动设置\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 浏览器启动设置\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"浏览器的启动配置非常繁杂，本库使用`ChromiumOptions`类管理启动配置，并且内置了常用配置的设置接口。\\r\\n\\r\\n:::warning 注意\\r\\n    该对象只能用于浏览器的启动，浏览器启动后，再修改该配置没有任何效果。接管已打开的浏览器时，启动配置也是无效的。\\r\\n:::\\r\\n\\r\\n ✅️️ 创建对象\\r\\n\\r\\n 📌 导入\\r\\n\\r\\n```python\\r\\nfrom DrissionPage import ChromiumOptions\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n 📌 初始化参数\\r\\n\\r\\n`ChromiumOptions`对象用于管理浏览器初始化配置。可从配置文件中读取配置来进行初始化。\\r\\n\\r\"},{\"url\":\"/dp/2.浏览器控制/connect_browser.html\",\"relativePath\":\"/dp/2.浏览器控制/connect_browser.html\",\"frontmatter\":{\"id\":\"connect_browser\",\"title\":\"🛰️ 连接浏览器\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 连接浏览器\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"`Chromium`对象用于连接和管理浏览器。标签页的开关和获取、整体运行参数配置、浏览器信息获取等都由它进行。\\r\\n\\r\\n根据不同的配置，可以接管已打开的浏览器，也可以启动新的浏览器。\\r\\n\\r\\n每个浏览器只能有一个`Chromium`对象（同一进程中）。对同一个浏览器重复使用`Chromium()`获取的都是同一个对象。\\r\\n\\r\\n:::tip Tips\\r\\n    程序结束时，被打开的浏览器不会主动关闭（VSCode 启动的除外），以便下次运行程序时使用。\\r\\n    新手在使用无头模式时需注意，程序关闭后其实浏览器进程还在，只是看不见。\\r\\n:::\\r\\n\\r\\n ✅️ `Chromium`初始化参数\\r\\n\\r\\n|\"},{\"url\":\"/dp/2.浏览器控制/console.html\",\"relativePath\":\"/dp/2.浏览器控制/console.html\",\"frontmatter\":{\"id\":\"console\",\"title\":\"🛰️ 获取控制台信息\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 获取控制台信息\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n获取控制台信息的逻辑和监听网络数据差不多，是通过监听控制台数据实现的。\\r\\n\\r\\n:::warning 注意\\r\\n    不是所有显示在控制台的信息都能获取，需要用`console.log()`等方法输出到控制台的才能获取。\\r\\n:::\\r\\n\\r\\n ✅️ 示例\\r\\n\\r\\n```python\\r\\nfrom DrissionPage import Chromium\\r\\n\\r\\ntab = Chromium().latest_tab\\r\\ntab.console.start()\\r\\ntab.run_js('con\"},{\"url\":\"/dp/2.浏览器控制/docker.html\",\"relativePath\":\"/dp/2.浏览器控制/docker.html\",\"frontmatter\":{\"id\":\"docker\",\"title\":\"🛰️ 其他\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 其他\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"Docker 常用命令参考手册\\r\\n\\r\\n 镜像相关命令\\r\\n\\r\\n 搜索和拉取镜像\\r\\n```bash\\r\\n 搜索镜像\\r\\ndocker search nginx\\r\\n\\r\\n 拉取镜像\\r\\ndocker pull nginx\\r\\ndocker pull nginx:1.20   指定版本\\r\\n\\r\\n 查看本地镜像\\r\\ndocker images\\r\\ndocker image ls\\r\\n\\r\\n 删除镜像\\r\\ndocker rmi nginx\\r\\ndocker rmi image_id\\r\\n```\\r\\n 国内镜像源\\r\\n```bash\\r\\n\\r\\n\\r\\n 使用 Python 3.9 的 slim 版本作为基础镜像\\r\\nFROM docker.m.d\"},{\"url\":\"/dp/2.浏览器控制/ele_operation.html\",\"relativePath\":\"/dp/2.浏览器控制/ele_operation.html\",\"frontmatter\":{\"id\":\"ele_operation\",\"title\":\"🛰️ 元素交互\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 元素交互\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n本节介绍与浏览器元素的交互。浏览器元素对象为`ChromiumElement`。\\r\\n\\r\\n ✅️️ 点击元素\\r\\n\\r\\n 📌 `click()`和`click.left()`\\r\\n\\r\\n这两个方法作用是一样的，用于左键点击元素。可选择模拟点击或 js 点击。\\r\\n\\r\\n|    参数名称     |   类型    |   默认值   | 说明                                                                          \"},{\"url\":\"/dp/2.浏览器控制/get_ele_info.html\",\"relativePath\":\"/dp/2.浏览器控制/get_ele_info.html\",\"frontmatter\":{\"id\":\"get_ele_info\",\"title\":\"🛰️ 获取元素信息\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 获取元素信息\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"浏览器元素对应的对象是`ChromiumElement`和`ShadowRoot`，本节介绍如何获取元素信息。\\r\\n\\r\\n ✅️️ 内容和属性\\r\\n\\r\\n 📌 `tag`\\r\\n\\r\\n此属性返回元素的标签名。\\r\\n\\r\\n返回类型：`str`\\r\\n\\r\\n---\\r\\n\\r\\n 📌 `html`\\r\\n\\r\\n此属性返回元素的`outerHTML`文本。\\r\\n\\r\\n返回类型：`str`\\r\\n\\r\\n---\\r\\n\\r\\n 📌 `inner_html`\\r\\n\\r\\n此属性返回元素的`innerHTML`文本。\\r\\n\\r\\n返回类型：`str`\\r\\n\\r\\n---\\r\\n\\r\\n 📌 `text`\\r\\n\\r\\n此属性返回元素内所有文本组合成的字符串。  \\r\\n该字符串已格式化，即已\"},{\"url\":\"/dp/2.浏览器控制/get_page_info.html\",\"relativePath\":\"/dp/2.浏览器控制/get_page_info.html\",\"frontmatter\":{\"id\":\"get_page_info\",\"title\":\"🛰️ 获取网页信息\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 获取网页信息\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n成功访问网页后，可使用 Tab 对象属性和方法获取页面信息。\\r\\n\\r\\n ✅️️ 页面信息\\r\\n\\r\\n 📌 `html`\\r\\n\\r\\n此属性返回当前页面 html 文本。\\r\\n\\r\\n:::info 注意\\r\\n    html 文本不包含`&lt;iframe&gt;`元素内容。\\r\\n:::\\r\\n\\r\\n返回类型：`str`\\r\\n\\r\\n---\\r\\n\\r\\n 📌 `json`\\r\\n\\r\\n此属性把请求内容解析成 json。\\r\\n\\r\\n假如用浏览器访问会返回 `*.json` 文件的 url，浏览器会把 json 数据显示出来\"},{\"url\":\"/dp/2.浏览器控制/iframe.html\",\"relativePath\":\"/dp/2.浏览器控制/iframe.html\",\"frontmatter\":{\"id\":\"iframe\",\"title\":\"🛰️ iframe 操作\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ iframe 操作\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n`&lt;iframe&gt;`元素是一种特殊的元素，它既是元素，也是页面。\\r\\n\\r\\nDrissionPage 无需切入切出即可处理`&lt;iframe&gt;`元素。\\r\\n可实现跨级元素查找、元素内部单独跳转、同时操作`&lt;iframe&gt;`内外元素、多线程控制多个`&lt;iframe&gt;`等操作。\\r\\n\\r\\n ✅️ 获取`&lt;iframe&gt;`对象\\r\\n\\r\\n获取`&lt;iframe&gt;`对象的方法有两种，可用获取普通元素的方式获取，或者用`get_fra\"},{\"url\":\"/dp/2.浏览器控制/intro.html\",\"relativePath\":\"/dp/2.浏览器控制/intro.html\",\"frontmatter\":{\"id\":\"intro\",\"title\":\"🛰️ 概述\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 概述\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n ✅️️ 基本逻辑\\r\\n\\r\\n操作浏览器的基本逻辑如下：\\r\\n\\r\\n1. 创建浏览器对象，用于启动或接管浏览器\\r\\n2. 获取一个 Tab 对象\\r\\n3. 使用 Tab 对象访问网址\\r\\n4. 使用 Tab 对象获取标签页内需要的元素对象\\r\\n5. 使用元素对象进行交互\\r\\n\\r\\n除此以外，还能执行更为复杂的操作，如执行 js 代码、监听网络数据、下载文件等。这些在后面的章节再介绍。\\r\\n\\r\\n示例： 在百度搜索 “Drissionpage”，并打印结果。\\r\\n\\r\\n```python\\r\\n 导入\\r\\nfro\"},{\"url\":\"/dp/2.浏览器控制/listener.html\",\"relativePath\":\"/dp/2.浏览器控制/listener.html\",\"frontmatter\":{\"id\":\"listener\",\"title\":\"🛰️ 监听网络数据\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 监听网络数据\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n许多网页的数据来自接口，在网站使用过程中动态加载，如使用 JS 加载内容的翻页列表。\\r\\n\\r\\n这些数据通常以 json 形式发送，浏览器接收后，对其进行解析，再加载到 DOM 相应位置。\\r\\n\\r\\n做数据采集的时候，我们往往从 DOM 中去获取解析后数据的，可能存在数据不全、加载响应不及时、难以判断加载完成等问题。\\r\\n\\r\\n如果我们可以拿到浏览器收发的数据包，根据数据包状态判断下一步操作，甚至直接获取数据，岂不是爽爆了？\\r\\n\\r\\nDrissionPage 每个页面对象（包括 Tab 和 \"},{\"url\":\"/dp/2.浏览器控制/mode_change.html\",\"relativePath\":\"/dp/2.浏览器控制/mode_change.html\",\"frontmatter\":{\"id\":\"mode_change\",\"title\":\"🛰️ 模式切换\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 模式切换\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n`MixTab`和`WebPage`有两种模式，d 模式用于控制浏览器，s 模式使用`requests`收发数据包。\\r\\n\\r\\n两种模式访问页面和提取数据的逻辑是一致的，使用同一套 api。\\r\\n\\r\\n每个标签页对象创建时都处于 d 模式。\\r\\n\\r\\n使用`change_mode()`方法进行切换。模式切换的时候会同步登录信息。\\r\\n\\r\\ns 模式下仍然可以控制浏览器，但因为共用 api，`ele()`等两种模式共用的方法，查找对象是`requests`的结果，而非浏览器。\\r\\n\\r\\n因此 s 模\"},{\"url\":\"/dp/2.浏览器控制/page_operation.html\",\"relativePath\":\"/dp/2.浏览器控制/page_operation.html\",\"frontmatter\":{\"id\":\"page_operation\",\"title\":\"🛰️ 页面交互\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 页面交互\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n本节介绍浏览器页面交互功能。\\r\\n\\r\\n一个 Tab 对象控制一个浏览器的标签页，是页面控制的主要单位。\\r\\n\\r\\n ✅️️ 页面跳转\\r\\n\\r\\n 📌 `get()`\\r\\n\\r\\n详见 “访问网页” 章节。\\r\\n\\r\\n---\\r\\n\\r\\n 📌 `back()`\\r\\n\\r\\n此方法用于在浏览历史中后退若干步。\\r\\n\\r\\n|  参数名称   |  类型   | 默认值 | 说明   |\\r\\n|:-------:|:-----:|:---:|------|\\r\\n| `steps` | `int` | `1` | 后退步数\"},{\"url\":\"/dp/2.浏览器控制/pages.html\",\"relativePath\":\"/dp/2.浏览器控制/pages.html\",\"frontmatter\":{\"id\":\"pages\",\"title\":\"🛰️ Page 对象\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ Page 对象\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n`ChromiumPage`和`WebPage`是 4.1 之前用于连接和控制浏览器的对象。\\r\\n\\r\\n4.1 这些功能由`Chromium`实现，但`ChromiumPage`和`WebPage`仍能正常使用。\\r\\n\\r\\n对比`Chromium`，`ChromiumPage`和`WebPage`在连接浏览器时可以少写一行代码，但在多标签页操作的时候容易造成混乱。\\r\\n\\r\\n更详细的用法可以看旧版文档。\\r\\n\\r\\n ✅️️ `ChromiumPage`\\r\\n\\r\\n`ChromiumPage`把浏览\"},{\"url\":\"/dp/2.浏览器控制/screen.html\",\"relativePath\":\"/dp/2.浏览器控制/screen.html\",\"frontmatter\":{\"id\":\"screen\",\"title\":\"🛰️ 截图和录像\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 截图和录像\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n ✅️️ 页面截图\\r\\n\\r\\n使用页面对象的`get_screenshot()`方法对页面进行截图，可对整个网页、可见网页、指定范围截图。\\r\\n\\r\\n对可视范围外截图需要 90 以上版本浏览器支持。\\r\\n\\r\\n下面三个参数三选一，优先级：`as_bytes`&gt;`as_base64`&gt;`path`。\\r\\n\\r\\n| 参数名称           | 类型                | 默认值     | 说明                                     \"},{\"url\":\"/dp/2.浏览器控制/tabs.html\",\"relativePath\":\"/dp/2.浏览器控制/tabs.html\",\"frontmatter\":{\"id\":\"tabs\",\"title\":\"🛰️ 标签页管理\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 标签页管理\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n浏览器的标签页由 Tab 对象（`ChromiumTab`和`MixTab`）控制。\\r\\n\\r\\n与网页的交互都由标签页对象进行。\\r\\n\\r\\n默认情况下，一个标签页由一个 Tab 对象控制。\\r\\n\\r\\n多个 Tab 对象可以同时操作，不需要切换焦点，也不需要激活到前台。\\r\\n\\r\\n:::tip 提醒\\r\\n    当禁用单例模式后，一个标签页也可以被多个 Tab 对象同时控制。\\r\\n:::\\r\\n\\r\\n ✅️️ 获取标签页对象\\r\\n\\r\\n 📌 获取最后激活的标签页\\r\\n\\r\\n`Chromium`对象的`lates\"},{\"url\":\"/dp/2.浏览器控制/upload.html\",\"relativePath\":\"/dp/2.浏览器控制/upload.html\",\"frontmatter\":{\"id\":\"upload\",\"title\":\"🛰️ 上传文件\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 上传文件\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n上传文件有两种方式：\\r\\n\\r\\n- 拦截文件输入框，自动填入路径\\r\\n- 找到`&lt;input&gt;`元素，填入文件路径\\r\\n\\r\\n ✅️️ 自然的交互\\r\\n\\r\\n传统自动化工具的文件上传，需要开发者在 DOM 里找到文件上传控件，然后用元素对象的`input()`方法填入路径。\\r\\n\\r\\n有些上传控件是临时加载的，有些藏得很深，找起来费时费力。\\r\\n\\r\\n本库提供一种自然的文件上传方式，无需在 DOM 里找控件，只要自然地点击触发文件选择框，程序就能主动截获，并填写设定好的路径，开发更省事。\"},{\"url\":\"/dp/2.浏览器控制/visit.html\",\"relativePath\":\"/dp/2.浏览器控制/visit.html\",\"frontmatter\":{\"id\":\"visit\",\"title\":\"🛰️ 访问网页\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 访问网页\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n本节介绍 Tab 对象访问网页的相关内容。\\r\\n\\r\\n ✅️️ 连接方法\\r\\n\\r\\n 📌 `get()`\\r\\n\\r\\n该方法用于跳转到一个网址。当连接失败时，程序会进行重试。\\r\\n\\r\\n可指定本地文件路径。\\r\\n\\r\\n|       参数名称        | 类型               | 默认值     | 说明                                                    |\\r\\n|:-----------------:|:------------\"},{\"url\":\"/dp/2.浏览器控制/waiting.html\",\"relativePath\":\"/dp/2.浏览器控制/waiting.html\",\"frontmatter\":{\"id\":\"waiting\",\"title\":\"🛰️ 等待\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 等待\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n网络环境不稳定，页面 js 运行时间也难以确定，自动化过程中经常遇到需要等待的情况。\\r\\n\\r\\n如果总是用`sleep()`，显得不太优雅，等待多了浪费时间，等待不够会导致报错。\\r\\n\\r\\n因此，程序能够智能等待是非常重要的，DrissionPage 内置了一些等待方法，可以提高程序稳定性和效率。\\r\\n\\r\\n它们藏在页面对象和元素对象的`wait`属性里。\\r\\n\\r\\n等待方法均有`timeout`参数，可自行设得超时时间，也可以设置超时后返回`False`还是抛出异常。\\r\\n\\r\\n ✅️️ 浏览器\"},{\"url\":\"/dp/2.浏览器控制/元素定位/behavior.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/behavior.html\",\"frontmatter\":{\"id\":\"behavior\",\"title\":\"🔦 行为模式\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 行为模式\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"✅️ 等待元素\\r\\n\\r\\n由于网络、js 运行时间的不确定性，经常需要等待元素加载到 DOM 中才能使用。\\r\\n\\r\\n浏览器所有查找元素操作都自带等待，时间默认跟随元素所在页面`timeout`属性（默认 10 秒），也可以在每次查找时单独设置，单独设置的等待时间不会改变页面原来设置。\\r\\n\\r\\n 📌 内置等待\\r\\n\\r\\n```python\\r\\nfrom DrissionPage import Chromium\\r\\n\\r\\ntab = Chromium().latest_tab\\r\\n 设置查找元素超时时间为 5 秒\\r\\ntab.set.timeouts(5)\\r\\n\\r\\n 使用页面超时时间来查找元素（5 秒）\\r\\nele1 =\"},{\"url\":\"/dp/2.浏览器控制/元素定位/filter.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/filter.html\",\"frontmatter\":{\"id\":\"filter\",\"title\":\"🔦 在结果列表中筛选\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 在结果列表中筛选\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"本节介绍在元素列表中按需要进行筛选，获取指定元素。\\r\\n\\r\\n`eles()`、`nexts()`等能够获取多个元素的方法，返回的列表可进行进一步筛选，以获取指定的元素。\\r\\n\\r\\n:::info 说明\\r\\n    浏览器页面对象和`SessionPage`产生的元素列表均有此功能，前者筛选功能比后者多。\\r\\n:::\\r\\n\\r\\n示例1，筛选并返回元素列表：\\r\\n\\r\\n```python\\r\\nfrom DrissionPage import Chromium\\r\\n\\r\\ntab = Chromium().latest_tab\\r\\ntab.get('https://www.baidu.com')\\r\\neles = tab('s-\"},{\"url\":\"/dp/2.浏览器控制/元素定位/find_in_object.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/find_in_object.html\",\"frontmatter\":{\"id\":\"find_in_object\",\"title\":\"🔦 页面或元素内查找\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 页面或元素内查找\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"✅️️ 页面或元素内查找\\r\\n\\r\\n页面对象和元素对象都拥有`ele()`和`eles()`方法，用于获取其内部指定子元素。\\r\\n\\r\\n 📌 `ele()`\\r\\n\\r\\n用于查找其内部第一个符合条件的元素。\\r\\n\\r\\n`SessionPage`和`ChromiumPage`获取元素的方法是一致的，但前者返回的元素对象为`SessionElement`，后者是`ChromiumElement`。\\r\\n\\r\\n|         参数名称         |                        类型                        |  默认值   | 说明                   \"},{\"url\":\"/dp/2.浏览器控制/元素定位/intro.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/intro.html\",\"frontmatter\":{\"id\":\"intro\",\"title\":\"🔦 概述\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 概述\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n定位元素是自动化重中之重的技能。  \\r\\n虽然可在开发者工具直接复制绝对路径，但这样做有几个缺点：\\r\\n\\r\\n- 代码冗长，可读性低\\r\\n- 动态页面容易导致元素失效\\r\\n- 无法使用相对定位\\r\\n- 网页稍有改动或者出现临时元素就不能用，容错性低\\r\\n- 无法跨`&lt;iframe&gt;`查找元素\\r\\n\\r\\n因此作者极不建议使用右键复制的元素路径。\\r\\n\\r\\n本库提供一套简洁易用的语法，用于快速定位元素，并且内置等待功能、支持链式查找，减少了代码的复杂性。  \\r\\n同时也兼容 css selec\"},{\"url\":\"/dp/2.浏览器控制/元素定位/relative.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/relative.html\",\"frontmatter\":{\"id\":\"relative\",\"title\":\"🔦 相对定位\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 相对定位\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"相对定位的意思是以一个已获取的元素为基准，按需要使用不同方法获取指定的其它元素。\\r\\n\\r\\n相对定位有基于 DOM 的方式和基于视觉的方式两种\\r\\n\\r\\n ✅️️ 基于 DOM 相对定位\\r\\n\\r\\n以下方法可以以某元素为基准，在 DOM 中按照条件获取其直接子节点、同级节点、祖先元素、文档前后节点。  \\r\\n\\r\\n这里说的是 “节点”，不是 “元素”。因为相对定位可以获取除元素外的其它节点，包括文本、注释节点。\\r\\n\\r\\n:::warning 注意\\r\\n    如果元素在`&lt;iframe\\r\\n:::\\r\\n\\r\\n 📌 获取父级元素\\r\\n\\r\\n🔸 `parent()`\\r\\n\\r\\n此方法获取当前元素某一级父元素，可指定筛选条\"},{\"url\":\"/dp/2.浏览器控制/元素定位/sheet.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/sheet.html\",\"frontmatter\":{\"id\":\"sheet\",\"title\":\"🔦 语法速查表\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 语法速查表\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n ✅️ 定位语法\\r\\n\\r\\n 📌 基本用法\\r\\n\\r\\n|    写法     |       精确匹配        |    模糊匹配    |   匹配开头   |   匹配结尾   |                   说明                    |\\r\\n|:---------:|:-----------------:|:----------:|:--------:|:--------:|:------------------------------------\"},{\"url\":\"/dp/2.浏览器控制/元素定位/simplify.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/simplify.html\",\"frontmatter\":{\"id\":\"simplify\",\"title\":\"🔦 简化写法\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 简化写法\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n为进一步精简代码，定位语法都可以用简化形式来表示，使语句更短，链式操作时更清晰。\\r\\n\\r\\n ✅️ 定位符语法简化\\r\\n\\r\\n- 定位语法都有其简化形式\\r\\n- 页面和元素对象都实现了`__call__()`方法，所以`page.ele('')`可简化为`page('')`\\r\\n- 查找方法都支持链式操作\\r\\n\\r\\n示例：\\r\\n\\r\\n```python\\r\\n 查找tag为div的元素\\r\\nele = tab.ele('tag:div')   原写法\\r\\nele = tab('t:div')   简化写法\"},{\"url\":\"/dp/2.浏览器控制/元素定位/syntax.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/syntax.html\",\"frontmatter\":{\"id\":\"syntax\",\"title\":\"🔦 定位语法\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 定位语法\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"定位语法用于指明以哪种方式去查找指定元素，语法简洁明了，熟练使用可大幅提高程序可读性。\\r\\n\\r\\n所有涉及获取元素的操作都可以使用定位语法，如`ele()`、`actions.move_to()`、`wait.eles_loaded()`、`get_frame()`等等。\\r\\n\\r\\n定位语法用于简化代码，提高可读性，但并不覆盖所有复杂场景。很复杂的场景可直接用 xpath 查找。\\r\\n\\r\\n以下使用这个页面进行讲解。\\r\\n\\r\\n```html\\r\\n&lt;html\\r\\n&lt;body&gt;\\r\\n&lt;div id=\\\"one\\\"&gt;\\r\\n    &lt;p class=\\\"p_cls\\\" id=\\\"row1\\\" dat\"},{\"url\":\"/dp/3.下载/DownloadKit.html\",\"relativePath\":\"/dp/3.下载/DownloadKit.html\",\"frontmatter\":{\"id\":\"DownloadKit\",\"title\":\"⤵️ download方法\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"⤵️ download方法\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\nDrissionPage 每种页面对象都内置一个下载工具，提供任务管理、多线程并发、大文件分块、自动重连、文件名冲突处理等功能。\\r\\n\\r\\n该工具现已独立打包成一个库，名为 DownloadKit，详细介绍见：DownloadKit。\\r\\n\\r\\n这里只介绍其主要功能，具体使用和设置方法请移步该文档。\\r\\n\\r\\n ✅️️ 功能简介\\r\\n\\r\\n 📌 支持该工具的对象\\r\\n\\r\\n以下对象均支持\\r\\n\\r\\n- `SessionPage`\\r\\n- `ChromiumTab`\\r\\n- `MixTab`\\r\\n- `Ch\"},{\"url\":\"/dp/3.下载/browser.html\",\"relativePath\":\"/dp/3.下载/browser.html\",\"frontmatter\":{\"id\":\"browser\",\"title\":\"⤵️ 浏览器下载\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"⤵️ 浏览器下载\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n本节介绍对浏览器下载任务进行设置的功能。\\r\\n\\r\\n ✅️ 概述\\r\\n\\r\\n 📌 功能\\r\\n\\r\\nDrissionPage 提供以下功能，用于对浏览器下载任务进行控制：\\r\\n\\r\\n- 每个 tab 对象可独立设置文件保存路径\\r\\n- 下载前可指定文件名称，实现文件重命名\\r\\n- 可设置存在同名文件时的处理方式\\r\\n- 可获取任务下载进度\\r\\n- 可等待下载任务结束\\r\\n- 可取消任务\\r\\n- 可拦截下载任务并获取其信息\\r\\n\\r\\n---\\r\\n\\r\\n ⚠️ 注意事项\\r\\n\\r\\n 📌 记得等待任务结束\\r\\n\\r\\n因技术原\"},{\"url\":\"/dp/3.下载/intro.html\",\"relativePath\":\"/dp/3.下载/intro.html\",\"frontmatter\":{\"id\":\"intro\",\"title\":\"⤵️ 概述\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"⤵️ 概述\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\nDrissionPage 提供了强大的文件下载管理功能。\\r\\n\\r\\n能够主动发起下载任务，也能够对浏览器触发的下载任务进行管理。\\r\\n\\r\\n ✅️️ `download()`方法\\r\\n\\r\\n该方法可以主动发起下载任务，提供任务管理、多线程、大文件分块、自动重连、文件名冲突处理等功能。\\r\\n\\r\\n页面对象、`&lt;iframe&gt;`元素对象均支持此方法。\\r\\n\\r\\n此方法是封装 requests 实现的，下载时会自动同步 cookies。\\r\\n\\r\\n示例：\\r\\n\\r\\n```python\\r\\nfrom D\"},{\"url\":\"/api-examples.html\",\"relativePath\":\"/api-examples.html\",\"frontmatter\":{\"outline\":\"deep\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"Runtime API Examples\",\"date\":\"2025-09-25 10:07:04\",\"capture\":\"Runtime API Examples\\nThis page demonstrates usage of some of the runtime APIs provided by VitePress.\\nThe main `useData()` API can be used to access site, theme, and page data for the current page. It works in both `.md` and `.vue` files:\\n```md\\n&lt;script setup\\nimport { useData } from 'vitepress'\\ncon\"},{\"url\":\"/markdown-examples.html\",\"relativePath\":\"/markdown-examples.html\",\"frontmatter\":{},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"Markdown Extension Examples\",\"date\":\"2025-09-25 10:07:04\",\"capture\":\"This page demonstrates some of the built-in markdown extensions provided by VitePress.\\n Syntax Highlighting\\nVitePress provides Syntax Highlighting powered by Shiki, with additional features like line-highlighting:\\nInput\\n````md\\n```js{4}\\nexport default {\\n  data () {\\n    return {\\n      msg: 'Highlighte\"}],\"sortPostsByDate\":[{\"url\":\"/readme.html\",\"relativePath\":\"/readme.html\",\"frontmatter\":{},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"html\",\"date\":\"2025-09-25 12:42:06\",\"capture\":\"\"},{\"url\":\"/dp/1.🌷准备/1.intro.html\",\"relativePath\":\"/dp/1.🌷准备/1.intro.html\",\"frontmatter\":{\"id\":\"intro\",\"permalink\":\"/dp/prepare/intro\",\"title\":\" 基本概念\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\" 基本概念\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"⤵️DrissionPage 基本概念解析\\r\\n 一、网页自动化概述\\r\\n网页自动化主要存在两种常见形式，二者各有优劣，DrissionPage 对其进行了整合优化：\\r\\n\\r\\n|自动化形式|优势|劣势|典型工具/实现|\\r\\n| ---- | ---- | ---- | ---- |\\r\\n|直接向服务器发送数据包|轻量级、速度快，便于多线程与分布式部署|当数据包构成复杂或含加密技术时，开发难度大幅增加|requests 库|\\r\\n|控制浏览器与网页交互|能处理复杂页面交互（如点击、填写表单），无需深入解构数据包|运行速度受浏览器制约，较慢且占用内存多|传统 selenium|\\r\\n\\r\\nDrissionPage\"},{\"url\":\"/dp/1.🌷准备/2.install.html\",\"relativePath\":\"/dp/1.🌷准备/2.install.html\",\"frontmatter\":{\"id\":\"install\",\"permalink\":\"/dp/prepare/install\",\"title\":\"安装指南\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"安装指南\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"DrissionPage 安装指南\\r\\n本文档基于网页 http://drissionpage.cn/get_start/installation 内容整理，详细介绍 DrissionPage 的运行环境要求、安装步骤及版本升级方法，帮助用户快速完成工具部署。\\r\\n\\r\\n\\r\\n 一、运行环境要求\\r\\n在安装 DrissionPage 前，请确保本地环境满足以下条件，避免因环境不兼容导致工具无法正常使用：\\r\\n\\r\\n| 环境类别 | 具体要求 | 补充说明 |\\r\\n|----------|----------|----------|\\r\\n| 操作系统 | Windows、Linux、Mac | 支持主流桌面操作系\"},{\"url\":\"/dp/2.浏览器控制/actions.html\",\"relativePath\":\"/dp/2.浏览器控制/actions.html\",\"frontmatter\":{\"id\":\"actions\",\"title\":\"🛰️ 动作链\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 动作链\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"动作链可以在浏览器上完成一系列交互行为，如鼠标移动、鼠标点击、键盘输入等。\\r\\n\\r\\n浏览器页面对象都支持使用动作链。\\r\\n\\r\\n可以链式操作，也可以分开执行，每个动作执行即生效，无需`perform()`。\\r\\n\\r\\n这些操作皆为模拟，真正的鼠标不会移动，因此可以多个标签页同时操作。\\r\\n\\r\\n ✅️ 使用方法\\r\\n\\r\\n可以用上述对象内置的`actions`属性调用动作链，也可以主动创建一个动作链对象，将页面对象传入使用。\\r\\n\\r\\n这两种方式唯一区别是，前者会等待页面加载完毕再执行，后者不会。\\r\\n\\r\\n 📌 使用内置`actions`属性\\r\\n\\r\\n:::info 说明\\r\\n    这种方式会等到页面框架文档（不包括\"},{\"url\":\"/dp/2.浏览器控制/browser_object.html\",\"relativePath\":\"/dp/2.浏览器控制/browser_object.html\",\"frontmatter\":{\"id\":\"browser_object\",\"title\":\"🛰️ 浏览器对象\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 浏览器对象\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"我们已经了解如何创建浏览器对象，本节介绍浏览器对象的功能。\\r\\n\\r\\n:::note 说明\\r\\n    文中的 “Tab 对象” 是`ChromiumTab`和`MixTab`的统称。\\r\\n:::\\r\\n\\r\\n ✅️️ 获取标签页对象或信息\\r\\n\\r\\n 📌 `get_tab()`\\r\\n\\r\\n此方法用于获取一个标签页对象或它的 id。\\r\\n\\r\\n`id_or_num`不为`None`时，获取`id_or_num`指定的标签页。后面几个参数无效。\\r\\n\\r\\n`id_or_num`为`None`时，根据后面几个参数指定的条件查找标签页（与关系）。\\r\\n\\r\\n|    参数名称    |             类型        \"},{\"url\":\"/dp/2.浏览器控制/browser_options.html\",\"relativePath\":\"/dp/2.浏览器控制/browser_options.html\",\"frontmatter\":{\"id\":\"browser_options\",\"title\":\"🛰️ 浏览器启动设置\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 浏览器启动设置\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"浏览器的启动配置非常繁杂，本库使用`ChromiumOptions`类管理启动配置，并且内置了常用配置的设置接口。\\r\\n\\r\\n:::warning 注意\\r\\n    该对象只能用于浏览器的启动，浏览器启动后，再修改该配置没有任何效果。接管已打开的浏览器时，启动配置也是无效的。\\r\\n:::\\r\\n\\r\\n ✅️️ 创建对象\\r\\n\\r\\n 📌 导入\\r\\n\\r\\n```python\\r\\nfrom DrissionPage import ChromiumOptions\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n 📌 初始化参数\\r\\n\\r\\n`ChromiumOptions`对象用于管理浏览器初始化配置。可从配置文件中读取配置来进行初始化。\\r\\n\\r\"},{\"url\":\"/dp/2.浏览器控制/connect_browser.html\",\"relativePath\":\"/dp/2.浏览器控制/connect_browser.html\",\"frontmatter\":{\"id\":\"connect_browser\",\"title\":\"🛰️ 连接浏览器\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 连接浏览器\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"`Chromium`对象用于连接和管理浏览器。标签页的开关和获取、整体运行参数配置、浏览器信息获取等都由它进行。\\r\\n\\r\\n根据不同的配置，可以接管已打开的浏览器，也可以启动新的浏览器。\\r\\n\\r\\n每个浏览器只能有一个`Chromium`对象（同一进程中）。对同一个浏览器重复使用`Chromium()`获取的都是同一个对象。\\r\\n\\r\\n:::tip Tips\\r\\n    程序结束时，被打开的浏览器不会主动关闭（VSCode 启动的除外），以便下次运行程序时使用。\\r\\n    新手在使用无头模式时需注意，程序关闭后其实浏览器进程还在，只是看不见。\\r\\n:::\\r\\n\\r\\n ✅️ `Chromium`初始化参数\\r\\n\\r\\n|\"},{\"url\":\"/dp/2.浏览器控制/console.html\",\"relativePath\":\"/dp/2.浏览器控制/console.html\",\"frontmatter\":{\"id\":\"console\",\"title\":\"🛰️ 获取控制台信息\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 获取控制台信息\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n获取控制台信息的逻辑和监听网络数据差不多，是通过监听控制台数据实现的。\\r\\n\\r\\n:::warning 注意\\r\\n    不是所有显示在控制台的信息都能获取，需要用`console.log()`等方法输出到控制台的才能获取。\\r\\n:::\\r\\n\\r\\n ✅️ 示例\\r\\n\\r\\n```python\\r\\nfrom DrissionPage import Chromium\\r\\n\\r\\ntab = Chromium().latest_tab\\r\\ntab.console.start()\\r\\ntab.run_js('con\"},{\"url\":\"/dp/2.浏览器控制/docker.html\",\"relativePath\":\"/dp/2.浏览器控制/docker.html\",\"frontmatter\":{\"id\":\"docker\",\"title\":\"🛰️ 其他\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 其他\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"Docker 常用命令参考手册\\r\\n\\r\\n 镜像相关命令\\r\\n\\r\\n 搜索和拉取镜像\\r\\n```bash\\r\\n 搜索镜像\\r\\ndocker search nginx\\r\\n\\r\\n 拉取镜像\\r\\ndocker pull nginx\\r\\ndocker pull nginx:1.20   指定版本\\r\\n\\r\\n 查看本地镜像\\r\\ndocker images\\r\\ndocker image ls\\r\\n\\r\\n 删除镜像\\r\\ndocker rmi nginx\\r\\ndocker rmi image_id\\r\\n```\\r\\n 国内镜像源\\r\\n```bash\\r\\n\\r\\n\\r\\n 使用 Python 3.9 的 slim 版本作为基础镜像\\r\\nFROM docker.m.d\"},{\"url\":\"/dp/2.浏览器控制/ele_operation.html\",\"relativePath\":\"/dp/2.浏览器控制/ele_operation.html\",\"frontmatter\":{\"id\":\"ele_operation\",\"title\":\"🛰️ 元素交互\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 元素交互\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n本节介绍与浏览器元素的交互。浏览器元素对象为`ChromiumElement`。\\r\\n\\r\\n ✅️️ 点击元素\\r\\n\\r\\n 📌 `click()`和`click.left()`\\r\\n\\r\\n这两个方法作用是一样的，用于左键点击元素。可选择模拟点击或 js 点击。\\r\\n\\r\\n|    参数名称     |   类型    |   默认值   | 说明                                                                          \"},{\"url\":\"/dp/2.浏览器控制/get_ele_info.html\",\"relativePath\":\"/dp/2.浏览器控制/get_ele_info.html\",\"frontmatter\":{\"id\":\"get_ele_info\",\"title\":\"🛰️ 获取元素信息\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 获取元素信息\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"浏览器元素对应的对象是`ChromiumElement`和`ShadowRoot`，本节介绍如何获取元素信息。\\r\\n\\r\\n ✅️️ 内容和属性\\r\\n\\r\\n 📌 `tag`\\r\\n\\r\\n此属性返回元素的标签名。\\r\\n\\r\\n返回类型：`str`\\r\\n\\r\\n---\\r\\n\\r\\n 📌 `html`\\r\\n\\r\\n此属性返回元素的`outerHTML`文本。\\r\\n\\r\\n返回类型：`str`\\r\\n\\r\\n---\\r\\n\\r\\n 📌 `inner_html`\\r\\n\\r\\n此属性返回元素的`innerHTML`文本。\\r\\n\\r\\n返回类型：`str`\\r\\n\\r\\n---\\r\\n\\r\\n 📌 `text`\\r\\n\\r\\n此属性返回元素内所有文本组合成的字符串。  \\r\\n该字符串已格式化，即已\"},{\"url\":\"/dp/2.浏览器控制/get_page_info.html\",\"relativePath\":\"/dp/2.浏览器控制/get_page_info.html\",\"frontmatter\":{\"id\":\"get_page_info\",\"title\":\"🛰️ 获取网页信息\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 获取网页信息\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n成功访问网页后，可使用 Tab 对象属性和方法获取页面信息。\\r\\n\\r\\n ✅️️ 页面信息\\r\\n\\r\\n 📌 `html`\\r\\n\\r\\n此属性返回当前页面 html 文本。\\r\\n\\r\\n:::info 注意\\r\\n    html 文本不包含`&lt;iframe&gt;`元素内容。\\r\\n:::\\r\\n\\r\\n返回类型：`str`\\r\\n\\r\\n---\\r\\n\\r\\n 📌 `json`\\r\\n\\r\\n此属性把请求内容解析成 json。\\r\\n\\r\\n假如用浏览器访问会返回 `*.json` 文件的 url，浏览器会把 json 数据显示出来\"},{\"url\":\"/dp/2.浏览器控制/iframe.html\",\"relativePath\":\"/dp/2.浏览器控制/iframe.html\",\"frontmatter\":{\"id\":\"iframe\",\"title\":\"🛰️ iframe 操作\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ iframe 操作\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n`&lt;iframe&gt;`元素是一种特殊的元素，它既是元素，也是页面。\\r\\n\\r\\nDrissionPage 无需切入切出即可处理`&lt;iframe&gt;`元素。\\r\\n可实现跨级元素查找、元素内部单独跳转、同时操作`&lt;iframe&gt;`内外元素、多线程控制多个`&lt;iframe&gt;`等操作。\\r\\n\\r\\n ✅️ 获取`&lt;iframe&gt;`对象\\r\\n\\r\\n获取`&lt;iframe&gt;`对象的方法有两种，可用获取普通元素的方式获取，或者用`get_fra\"},{\"url\":\"/dp/2.浏览器控制/intro.html\",\"relativePath\":\"/dp/2.浏览器控制/intro.html\",\"frontmatter\":{\"id\":\"intro\",\"title\":\"🛰️ 概述\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 概述\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n ✅️️ 基本逻辑\\r\\n\\r\\n操作浏览器的基本逻辑如下：\\r\\n\\r\\n1. 创建浏览器对象，用于启动或接管浏览器\\r\\n2. 获取一个 Tab 对象\\r\\n3. 使用 Tab 对象访问网址\\r\\n4. 使用 Tab 对象获取标签页内需要的元素对象\\r\\n5. 使用元素对象进行交互\\r\\n\\r\\n除此以外，还能执行更为复杂的操作，如执行 js 代码、监听网络数据、下载文件等。这些在后面的章节再介绍。\\r\\n\\r\\n示例： 在百度搜索 “Drissionpage”，并打印结果。\\r\\n\\r\\n```python\\r\\n 导入\\r\\nfro\"},{\"url\":\"/dp/2.浏览器控制/listener.html\",\"relativePath\":\"/dp/2.浏览器控制/listener.html\",\"frontmatter\":{\"id\":\"listener\",\"title\":\"🛰️ 监听网络数据\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 监听网络数据\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n许多网页的数据来自接口，在网站使用过程中动态加载，如使用 JS 加载内容的翻页列表。\\r\\n\\r\\n这些数据通常以 json 形式发送，浏览器接收后，对其进行解析，再加载到 DOM 相应位置。\\r\\n\\r\\n做数据采集的时候，我们往往从 DOM 中去获取解析后数据的，可能存在数据不全、加载响应不及时、难以判断加载完成等问题。\\r\\n\\r\\n如果我们可以拿到浏览器收发的数据包，根据数据包状态判断下一步操作，甚至直接获取数据，岂不是爽爆了？\\r\\n\\r\\nDrissionPage 每个页面对象（包括 Tab 和 \"},{\"url\":\"/dp/2.浏览器控制/mode_change.html\",\"relativePath\":\"/dp/2.浏览器控制/mode_change.html\",\"frontmatter\":{\"id\":\"mode_change\",\"title\":\"🛰️ 模式切换\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 模式切换\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n`MixTab`和`WebPage`有两种模式，d 模式用于控制浏览器，s 模式使用`requests`收发数据包。\\r\\n\\r\\n两种模式访问页面和提取数据的逻辑是一致的，使用同一套 api。\\r\\n\\r\\n每个标签页对象创建时都处于 d 模式。\\r\\n\\r\\n使用`change_mode()`方法进行切换。模式切换的时候会同步登录信息。\\r\\n\\r\\ns 模式下仍然可以控制浏览器，但因为共用 api，`ele()`等两种模式共用的方法，查找对象是`requests`的结果，而非浏览器。\\r\\n\\r\\n因此 s 模\"},{\"url\":\"/dp/2.浏览器控制/page_operation.html\",\"relativePath\":\"/dp/2.浏览器控制/page_operation.html\",\"frontmatter\":{\"id\":\"page_operation\",\"title\":\"🛰️ 页面交互\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 页面交互\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n本节介绍浏览器页面交互功能。\\r\\n\\r\\n一个 Tab 对象控制一个浏览器的标签页，是页面控制的主要单位。\\r\\n\\r\\n ✅️️ 页面跳转\\r\\n\\r\\n 📌 `get()`\\r\\n\\r\\n详见 “访问网页” 章节。\\r\\n\\r\\n---\\r\\n\\r\\n 📌 `back()`\\r\\n\\r\\n此方法用于在浏览历史中后退若干步。\\r\\n\\r\\n|  参数名称   |  类型   | 默认值 | 说明   |\\r\\n|:-------:|:-----:|:---:|------|\\r\\n| `steps` | `int` | `1` | 后退步数\"},{\"url\":\"/dp/2.浏览器控制/pages.html\",\"relativePath\":\"/dp/2.浏览器控制/pages.html\",\"frontmatter\":{\"id\":\"pages\",\"title\":\"🛰️ Page 对象\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ Page 对象\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n`ChromiumPage`和`WebPage`是 4.1 之前用于连接和控制浏览器的对象。\\r\\n\\r\\n4.1 这些功能由`Chromium`实现，但`ChromiumPage`和`WebPage`仍能正常使用。\\r\\n\\r\\n对比`Chromium`，`ChromiumPage`和`WebPage`在连接浏览器时可以少写一行代码，但在多标签页操作的时候容易造成混乱。\\r\\n\\r\\n更详细的用法可以看旧版文档。\\r\\n\\r\\n ✅️️ `ChromiumPage`\\r\\n\\r\\n`ChromiumPage`把浏览\"},{\"url\":\"/dp/2.浏览器控制/screen.html\",\"relativePath\":\"/dp/2.浏览器控制/screen.html\",\"frontmatter\":{\"id\":\"screen\",\"title\":\"🛰️ 截图和录像\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 截图和录像\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n ✅️️ 页面截图\\r\\n\\r\\n使用页面对象的`get_screenshot()`方法对页面进行截图，可对整个网页、可见网页、指定范围截图。\\r\\n\\r\\n对可视范围外截图需要 90 以上版本浏览器支持。\\r\\n\\r\\n下面三个参数三选一，优先级：`as_bytes`&gt;`as_base64`&gt;`path`。\\r\\n\\r\\n| 参数名称           | 类型                | 默认值     | 说明                                     \"},{\"url\":\"/dp/2.浏览器控制/tabs.html\",\"relativePath\":\"/dp/2.浏览器控制/tabs.html\",\"frontmatter\":{\"id\":\"tabs\",\"title\":\"🛰️ 标签页管理\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 标签页管理\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n浏览器的标签页由 Tab 对象（`ChromiumTab`和`MixTab`）控制。\\r\\n\\r\\n与网页的交互都由标签页对象进行。\\r\\n\\r\\n默认情况下，一个标签页由一个 Tab 对象控制。\\r\\n\\r\\n多个 Tab 对象可以同时操作，不需要切换焦点，也不需要激活到前台。\\r\\n\\r\\n:::tip 提醒\\r\\n    当禁用单例模式后，一个标签页也可以被多个 Tab 对象同时控制。\\r\\n:::\\r\\n\\r\\n ✅️️ 获取标签页对象\\r\\n\\r\\n 📌 获取最后激活的标签页\\r\\n\\r\\n`Chromium`对象的`lates\"},{\"url\":\"/dp/2.浏览器控制/upload.html\",\"relativePath\":\"/dp/2.浏览器控制/upload.html\",\"frontmatter\":{\"id\":\"upload\",\"title\":\"🛰️ 上传文件\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 上传文件\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n上传文件有两种方式：\\r\\n\\r\\n- 拦截文件输入框，自动填入路径\\r\\n- 找到`&lt;input&gt;`元素，填入文件路径\\r\\n\\r\\n ✅️️ 自然的交互\\r\\n\\r\\n传统自动化工具的文件上传，需要开发者在 DOM 里找到文件上传控件，然后用元素对象的`input()`方法填入路径。\\r\\n\\r\\n有些上传控件是临时加载的，有些藏得很深，找起来费时费力。\\r\\n\\r\\n本库提供一种自然的文件上传方式，无需在 DOM 里找控件，只要自然地点击触发文件选择框，程序就能主动截获，并填写设定好的路径，开发更省事。\"},{\"url\":\"/dp/2.浏览器控制/visit.html\",\"relativePath\":\"/dp/2.浏览器控制/visit.html\",\"frontmatter\":{\"id\":\"visit\",\"title\":\"🛰️ 访问网页\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 访问网页\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n本节介绍 Tab 对象访问网页的相关内容。\\r\\n\\r\\n ✅️️ 连接方法\\r\\n\\r\\n 📌 `get()`\\r\\n\\r\\n该方法用于跳转到一个网址。当连接失败时，程序会进行重试。\\r\\n\\r\\n可指定本地文件路径。\\r\\n\\r\\n|       参数名称        | 类型               | 默认值     | 说明                                                    |\\r\\n|:-----------------:|:------------\"},{\"url\":\"/dp/2.浏览器控制/waiting.html\",\"relativePath\":\"/dp/2.浏览器控制/waiting.html\",\"frontmatter\":{\"id\":\"waiting\",\"title\":\"🛰️ 等待\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 等待\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n网络环境不稳定，页面 js 运行时间也难以确定，自动化过程中经常遇到需要等待的情况。\\r\\n\\r\\n如果总是用`sleep()`，显得不太优雅，等待多了浪费时间，等待不够会导致报错。\\r\\n\\r\\n因此，程序能够智能等待是非常重要的，DrissionPage 内置了一些等待方法，可以提高程序稳定性和效率。\\r\\n\\r\\n它们藏在页面对象和元素对象的`wait`属性里。\\r\\n\\r\\n等待方法均有`timeout`参数，可自行设得超时时间，也可以设置超时后返回`False`还是抛出异常。\\r\\n\\r\\n ✅️️ 浏览器\"},{\"url\":\"/dp/2.浏览器控制/元素定位/behavior.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/behavior.html\",\"frontmatter\":{\"id\":\"behavior\",\"title\":\"🔦 行为模式\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 行为模式\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"✅️ 等待元素\\r\\n\\r\\n由于网络、js 运行时间的不确定性，经常需要等待元素加载到 DOM 中才能使用。\\r\\n\\r\\n浏览器所有查找元素操作都自带等待，时间默认跟随元素所在页面`timeout`属性（默认 10 秒），也可以在每次查找时单独设置，单独设置的等待时间不会改变页面原来设置。\\r\\n\\r\\n 📌 内置等待\\r\\n\\r\\n```python\\r\\nfrom DrissionPage import Chromium\\r\\n\\r\\ntab = Chromium().latest_tab\\r\\n 设置查找元素超时时间为 5 秒\\r\\ntab.set.timeouts(5)\\r\\n\\r\\n 使用页面超时时间来查找元素（5 秒）\\r\\nele1 =\"},{\"url\":\"/dp/2.浏览器控制/元素定位/filter.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/filter.html\",\"frontmatter\":{\"id\":\"filter\",\"title\":\"🔦 在结果列表中筛选\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 在结果列表中筛选\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"本节介绍在元素列表中按需要进行筛选，获取指定元素。\\r\\n\\r\\n`eles()`、`nexts()`等能够获取多个元素的方法，返回的列表可进行进一步筛选，以获取指定的元素。\\r\\n\\r\\n:::info 说明\\r\\n    浏览器页面对象和`SessionPage`产生的元素列表均有此功能，前者筛选功能比后者多。\\r\\n:::\\r\\n\\r\\n示例1，筛选并返回元素列表：\\r\\n\\r\\n```python\\r\\nfrom DrissionPage import Chromium\\r\\n\\r\\ntab = Chromium().latest_tab\\r\\ntab.get('https://www.baidu.com')\\r\\neles = tab('s-\"},{\"url\":\"/dp/2.浏览器控制/元素定位/find_in_object.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/find_in_object.html\",\"frontmatter\":{\"id\":\"find_in_object\",\"title\":\"🔦 页面或元素内查找\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 页面或元素内查找\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"✅️️ 页面或元素内查找\\r\\n\\r\\n页面对象和元素对象都拥有`ele()`和`eles()`方法，用于获取其内部指定子元素。\\r\\n\\r\\n 📌 `ele()`\\r\\n\\r\\n用于查找其内部第一个符合条件的元素。\\r\\n\\r\\n`SessionPage`和`ChromiumPage`获取元素的方法是一致的，但前者返回的元素对象为`SessionElement`，后者是`ChromiumElement`。\\r\\n\\r\\n|         参数名称         |                        类型                        |  默认值   | 说明                   \"},{\"url\":\"/dp/2.浏览器控制/元素定位/intro.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/intro.html\",\"frontmatter\":{\"id\":\"intro\",\"title\":\"🔦 概述\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 概述\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n定位元素是自动化重中之重的技能。  \\r\\n虽然可在开发者工具直接复制绝对路径，但这样做有几个缺点：\\r\\n\\r\\n- 代码冗长，可读性低\\r\\n- 动态页面容易导致元素失效\\r\\n- 无法使用相对定位\\r\\n- 网页稍有改动或者出现临时元素就不能用，容错性低\\r\\n- 无法跨`&lt;iframe&gt;`查找元素\\r\\n\\r\\n因此作者极不建议使用右键复制的元素路径。\\r\\n\\r\\n本库提供一套简洁易用的语法，用于快速定位元素，并且内置等待功能、支持链式查找，减少了代码的复杂性。  \\r\\n同时也兼容 css selec\"},{\"url\":\"/dp/2.浏览器控制/元素定位/relative.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/relative.html\",\"frontmatter\":{\"id\":\"relative\",\"title\":\"🔦 相对定位\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 相对定位\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"相对定位的意思是以一个已获取的元素为基准，按需要使用不同方法获取指定的其它元素。\\r\\n\\r\\n相对定位有基于 DOM 的方式和基于视觉的方式两种\\r\\n\\r\\n ✅️️ 基于 DOM 相对定位\\r\\n\\r\\n以下方法可以以某元素为基准，在 DOM 中按照条件获取其直接子节点、同级节点、祖先元素、文档前后节点。  \\r\\n\\r\\n这里说的是 “节点”，不是 “元素”。因为相对定位可以获取除元素外的其它节点，包括文本、注释节点。\\r\\n\\r\\n:::warning 注意\\r\\n    如果元素在`&lt;iframe\\r\\n:::\\r\\n\\r\\n 📌 获取父级元素\\r\\n\\r\\n🔸 `parent()`\\r\\n\\r\\n此方法获取当前元素某一级父元素，可指定筛选条\"},{\"url\":\"/dp/2.浏览器控制/元素定位/sheet.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/sheet.html\",\"frontmatter\":{\"id\":\"sheet\",\"title\":\"🔦 语法速查表\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 语法速查表\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n ✅️ 定位语法\\r\\n\\r\\n 📌 基本用法\\r\\n\\r\\n|    写法     |       精确匹配        |    模糊匹配    |   匹配开头   |   匹配结尾   |                   说明                    |\\r\\n|:---------:|:-----------------:|:----------:|:--------:|:--------:|:------------------------------------\"},{\"url\":\"/dp/2.浏览器控制/元素定位/simplify.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/simplify.html\",\"frontmatter\":{\"id\":\"simplify\",\"title\":\"🔦 简化写法\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 简化写法\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n为进一步精简代码，定位语法都可以用简化形式来表示，使语句更短，链式操作时更清晰。\\r\\n\\r\\n ✅️ 定位符语法简化\\r\\n\\r\\n- 定位语法都有其简化形式\\r\\n- 页面和元素对象都实现了`__call__()`方法，所以`page.ele('')`可简化为`page('')`\\r\\n- 查找方法都支持链式操作\\r\\n\\r\\n示例：\\r\\n\\r\\n```python\\r\\n 查找tag为div的元素\\r\\nele = tab.ele('tag:div')   原写法\\r\\nele = tab('t:div')   简化写法\"},{\"url\":\"/dp/2.浏览器控制/元素定位/syntax.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/syntax.html\",\"frontmatter\":{\"id\":\"syntax\",\"title\":\"🔦 定位语法\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 定位语法\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"定位语法用于指明以哪种方式去查找指定元素，语法简洁明了，熟练使用可大幅提高程序可读性。\\r\\n\\r\\n所有涉及获取元素的操作都可以使用定位语法，如`ele()`、`actions.move_to()`、`wait.eles_loaded()`、`get_frame()`等等。\\r\\n\\r\\n定位语法用于简化代码，提高可读性，但并不覆盖所有复杂场景。很复杂的场景可直接用 xpath 查找。\\r\\n\\r\\n以下使用这个页面进行讲解。\\r\\n\\r\\n```html\\r\\n&lt;html\\r\\n&lt;body&gt;\\r\\n&lt;div id=\\\"one\\\"&gt;\\r\\n    &lt;p class=\\\"p_cls\\\" id=\\\"row1\\\" dat\"},{\"url\":\"/dp/3.下载/DownloadKit.html\",\"relativePath\":\"/dp/3.下载/DownloadKit.html\",\"frontmatter\":{\"id\":\"DownloadKit\",\"title\":\"⤵️ download方法\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"⤵️ download方法\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\nDrissionPage 每种页面对象都内置一个下载工具，提供任务管理、多线程并发、大文件分块、自动重连、文件名冲突处理等功能。\\r\\n\\r\\n该工具现已独立打包成一个库，名为 DownloadKit，详细介绍见：DownloadKit。\\r\\n\\r\\n这里只介绍其主要功能，具体使用和设置方法请移步该文档。\\r\\n\\r\\n ✅️️ 功能简介\\r\\n\\r\\n 📌 支持该工具的对象\\r\\n\\r\\n以下对象均支持\\r\\n\\r\\n- `SessionPage`\\r\\n- `ChromiumTab`\\r\\n- `MixTab`\\r\\n- `Ch\"},{\"url\":\"/dp/3.下载/browser.html\",\"relativePath\":\"/dp/3.下载/browser.html\",\"frontmatter\":{\"id\":\"browser\",\"title\":\"⤵️ 浏览器下载\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"⤵️ 浏览器下载\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n本节介绍对浏览器下载任务进行设置的功能。\\r\\n\\r\\n ✅️ 概述\\r\\n\\r\\n 📌 功能\\r\\n\\r\\nDrissionPage 提供以下功能，用于对浏览器下载任务进行控制：\\r\\n\\r\\n- 每个 tab 对象可独立设置文件保存路径\\r\\n- 下载前可指定文件名称，实现文件重命名\\r\\n- 可设置存在同名文件时的处理方式\\r\\n- 可获取任务下载进度\\r\\n- 可等待下载任务结束\\r\\n- 可取消任务\\r\\n- 可拦截下载任务并获取其信息\\r\\n\\r\\n---\\r\\n\\r\\n ⚠️ 注意事项\\r\\n\\r\\n 📌 记得等待任务结束\\r\\n\\r\\n因技术原\"},{\"url\":\"/dp/3.下载/intro.html\",\"relativePath\":\"/dp/3.下载/intro.html\",\"frontmatter\":{\"id\":\"intro\",\"title\":\"⤵️ 概述\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"⤵️ 概述\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\nDrissionPage 提供了强大的文件下载管理功能。\\r\\n\\r\\n能够主动发起下载任务，也能够对浏览器触发的下载任务进行管理。\\r\\n\\r\\n ✅️️ `download()`方法\\r\\n\\r\\n该方法可以主动发起下载任务，提供任务管理、多线程、大文件分块、自动重连、文件名冲突处理等功能。\\r\\n\\r\\n页面对象、`&lt;iframe&gt;`元素对象均支持此方法。\\r\\n\\r\\n此方法是封装 requests 实现的，下载时会自动同步 cookies。\\r\\n\\r\\n示例：\\r\\n\\r\\n```python\\r\\nfrom D\"},{\"url\":\"/api-examples.html\",\"relativePath\":\"/api-examples.html\",\"frontmatter\":{\"outline\":\"deep\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"Runtime API Examples\",\"date\":\"2025-09-25 10:07:04\",\"capture\":\"Runtime API Examples\\nThis page demonstrates usage of some of the runtime APIs provided by VitePress.\\nThe main `useData()` API can be used to access site, theme, and page data for the current page. It works in both `.md` and `.vue` files:\\n```md\\n&lt;script setup\\nimport { useData } from 'vitepress'\\ncon\"},{\"url\":\"/markdown-examples.html\",\"relativePath\":\"/markdown-examples.html\",\"frontmatter\":{},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"Markdown Extension Examples\",\"date\":\"2025-09-25 10:07:04\",\"capture\":\"This page demonstrates some of the built-in markdown extensions provided by VitePress.\\n Syntax Highlighting\\nVitePress provides Syntax Highlighting powered by Shiki, with additional features like line-highlighting:\\nInput\\n````md\\n```js{4}\\nexport default {\\n  data () {\\n    return {\\n      msg: 'Highlighte\"}],\"groupPostsByYear\":{\"2025 \":[{\"url\":\"/readme.html\",\"relativePath\":\"/readme.html\",\"frontmatter\":{},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"html\",\"date\":\"2025-09-25 12:42:06\",\"capture\":\"\"},{\"url\":\"/dp/1.🌷准备/1.intro.html\",\"relativePath\":\"/dp/1.🌷准备/1.intro.html\",\"frontmatter\":{\"id\":\"intro\",\"permalink\":\"/dp/prepare/intro\",\"title\":\" 基本概念\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\" 基本概念\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"⤵️DrissionPage 基本概念解析\\r\\n 一、网页自动化概述\\r\\n网页自动化主要存在两种常见形式，二者各有优劣，DrissionPage 对其进行了整合优化：\\r\\n\\r\\n|自动化形式|优势|劣势|典型工具/实现|\\r\\n| ---- | ---- | ---- | ---- |\\r\\n|直接向服务器发送数据包|轻量级、速度快，便于多线程与分布式部署|当数据包构成复杂或含加密技术时，开发难度大幅增加|requests 库|\\r\\n|控制浏览器与网页交互|能处理复杂页面交互（如点击、填写表单），无需深入解构数据包|运行速度受浏览器制约，较慢且占用内存多|传统 selenium|\\r\\n\\r\\nDrissionPage\"},{\"url\":\"/dp/1.🌷准备/2.install.html\",\"relativePath\":\"/dp/1.🌷准备/2.install.html\",\"frontmatter\":{\"id\":\"install\",\"permalink\":\"/dp/prepare/install\",\"title\":\"安装指南\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"安装指南\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"DrissionPage 安装指南\\r\\n本文档基于网页 http://drissionpage.cn/get_start/installation 内容整理，详细介绍 DrissionPage 的运行环境要求、安装步骤及版本升级方法，帮助用户快速完成工具部署。\\r\\n\\r\\n\\r\\n 一、运行环境要求\\r\\n在安装 DrissionPage 前，请确保本地环境满足以下条件，避免因环境不兼容导致工具无法正常使用：\\r\\n\\r\\n| 环境类别 | 具体要求 | 补充说明 |\\r\\n|----------|----------|----------|\\r\\n| 操作系统 | Windows、Linux、Mac | 支持主流桌面操作系\"},{\"url\":\"/dp/2.浏览器控制/actions.html\",\"relativePath\":\"/dp/2.浏览器控制/actions.html\",\"frontmatter\":{\"id\":\"actions\",\"title\":\"🛰️ 动作链\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 动作链\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"动作链可以在浏览器上完成一系列交互行为，如鼠标移动、鼠标点击、键盘输入等。\\r\\n\\r\\n浏览器页面对象都支持使用动作链。\\r\\n\\r\\n可以链式操作，也可以分开执行，每个动作执行即生效，无需`perform()`。\\r\\n\\r\\n这些操作皆为模拟，真正的鼠标不会移动，因此可以多个标签页同时操作。\\r\\n\\r\\n ✅️ 使用方法\\r\\n\\r\\n可以用上述对象内置的`actions`属性调用动作链，也可以主动创建一个动作链对象，将页面对象传入使用。\\r\\n\\r\\n这两种方式唯一区别是，前者会等待页面加载完毕再执行，后者不会。\\r\\n\\r\\n 📌 使用内置`actions`属性\\r\\n\\r\\n:::info 说明\\r\\n    这种方式会等到页面框架文档（不包括\"},{\"url\":\"/dp/2.浏览器控制/browser_object.html\",\"relativePath\":\"/dp/2.浏览器控制/browser_object.html\",\"frontmatter\":{\"id\":\"browser_object\",\"title\":\"🛰️ 浏览器对象\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 浏览器对象\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"我们已经了解如何创建浏览器对象，本节介绍浏览器对象的功能。\\r\\n\\r\\n:::note 说明\\r\\n    文中的 “Tab 对象” 是`ChromiumTab`和`MixTab`的统称。\\r\\n:::\\r\\n\\r\\n ✅️️ 获取标签页对象或信息\\r\\n\\r\\n 📌 `get_tab()`\\r\\n\\r\\n此方法用于获取一个标签页对象或它的 id。\\r\\n\\r\\n`id_or_num`不为`None`时，获取`id_or_num`指定的标签页。后面几个参数无效。\\r\\n\\r\\n`id_or_num`为`None`时，根据后面几个参数指定的条件查找标签页（与关系）。\\r\\n\\r\\n|    参数名称    |             类型        \"},{\"url\":\"/dp/2.浏览器控制/browser_options.html\",\"relativePath\":\"/dp/2.浏览器控制/browser_options.html\",\"frontmatter\":{\"id\":\"browser_options\",\"title\":\"🛰️ 浏览器启动设置\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 浏览器启动设置\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"浏览器的启动配置非常繁杂，本库使用`ChromiumOptions`类管理启动配置，并且内置了常用配置的设置接口。\\r\\n\\r\\n:::warning 注意\\r\\n    该对象只能用于浏览器的启动，浏览器启动后，再修改该配置没有任何效果。接管已打开的浏览器时，启动配置也是无效的。\\r\\n:::\\r\\n\\r\\n ✅️️ 创建对象\\r\\n\\r\\n 📌 导入\\r\\n\\r\\n```python\\r\\nfrom DrissionPage import ChromiumOptions\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n 📌 初始化参数\\r\\n\\r\\n`ChromiumOptions`对象用于管理浏览器初始化配置。可从配置文件中读取配置来进行初始化。\\r\\n\\r\"},{\"url\":\"/dp/2.浏览器控制/connect_browser.html\",\"relativePath\":\"/dp/2.浏览器控制/connect_browser.html\",\"frontmatter\":{\"id\":\"connect_browser\",\"title\":\"🛰️ 连接浏览器\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 连接浏览器\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"`Chromium`对象用于连接和管理浏览器。标签页的开关和获取、整体运行参数配置、浏览器信息获取等都由它进行。\\r\\n\\r\\n根据不同的配置，可以接管已打开的浏览器，也可以启动新的浏览器。\\r\\n\\r\\n每个浏览器只能有一个`Chromium`对象（同一进程中）。对同一个浏览器重复使用`Chromium()`获取的都是同一个对象。\\r\\n\\r\\n:::tip Tips\\r\\n    程序结束时，被打开的浏览器不会主动关闭（VSCode 启动的除外），以便下次运行程序时使用。\\r\\n    新手在使用无头模式时需注意，程序关闭后其实浏览器进程还在，只是看不见。\\r\\n:::\\r\\n\\r\\n ✅️ `Chromium`初始化参数\\r\\n\\r\\n|\"},{\"url\":\"/dp/2.浏览器控制/console.html\",\"relativePath\":\"/dp/2.浏览器控制/console.html\",\"frontmatter\":{\"id\":\"console\",\"title\":\"🛰️ 获取控制台信息\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 获取控制台信息\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n获取控制台信息的逻辑和监听网络数据差不多，是通过监听控制台数据实现的。\\r\\n\\r\\n:::warning 注意\\r\\n    不是所有显示在控制台的信息都能获取，需要用`console.log()`等方法输出到控制台的才能获取。\\r\\n:::\\r\\n\\r\\n ✅️ 示例\\r\\n\\r\\n```python\\r\\nfrom DrissionPage import Chromium\\r\\n\\r\\ntab = Chromium().latest_tab\\r\\ntab.console.start()\\r\\ntab.run_js('con\"},{\"url\":\"/dp/2.浏览器控制/docker.html\",\"relativePath\":\"/dp/2.浏览器控制/docker.html\",\"frontmatter\":{\"id\":\"docker\",\"title\":\"🛰️ 其他\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 其他\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"Docker 常用命令参考手册\\r\\n\\r\\n 镜像相关命令\\r\\n\\r\\n 搜索和拉取镜像\\r\\n```bash\\r\\n 搜索镜像\\r\\ndocker search nginx\\r\\n\\r\\n 拉取镜像\\r\\ndocker pull nginx\\r\\ndocker pull nginx:1.20   指定版本\\r\\n\\r\\n 查看本地镜像\\r\\ndocker images\\r\\ndocker image ls\\r\\n\\r\\n 删除镜像\\r\\ndocker rmi nginx\\r\\ndocker rmi image_id\\r\\n```\\r\\n 国内镜像源\\r\\n```bash\\r\\n\\r\\n\\r\\n 使用 Python 3.9 的 slim 版本作为基础镜像\\r\\nFROM docker.m.d\"},{\"url\":\"/dp/2.浏览器控制/ele_operation.html\",\"relativePath\":\"/dp/2.浏览器控制/ele_operation.html\",\"frontmatter\":{\"id\":\"ele_operation\",\"title\":\"🛰️ 元素交互\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 元素交互\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n本节介绍与浏览器元素的交互。浏览器元素对象为`ChromiumElement`。\\r\\n\\r\\n ✅️️ 点击元素\\r\\n\\r\\n 📌 `click()`和`click.left()`\\r\\n\\r\\n这两个方法作用是一样的，用于左键点击元素。可选择模拟点击或 js 点击。\\r\\n\\r\\n|    参数名称     |   类型    |   默认值   | 说明                                                                          \"},{\"url\":\"/dp/2.浏览器控制/get_ele_info.html\",\"relativePath\":\"/dp/2.浏览器控制/get_ele_info.html\",\"frontmatter\":{\"id\":\"get_ele_info\",\"title\":\"🛰️ 获取元素信息\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 获取元素信息\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"浏览器元素对应的对象是`ChromiumElement`和`ShadowRoot`，本节介绍如何获取元素信息。\\r\\n\\r\\n ✅️️ 内容和属性\\r\\n\\r\\n 📌 `tag`\\r\\n\\r\\n此属性返回元素的标签名。\\r\\n\\r\\n返回类型：`str`\\r\\n\\r\\n---\\r\\n\\r\\n 📌 `html`\\r\\n\\r\\n此属性返回元素的`outerHTML`文本。\\r\\n\\r\\n返回类型：`str`\\r\\n\\r\\n---\\r\\n\\r\\n 📌 `inner_html`\\r\\n\\r\\n此属性返回元素的`innerHTML`文本。\\r\\n\\r\\n返回类型：`str`\\r\\n\\r\\n---\\r\\n\\r\\n 📌 `text`\\r\\n\\r\\n此属性返回元素内所有文本组合成的字符串。  \\r\\n该字符串已格式化，即已\"},{\"url\":\"/dp/2.浏览器控制/get_page_info.html\",\"relativePath\":\"/dp/2.浏览器控制/get_page_info.html\",\"frontmatter\":{\"id\":\"get_page_info\",\"title\":\"🛰️ 获取网页信息\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 获取网页信息\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n成功访问网页后，可使用 Tab 对象属性和方法获取页面信息。\\r\\n\\r\\n ✅️️ 页面信息\\r\\n\\r\\n 📌 `html`\\r\\n\\r\\n此属性返回当前页面 html 文本。\\r\\n\\r\\n:::info 注意\\r\\n    html 文本不包含`&lt;iframe&gt;`元素内容。\\r\\n:::\\r\\n\\r\\n返回类型：`str`\\r\\n\\r\\n---\\r\\n\\r\\n 📌 `json`\\r\\n\\r\\n此属性把请求内容解析成 json。\\r\\n\\r\\n假如用浏览器访问会返回 `*.json` 文件的 url，浏览器会把 json 数据显示出来\"},{\"url\":\"/dp/2.浏览器控制/iframe.html\",\"relativePath\":\"/dp/2.浏览器控制/iframe.html\",\"frontmatter\":{\"id\":\"iframe\",\"title\":\"🛰️ iframe 操作\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ iframe 操作\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n`&lt;iframe&gt;`元素是一种特殊的元素，它既是元素，也是页面。\\r\\n\\r\\nDrissionPage 无需切入切出即可处理`&lt;iframe&gt;`元素。\\r\\n可实现跨级元素查找、元素内部单独跳转、同时操作`&lt;iframe&gt;`内外元素、多线程控制多个`&lt;iframe&gt;`等操作。\\r\\n\\r\\n ✅️ 获取`&lt;iframe&gt;`对象\\r\\n\\r\\n获取`&lt;iframe&gt;`对象的方法有两种，可用获取普通元素的方式获取，或者用`get_fra\"},{\"url\":\"/dp/2.浏览器控制/intro.html\",\"relativePath\":\"/dp/2.浏览器控制/intro.html\",\"frontmatter\":{\"id\":\"intro\",\"title\":\"🛰️ 概述\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 概述\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n ✅️️ 基本逻辑\\r\\n\\r\\n操作浏览器的基本逻辑如下：\\r\\n\\r\\n1. 创建浏览器对象，用于启动或接管浏览器\\r\\n2. 获取一个 Tab 对象\\r\\n3. 使用 Tab 对象访问网址\\r\\n4. 使用 Tab 对象获取标签页内需要的元素对象\\r\\n5. 使用元素对象进行交互\\r\\n\\r\\n除此以外，还能执行更为复杂的操作，如执行 js 代码、监听网络数据、下载文件等。这些在后面的章节再介绍。\\r\\n\\r\\n示例： 在百度搜索 “Drissionpage”，并打印结果。\\r\\n\\r\\n```python\\r\\n 导入\\r\\nfro\"},{\"url\":\"/dp/2.浏览器控制/listener.html\",\"relativePath\":\"/dp/2.浏览器控制/listener.html\",\"frontmatter\":{\"id\":\"listener\",\"title\":\"🛰️ 监听网络数据\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 监听网络数据\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n许多网页的数据来自接口，在网站使用过程中动态加载，如使用 JS 加载内容的翻页列表。\\r\\n\\r\\n这些数据通常以 json 形式发送，浏览器接收后，对其进行解析，再加载到 DOM 相应位置。\\r\\n\\r\\n做数据采集的时候，我们往往从 DOM 中去获取解析后数据的，可能存在数据不全、加载响应不及时、难以判断加载完成等问题。\\r\\n\\r\\n如果我们可以拿到浏览器收发的数据包，根据数据包状态判断下一步操作，甚至直接获取数据，岂不是爽爆了？\\r\\n\\r\\nDrissionPage 每个页面对象（包括 Tab 和 \"},{\"url\":\"/dp/2.浏览器控制/mode_change.html\",\"relativePath\":\"/dp/2.浏览器控制/mode_change.html\",\"frontmatter\":{\"id\":\"mode_change\",\"title\":\"🛰️ 模式切换\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 模式切换\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n`MixTab`和`WebPage`有两种模式，d 模式用于控制浏览器，s 模式使用`requests`收发数据包。\\r\\n\\r\\n两种模式访问页面和提取数据的逻辑是一致的，使用同一套 api。\\r\\n\\r\\n每个标签页对象创建时都处于 d 模式。\\r\\n\\r\\n使用`change_mode()`方法进行切换。模式切换的时候会同步登录信息。\\r\\n\\r\\ns 模式下仍然可以控制浏览器，但因为共用 api，`ele()`等两种模式共用的方法，查找对象是`requests`的结果，而非浏览器。\\r\\n\\r\\n因此 s 模\"},{\"url\":\"/dp/2.浏览器控制/page_operation.html\",\"relativePath\":\"/dp/2.浏览器控制/page_operation.html\",\"frontmatter\":{\"id\":\"page_operation\",\"title\":\"🛰️ 页面交互\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 页面交互\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n本节介绍浏览器页面交互功能。\\r\\n\\r\\n一个 Tab 对象控制一个浏览器的标签页，是页面控制的主要单位。\\r\\n\\r\\n ✅️️ 页面跳转\\r\\n\\r\\n 📌 `get()`\\r\\n\\r\\n详见 “访问网页” 章节。\\r\\n\\r\\n---\\r\\n\\r\\n 📌 `back()`\\r\\n\\r\\n此方法用于在浏览历史中后退若干步。\\r\\n\\r\\n|  参数名称   |  类型   | 默认值 | 说明   |\\r\\n|:-------:|:-----:|:---:|------|\\r\\n| `steps` | `int` | `1` | 后退步数\"},{\"url\":\"/dp/2.浏览器控制/pages.html\",\"relativePath\":\"/dp/2.浏览器控制/pages.html\",\"frontmatter\":{\"id\":\"pages\",\"title\":\"🛰️ Page 对象\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ Page 对象\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n`ChromiumPage`和`WebPage`是 4.1 之前用于连接和控制浏览器的对象。\\r\\n\\r\\n4.1 这些功能由`Chromium`实现，但`ChromiumPage`和`WebPage`仍能正常使用。\\r\\n\\r\\n对比`Chromium`，`ChromiumPage`和`WebPage`在连接浏览器时可以少写一行代码，但在多标签页操作的时候容易造成混乱。\\r\\n\\r\\n更详细的用法可以看旧版文档。\\r\\n\\r\\n ✅️️ `ChromiumPage`\\r\\n\\r\\n`ChromiumPage`把浏览\"},{\"url\":\"/dp/2.浏览器控制/screen.html\",\"relativePath\":\"/dp/2.浏览器控制/screen.html\",\"frontmatter\":{\"id\":\"screen\",\"title\":\"🛰️ 截图和录像\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 截图和录像\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n ✅️️ 页面截图\\r\\n\\r\\n使用页面对象的`get_screenshot()`方法对页面进行截图，可对整个网页、可见网页、指定范围截图。\\r\\n\\r\\n对可视范围外截图需要 90 以上版本浏览器支持。\\r\\n\\r\\n下面三个参数三选一，优先级：`as_bytes`&gt;`as_base64`&gt;`path`。\\r\\n\\r\\n| 参数名称           | 类型                | 默认值     | 说明                                     \"},{\"url\":\"/dp/2.浏览器控制/tabs.html\",\"relativePath\":\"/dp/2.浏览器控制/tabs.html\",\"frontmatter\":{\"id\":\"tabs\",\"title\":\"🛰️ 标签页管理\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 标签页管理\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n浏览器的标签页由 Tab 对象（`ChromiumTab`和`MixTab`）控制。\\r\\n\\r\\n与网页的交互都由标签页对象进行。\\r\\n\\r\\n默认情况下，一个标签页由一个 Tab 对象控制。\\r\\n\\r\\n多个 Tab 对象可以同时操作，不需要切换焦点，也不需要激活到前台。\\r\\n\\r\\n:::tip 提醒\\r\\n    当禁用单例模式后，一个标签页也可以被多个 Tab 对象同时控制。\\r\\n:::\\r\\n\\r\\n ✅️️ 获取标签页对象\\r\\n\\r\\n 📌 获取最后激活的标签页\\r\\n\\r\\n`Chromium`对象的`lates\"},{\"url\":\"/dp/2.浏览器控制/upload.html\",\"relativePath\":\"/dp/2.浏览器控制/upload.html\",\"frontmatter\":{\"id\":\"upload\",\"title\":\"🛰️ 上传文件\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 上传文件\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n上传文件有两种方式：\\r\\n\\r\\n- 拦截文件输入框，自动填入路径\\r\\n- 找到`&lt;input&gt;`元素，填入文件路径\\r\\n\\r\\n ✅️️ 自然的交互\\r\\n\\r\\n传统自动化工具的文件上传，需要开发者在 DOM 里找到文件上传控件，然后用元素对象的`input()`方法填入路径。\\r\\n\\r\\n有些上传控件是临时加载的，有些藏得很深，找起来费时费力。\\r\\n\\r\\n本库提供一种自然的文件上传方式，无需在 DOM 里找控件，只要自然地点击触发文件选择框，程序就能主动截获，并填写设定好的路径，开发更省事。\"},{\"url\":\"/dp/2.浏览器控制/visit.html\",\"relativePath\":\"/dp/2.浏览器控制/visit.html\",\"frontmatter\":{\"id\":\"visit\",\"title\":\"🛰️ 访问网页\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 访问网页\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n本节介绍 Tab 对象访问网页的相关内容。\\r\\n\\r\\n ✅️️ 连接方法\\r\\n\\r\\n 📌 `get()`\\r\\n\\r\\n该方法用于跳转到一个网址。当连接失败时，程序会进行重试。\\r\\n\\r\\n可指定本地文件路径。\\r\\n\\r\\n|       参数名称        | 类型               | 默认值     | 说明                                                    |\\r\\n|:-----------------:|:------------\"},{\"url\":\"/dp/2.浏览器控制/waiting.html\",\"relativePath\":\"/dp/2.浏览器控制/waiting.html\",\"frontmatter\":{\"id\":\"waiting\",\"title\":\"🛰️ 等待\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 等待\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n网络环境不稳定，页面 js 运行时间也难以确定，自动化过程中经常遇到需要等待的情况。\\r\\n\\r\\n如果总是用`sleep()`，显得不太优雅，等待多了浪费时间，等待不够会导致报错。\\r\\n\\r\\n因此，程序能够智能等待是非常重要的，DrissionPage 内置了一些等待方法，可以提高程序稳定性和效率。\\r\\n\\r\\n它们藏在页面对象和元素对象的`wait`属性里。\\r\\n\\r\\n等待方法均有`timeout`参数，可自行设得超时时间，也可以设置超时后返回`False`还是抛出异常。\\r\\n\\r\\n ✅️️ 浏览器\"},{\"url\":\"/dp/2.浏览器控制/元素定位/behavior.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/behavior.html\",\"frontmatter\":{\"id\":\"behavior\",\"title\":\"🔦 行为模式\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 行为模式\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"✅️ 等待元素\\r\\n\\r\\n由于网络、js 运行时间的不确定性，经常需要等待元素加载到 DOM 中才能使用。\\r\\n\\r\\n浏览器所有查找元素操作都自带等待，时间默认跟随元素所在页面`timeout`属性（默认 10 秒），也可以在每次查找时单独设置，单独设置的等待时间不会改变页面原来设置。\\r\\n\\r\\n 📌 内置等待\\r\\n\\r\\n```python\\r\\nfrom DrissionPage import Chromium\\r\\n\\r\\ntab = Chromium().latest_tab\\r\\n 设置查找元素超时时间为 5 秒\\r\\ntab.set.timeouts(5)\\r\\n\\r\\n 使用页面超时时间来查找元素（5 秒）\\r\\nele1 =\"},{\"url\":\"/dp/2.浏览器控制/元素定位/filter.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/filter.html\",\"frontmatter\":{\"id\":\"filter\",\"title\":\"🔦 在结果列表中筛选\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 在结果列表中筛选\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"本节介绍在元素列表中按需要进行筛选，获取指定元素。\\r\\n\\r\\n`eles()`、`nexts()`等能够获取多个元素的方法，返回的列表可进行进一步筛选，以获取指定的元素。\\r\\n\\r\\n:::info 说明\\r\\n    浏览器页面对象和`SessionPage`产生的元素列表均有此功能，前者筛选功能比后者多。\\r\\n:::\\r\\n\\r\\n示例1，筛选并返回元素列表：\\r\\n\\r\\n```python\\r\\nfrom DrissionPage import Chromium\\r\\n\\r\\ntab = Chromium().latest_tab\\r\\ntab.get('https://www.baidu.com')\\r\\neles = tab('s-\"},{\"url\":\"/dp/2.浏览器控制/元素定位/find_in_object.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/find_in_object.html\",\"frontmatter\":{\"id\":\"find_in_object\",\"title\":\"🔦 页面或元素内查找\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 页面或元素内查找\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"✅️️ 页面或元素内查找\\r\\n\\r\\n页面对象和元素对象都拥有`ele()`和`eles()`方法，用于获取其内部指定子元素。\\r\\n\\r\\n 📌 `ele()`\\r\\n\\r\\n用于查找其内部第一个符合条件的元素。\\r\\n\\r\\n`SessionPage`和`ChromiumPage`获取元素的方法是一致的，但前者返回的元素对象为`SessionElement`，后者是`ChromiumElement`。\\r\\n\\r\\n|         参数名称         |                        类型                        |  默认值   | 说明                   \"},{\"url\":\"/dp/2.浏览器控制/元素定位/intro.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/intro.html\",\"frontmatter\":{\"id\":\"intro\",\"title\":\"🔦 概述\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 概述\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n定位元素是自动化重中之重的技能。  \\r\\n虽然可在开发者工具直接复制绝对路径，但这样做有几个缺点：\\r\\n\\r\\n- 代码冗长，可读性低\\r\\n- 动态页面容易导致元素失效\\r\\n- 无法使用相对定位\\r\\n- 网页稍有改动或者出现临时元素就不能用，容错性低\\r\\n- 无法跨`&lt;iframe&gt;`查找元素\\r\\n\\r\\n因此作者极不建议使用右键复制的元素路径。\\r\\n\\r\\n本库提供一套简洁易用的语法，用于快速定位元素，并且内置等待功能、支持链式查找，减少了代码的复杂性。  \\r\\n同时也兼容 css selec\"},{\"url\":\"/dp/2.浏览器控制/元素定位/relative.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/relative.html\",\"frontmatter\":{\"id\":\"relative\",\"title\":\"🔦 相对定位\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 相对定位\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"相对定位的意思是以一个已获取的元素为基准，按需要使用不同方法获取指定的其它元素。\\r\\n\\r\\n相对定位有基于 DOM 的方式和基于视觉的方式两种\\r\\n\\r\\n ✅️️ 基于 DOM 相对定位\\r\\n\\r\\n以下方法可以以某元素为基准，在 DOM 中按照条件获取其直接子节点、同级节点、祖先元素、文档前后节点。  \\r\\n\\r\\n这里说的是 “节点”，不是 “元素”。因为相对定位可以获取除元素外的其它节点，包括文本、注释节点。\\r\\n\\r\\n:::warning 注意\\r\\n    如果元素在`&lt;iframe\\r\\n:::\\r\\n\\r\\n 📌 获取父级元素\\r\\n\\r\\n🔸 `parent()`\\r\\n\\r\\n此方法获取当前元素某一级父元素，可指定筛选条\"},{\"url\":\"/dp/2.浏览器控制/元素定位/sheet.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/sheet.html\",\"frontmatter\":{\"id\":\"sheet\",\"title\":\"🔦 语法速查表\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 语法速查表\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n ✅️ 定位语法\\r\\n\\r\\n 📌 基本用法\\r\\n\\r\\n|    写法     |       精确匹配        |    模糊匹配    |   匹配开头   |   匹配结尾   |                   说明                    |\\r\\n|:---------:|:-----------------:|:----------:|:--------:|:--------:|:------------------------------------\"},{\"url\":\"/dp/2.浏览器控制/元素定位/simplify.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/simplify.html\",\"frontmatter\":{\"id\":\"simplify\",\"title\":\"🔦 简化写法\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 简化写法\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n为进一步精简代码，定位语法都可以用简化形式来表示，使语句更短，链式操作时更清晰。\\r\\n\\r\\n ✅️ 定位符语法简化\\r\\n\\r\\n- 定位语法都有其简化形式\\r\\n- 页面和元素对象都实现了`__call__()`方法，所以`page.ele('')`可简化为`page('')`\\r\\n- 查找方法都支持链式操作\\r\\n\\r\\n示例：\\r\\n\\r\\n```python\\r\\n 查找tag为div的元素\\r\\nele = tab.ele('tag:div')   原写法\\r\\nele = tab('t:div')   简化写法\"},{\"url\":\"/dp/2.浏览器控制/元素定位/syntax.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/syntax.html\",\"frontmatter\":{\"id\":\"syntax\",\"title\":\"🔦 定位语法\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 定位语法\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"定位语法用于指明以哪种方式去查找指定元素，语法简洁明了，熟练使用可大幅提高程序可读性。\\r\\n\\r\\n所有涉及获取元素的操作都可以使用定位语法，如`ele()`、`actions.move_to()`、`wait.eles_loaded()`、`get_frame()`等等。\\r\\n\\r\\n定位语法用于简化代码，提高可读性，但并不覆盖所有复杂场景。很复杂的场景可直接用 xpath 查找。\\r\\n\\r\\n以下使用这个页面进行讲解。\\r\\n\\r\\n```html\\r\\n&lt;html\\r\\n&lt;body&gt;\\r\\n&lt;div id=\\\"one\\\"&gt;\\r\\n    &lt;p class=\\\"p_cls\\\" id=\\\"row1\\\" dat\"},{\"url\":\"/dp/3.下载/DownloadKit.html\",\"relativePath\":\"/dp/3.下载/DownloadKit.html\",\"frontmatter\":{\"id\":\"DownloadKit\",\"title\":\"⤵️ download方法\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"⤵️ download方法\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\nDrissionPage 每种页面对象都内置一个下载工具，提供任务管理、多线程并发、大文件分块、自动重连、文件名冲突处理等功能。\\r\\n\\r\\n该工具现已独立打包成一个库，名为 DownloadKit，详细介绍见：DownloadKit。\\r\\n\\r\\n这里只介绍其主要功能，具体使用和设置方法请移步该文档。\\r\\n\\r\\n ✅️️ 功能简介\\r\\n\\r\\n 📌 支持该工具的对象\\r\\n\\r\\n以下对象均支持\\r\\n\\r\\n- `SessionPage`\\r\\n- `ChromiumTab`\\r\\n- `MixTab`\\r\\n- `Ch\"},{\"url\":\"/dp/3.下载/browser.html\",\"relativePath\":\"/dp/3.下载/browser.html\",\"frontmatter\":{\"id\":\"browser\",\"title\":\"⤵️ 浏览器下载\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"⤵️ 浏览器下载\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n本节介绍对浏览器下载任务进行设置的功能。\\r\\n\\r\\n ✅️ 概述\\r\\n\\r\\n 📌 功能\\r\\n\\r\\nDrissionPage 提供以下功能，用于对浏览器下载任务进行控制：\\r\\n\\r\\n- 每个 tab 对象可独立设置文件保存路径\\r\\n- 下载前可指定文件名称，实现文件重命名\\r\\n- 可设置存在同名文件时的处理方式\\r\\n- 可获取任务下载进度\\r\\n- 可等待下载任务结束\\r\\n- 可取消任务\\r\\n- 可拦截下载任务并获取其信息\\r\\n\\r\\n---\\r\\n\\r\\n ⚠️ 注意事项\\r\\n\\r\\n 📌 记得等待任务结束\\r\\n\\r\\n因技术原\"},{\"url\":\"/dp/3.下载/intro.html\",\"relativePath\":\"/dp/3.下载/intro.html\",\"frontmatter\":{\"id\":\"intro\",\"title\":\"⤵️ 概述\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"⤵️ 概述\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\nDrissionPage 提供了强大的文件下载管理功能。\\r\\n\\r\\n能够主动发起下载任务，也能够对浏览器触发的下载任务进行管理。\\r\\n\\r\\n ✅️️ `download()`方法\\r\\n\\r\\n该方法可以主动发起下载任务，提供任务管理、多线程、大文件分块、自动重连、文件名冲突处理等功能。\\r\\n\\r\\n页面对象、`&lt;iframe&gt;`元素对象均支持此方法。\\r\\n\\r\\n此方法是封装 requests 实现的，下载时会自动同步 cookies。\\r\\n\\r\\n示例：\\r\\n\\r\\n```python\\r\\nfrom D\"},{\"url\":\"/api-examples.html\",\"relativePath\":\"/api-examples.html\",\"frontmatter\":{\"outline\":\"deep\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"Runtime API Examples\",\"date\":\"2025-09-25 10:07:04\",\"capture\":\"Runtime API Examples\\nThis page demonstrates usage of some of the runtime APIs provided by VitePress.\\nThe main `useData()` API can be used to access site, theme, and page data for the current page. It works in both `.md` and `.vue` files:\\n```md\\n&lt;script setup\\nimport { useData } from 'vitepress'\\ncon\"},{\"url\":\"/markdown-examples.html\",\"relativePath\":\"/markdown-examples.html\",\"frontmatter\":{},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"Markdown Extension Examples\",\"date\":\"2025-09-25 10:07:04\",\"capture\":\"This page demonstrates some of the built-in markdown extensions provided by VitePress.\\n Syntax Highlighting\\nVitePress provides Syntax Highlighting powered by Shiki, with additional features like line-highlighting:\\nInput\\n````md\\n```js{4}\\nexport default {\\n  data () {\\n    return {\\n      msg: 'Highlighte\"}]},\"groupPostsByYearMonth\":{\"2025 \":{\"09\":[{\"url\":\"/readme.html\",\"relativePath\":\"/readme.html\",\"frontmatter\":{},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"html\",\"date\":\"2025-09-25 12:42:06\",\"capture\":\"\"},{\"url\":\"/dp/1.🌷准备/1.intro.html\",\"relativePath\":\"/dp/1.🌷准备/1.intro.html\",\"frontmatter\":{\"id\":\"intro\",\"permalink\":\"/dp/prepare/intro\",\"title\":\" 基本概念\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\" 基本概念\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"⤵️DrissionPage 基本概念解析\\r\\n 一、网页自动化概述\\r\\n网页自动化主要存在两种常见形式，二者各有优劣，DrissionPage 对其进行了整合优化：\\r\\n\\r\\n|自动化形式|优势|劣势|典型工具/实现|\\r\\n| ---- | ---- | ---- | ---- |\\r\\n|直接向服务器发送数据包|轻量级、速度快，便于多线程与分布式部署|当数据包构成复杂或含加密技术时，开发难度大幅增加|requests 库|\\r\\n|控制浏览器与网页交互|能处理复杂页面交互（如点击、填写表单），无需深入解构数据包|运行速度受浏览器制约，较慢且占用内存多|传统 selenium|\\r\\n\\r\\nDrissionPage\"},{\"url\":\"/dp/1.🌷准备/2.install.html\",\"relativePath\":\"/dp/1.🌷准备/2.install.html\",\"frontmatter\":{\"id\":\"install\",\"permalink\":\"/dp/prepare/install\",\"title\":\"安装指南\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"安装指南\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"DrissionPage 安装指南\\r\\n本文档基于网页 http://drissionpage.cn/get_start/installation 内容整理，详细介绍 DrissionPage 的运行环境要求、安装步骤及版本升级方法，帮助用户快速完成工具部署。\\r\\n\\r\\n\\r\\n 一、运行环境要求\\r\\n在安装 DrissionPage 前，请确保本地环境满足以下条件，避免因环境不兼容导致工具无法正常使用：\\r\\n\\r\\n| 环境类别 | 具体要求 | 补充说明 |\\r\\n|----------|----------|----------|\\r\\n| 操作系统 | Windows、Linux、Mac | 支持主流桌面操作系\"},{\"url\":\"/dp/2.浏览器控制/actions.html\",\"relativePath\":\"/dp/2.浏览器控制/actions.html\",\"frontmatter\":{\"id\":\"actions\",\"title\":\"🛰️ 动作链\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 动作链\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"动作链可以在浏览器上完成一系列交互行为，如鼠标移动、鼠标点击、键盘输入等。\\r\\n\\r\\n浏览器页面对象都支持使用动作链。\\r\\n\\r\\n可以链式操作，也可以分开执行，每个动作执行即生效，无需`perform()`。\\r\\n\\r\\n这些操作皆为模拟，真正的鼠标不会移动，因此可以多个标签页同时操作。\\r\\n\\r\\n ✅️ 使用方法\\r\\n\\r\\n可以用上述对象内置的`actions`属性调用动作链，也可以主动创建一个动作链对象，将页面对象传入使用。\\r\\n\\r\\n这两种方式唯一区别是，前者会等待页面加载完毕再执行，后者不会。\\r\\n\\r\\n 📌 使用内置`actions`属性\\r\\n\\r\\n:::info 说明\\r\\n    这种方式会等到页面框架文档（不包括\"},{\"url\":\"/dp/2.浏览器控制/browser_object.html\",\"relativePath\":\"/dp/2.浏览器控制/browser_object.html\",\"frontmatter\":{\"id\":\"browser_object\",\"title\":\"🛰️ 浏览器对象\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 浏览器对象\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"我们已经了解如何创建浏览器对象，本节介绍浏览器对象的功能。\\r\\n\\r\\n:::note 说明\\r\\n    文中的 “Tab 对象” 是`ChromiumTab`和`MixTab`的统称。\\r\\n:::\\r\\n\\r\\n ✅️️ 获取标签页对象或信息\\r\\n\\r\\n 📌 `get_tab()`\\r\\n\\r\\n此方法用于获取一个标签页对象或它的 id。\\r\\n\\r\\n`id_or_num`不为`None`时，获取`id_or_num`指定的标签页。后面几个参数无效。\\r\\n\\r\\n`id_or_num`为`None`时，根据后面几个参数指定的条件查找标签页（与关系）。\\r\\n\\r\\n|    参数名称    |             类型        \"},{\"url\":\"/dp/2.浏览器控制/browser_options.html\",\"relativePath\":\"/dp/2.浏览器控制/browser_options.html\",\"frontmatter\":{\"id\":\"browser_options\",\"title\":\"🛰️ 浏览器启动设置\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 浏览器启动设置\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"浏览器的启动配置非常繁杂，本库使用`ChromiumOptions`类管理启动配置，并且内置了常用配置的设置接口。\\r\\n\\r\\n:::warning 注意\\r\\n    该对象只能用于浏览器的启动，浏览器启动后，再修改该配置没有任何效果。接管已打开的浏览器时，启动配置也是无效的。\\r\\n:::\\r\\n\\r\\n ✅️️ 创建对象\\r\\n\\r\\n 📌 导入\\r\\n\\r\\n```python\\r\\nfrom DrissionPage import ChromiumOptions\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n 📌 初始化参数\\r\\n\\r\\n`ChromiumOptions`对象用于管理浏览器初始化配置。可从配置文件中读取配置来进行初始化。\\r\\n\\r\"},{\"url\":\"/dp/2.浏览器控制/connect_browser.html\",\"relativePath\":\"/dp/2.浏览器控制/connect_browser.html\",\"frontmatter\":{\"id\":\"connect_browser\",\"title\":\"🛰️ 连接浏览器\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 连接浏览器\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"`Chromium`对象用于连接和管理浏览器。标签页的开关和获取、整体运行参数配置、浏览器信息获取等都由它进行。\\r\\n\\r\\n根据不同的配置，可以接管已打开的浏览器，也可以启动新的浏览器。\\r\\n\\r\\n每个浏览器只能有一个`Chromium`对象（同一进程中）。对同一个浏览器重复使用`Chromium()`获取的都是同一个对象。\\r\\n\\r\\n:::tip Tips\\r\\n    程序结束时，被打开的浏览器不会主动关闭（VSCode 启动的除外），以便下次运行程序时使用。\\r\\n    新手在使用无头模式时需注意，程序关闭后其实浏览器进程还在，只是看不见。\\r\\n:::\\r\\n\\r\\n ✅️ `Chromium`初始化参数\\r\\n\\r\\n|\"},{\"url\":\"/dp/2.浏览器控制/console.html\",\"relativePath\":\"/dp/2.浏览器控制/console.html\",\"frontmatter\":{\"id\":\"console\",\"title\":\"🛰️ 获取控制台信息\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 获取控制台信息\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n获取控制台信息的逻辑和监听网络数据差不多，是通过监听控制台数据实现的。\\r\\n\\r\\n:::warning 注意\\r\\n    不是所有显示在控制台的信息都能获取，需要用`console.log()`等方法输出到控制台的才能获取。\\r\\n:::\\r\\n\\r\\n ✅️ 示例\\r\\n\\r\\n```python\\r\\nfrom DrissionPage import Chromium\\r\\n\\r\\ntab = Chromium().latest_tab\\r\\ntab.console.start()\\r\\ntab.run_js('con\"},{\"url\":\"/dp/2.浏览器控制/docker.html\",\"relativePath\":\"/dp/2.浏览器控制/docker.html\",\"frontmatter\":{\"id\":\"docker\",\"title\":\"🛰️ 其他\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 其他\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"Docker 常用命令参考手册\\r\\n\\r\\n 镜像相关命令\\r\\n\\r\\n 搜索和拉取镜像\\r\\n```bash\\r\\n 搜索镜像\\r\\ndocker search nginx\\r\\n\\r\\n 拉取镜像\\r\\ndocker pull nginx\\r\\ndocker pull nginx:1.20   指定版本\\r\\n\\r\\n 查看本地镜像\\r\\ndocker images\\r\\ndocker image ls\\r\\n\\r\\n 删除镜像\\r\\ndocker rmi nginx\\r\\ndocker rmi image_id\\r\\n```\\r\\n 国内镜像源\\r\\n```bash\\r\\n\\r\\n\\r\\n 使用 Python 3.9 的 slim 版本作为基础镜像\\r\\nFROM docker.m.d\"},{\"url\":\"/dp/2.浏览器控制/ele_operation.html\",\"relativePath\":\"/dp/2.浏览器控制/ele_operation.html\",\"frontmatter\":{\"id\":\"ele_operation\",\"title\":\"🛰️ 元素交互\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 元素交互\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n本节介绍与浏览器元素的交互。浏览器元素对象为`ChromiumElement`。\\r\\n\\r\\n ✅️️ 点击元素\\r\\n\\r\\n 📌 `click()`和`click.left()`\\r\\n\\r\\n这两个方法作用是一样的，用于左键点击元素。可选择模拟点击或 js 点击。\\r\\n\\r\\n|    参数名称     |   类型    |   默认值   | 说明                                                                          \"},{\"url\":\"/dp/2.浏览器控制/get_ele_info.html\",\"relativePath\":\"/dp/2.浏览器控制/get_ele_info.html\",\"frontmatter\":{\"id\":\"get_ele_info\",\"title\":\"🛰️ 获取元素信息\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 获取元素信息\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"浏览器元素对应的对象是`ChromiumElement`和`ShadowRoot`，本节介绍如何获取元素信息。\\r\\n\\r\\n ✅️️ 内容和属性\\r\\n\\r\\n 📌 `tag`\\r\\n\\r\\n此属性返回元素的标签名。\\r\\n\\r\\n返回类型：`str`\\r\\n\\r\\n---\\r\\n\\r\\n 📌 `html`\\r\\n\\r\\n此属性返回元素的`outerHTML`文本。\\r\\n\\r\\n返回类型：`str`\\r\\n\\r\\n---\\r\\n\\r\\n 📌 `inner_html`\\r\\n\\r\\n此属性返回元素的`innerHTML`文本。\\r\\n\\r\\n返回类型：`str`\\r\\n\\r\\n---\\r\\n\\r\\n 📌 `text`\\r\\n\\r\\n此属性返回元素内所有文本组合成的字符串。  \\r\\n该字符串已格式化，即已\"},{\"url\":\"/dp/2.浏览器控制/get_page_info.html\",\"relativePath\":\"/dp/2.浏览器控制/get_page_info.html\",\"frontmatter\":{\"id\":\"get_page_info\",\"title\":\"🛰️ 获取网页信息\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 获取网页信息\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n成功访问网页后，可使用 Tab 对象属性和方法获取页面信息。\\r\\n\\r\\n ✅️️ 页面信息\\r\\n\\r\\n 📌 `html`\\r\\n\\r\\n此属性返回当前页面 html 文本。\\r\\n\\r\\n:::info 注意\\r\\n    html 文本不包含`&lt;iframe&gt;`元素内容。\\r\\n:::\\r\\n\\r\\n返回类型：`str`\\r\\n\\r\\n---\\r\\n\\r\\n 📌 `json`\\r\\n\\r\\n此属性把请求内容解析成 json。\\r\\n\\r\\n假如用浏览器访问会返回 `*.json` 文件的 url，浏览器会把 json 数据显示出来\"},{\"url\":\"/dp/2.浏览器控制/iframe.html\",\"relativePath\":\"/dp/2.浏览器控制/iframe.html\",\"frontmatter\":{\"id\":\"iframe\",\"title\":\"🛰️ iframe 操作\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ iframe 操作\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n`&lt;iframe&gt;`元素是一种特殊的元素，它既是元素，也是页面。\\r\\n\\r\\nDrissionPage 无需切入切出即可处理`&lt;iframe&gt;`元素。\\r\\n可实现跨级元素查找、元素内部单独跳转、同时操作`&lt;iframe&gt;`内外元素、多线程控制多个`&lt;iframe&gt;`等操作。\\r\\n\\r\\n ✅️ 获取`&lt;iframe&gt;`对象\\r\\n\\r\\n获取`&lt;iframe&gt;`对象的方法有两种，可用获取普通元素的方式获取，或者用`get_fra\"},{\"url\":\"/dp/2.浏览器控制/intro.html\",\"relativePath\":\"/dp/2.浏览器控制/intro.html\",\"frontmatter\":{\"id\":\"intro\",\"title\":\"🛰️ 概述\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 概述\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n ✅️️ 基本逻辑\\r\\n\\r\\n操作浏览器的基本逻辑如下：\\r\\n\\r\\n1. 创建浏览器对象，用于启动或接管浏览器\\r\\n2. 获取一个 Tab 对象\\r\\n3. 使用 Tab 对象访问网址\\r\\n4. 使用 Tab 对象获取标签页内需要的元素对象\\r\\n5. 使用元素对象进行交互\\r\\n\\r\\n除此以外，还能执行更为复杂的操作，如执行 js 代码、监听网络数据、下载文件等。这些在后面的章节再介绍。\\r\\n\\r\\n示例： 在百度搜索 “Drissionpage”，并打印结果。\\r\\n\\r\\n```python\\r\\n 导入\\r\\nfro\"},{\"url\":\"/dp/2.浏览器控制/listener.html\",\"relativePath\":\"/dp/2.浏览器控制/listener.html\",\"frontmatter\":{\"id\":\"listener\",\"title\":\"🛰️ 监听网络数据\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 监听网络数据\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n许多网页的数据来自接口，在网站使用过程中动态加载，如使用 JS 加载内容的翻页列表。\\r\\n\\r\\n这些数据通常以 json 形式发送，浏览器接收后，对其进行解析，再加载到 DOM 相应位置。\\r\\n\\r\\n做数据采集的时候，我们往往从 DOM 中去获取解析后数据的，可能存在数据不全、加载响应不及时、难以判断加载完成等问题。\\r\\n\\r\\n如果我们可以拿到浏览器收发的数据包，根据数据包状态判断下一步操作，甚至直接获取数据，岂不是爽爆了？\\r\\n\\r\\nDrissionPage 每个页面对象（包括 Tab 和 \"},{\"url\":\"/dp/2.浏览器控制/mode_change.html\",\"relativePath\":\"/dp/2.浏览器控制/mode_change.html\",\"frontmatter\":{\"id\":\"mode_change\",\"title\":\"🛰️ 模式切换\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 模式切换\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n`MixTab`和`WebPage`有两种模式，d 模式用于控制浏览器，s 模式使用`requests`收发数据包。\\r\\n\\r\\n两种模式访问页面和提取数据的逻辑是一致的，使用同一套 api。\\r\\n\\r\\n每个标签页对象创建时都处于 d 模式。\\r\\n\\r\\n使用`change_mode()`方法进行切换。模式切换的时候会同步登录信息。\\r\\n\\r\\ns 模式下仍然可以控制浏览器，但因为共用 api，`ele()`等两种模式共用的方法，查找对象是`requests`的结果，而非浏览器。\\r\\n\\r\\n因此 s 模\"},{\"url\":\"/dp/2.浏览器控制/page_operation.html\",\"relativePath\":\"/dp/2.浏览器控制/page_operation.html\",\"frontmatter\":{\"id\":\"page_operation\",\"title\":\"🛰️ 页面交互\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 页面交互\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n本节介绍浏览器页面交互功能。\\r\\n\\r\\n一个 Tab 对象控制一个浏览器的标签页，是页面控制的主要单位。\\r\\n\\r\\n ✅️️ 页面跳转\\r\\n\\r\\n 📌 `get()`\\r\\n\\r\\n详见 “访问网页” 章节。\\r\\n\\r\\n---\\r\\n\\r\\n 📌 `back()`\\r\\n\\r\\n此方法用于在浏览历史中后退若干步。\\r\\n\\r\\n|  参数名称   |  类型   | 默认值 | 说明   |\\r\\n|:-------:|:-----:|:---:|------|\\r\\n| `steps` | `int` | `1` | 后退步数\"},{\"url\":\"/dp/2.浏览器控制/pages.html\",\"relativePath\":\"/dp/2.浏览器控制/pages.html\",\"frontmatter\":{\"id\":\"pages\",\"title\":\"🛰️ Page 对象\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ Page 对象\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n`ChromiumPage`和`WebPage`是 4.1 之前用于连接和控制浏览器的对象。\\r\\n\\r\\n4.1 这些功能由`Chromium`实现，但`ChromiumPage`和`WebPage`仍能正常使用。\\r\\n\\r\\n对比`Chromium`，`ChromiumPage`和`WebPage`在连接浏览器时可以少写一行代码，但在多标签页操作的时候容易造成混乱。\\r\\n\\r\\n更详细的用法可以看旧版文档。\\r\\n\\r\\n ✅️️ `ChromiumPage`\\r\\n\\r\\n`ChromiumPage`把浏览\"},{\"url\":\"/dp/2.浏览器控制/screen.html\",\"relativePath\":\"/dp/2.浏览器控制/screen.html\",\"frontmatter\":{\"id\":\"screen\",\"title\":\"🛰️ 截图和录像\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 截图和录像\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n ✅️️ 页面截图\\r\\n\\r\\n使用页面对象的`get_screenshot()`方法对页面进行截图，可对整个网页、可见网页、指定范围截图。\\r\\n\\r\\n对可视范围外截图需要 90 以上版本浏览器支持。\\r\\n\\r\\n下面三个参数三选一，优先级：`as_bytes`&gt;`as_base64`&gt;`path`。\\r\\n\\r\\n| 参数名称           | 类型                | 默认值     | 说明                                     \"},{\"url\":\"/dp/2.浏览器控制/tabs.html\",\"relativePath\":\"/dp/2.浏览器控制/tabs.html\",\"frontmatter\":{\"id\":\"tabs\",\"title\":\"🛰️ 标签页管理\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 标签页管理\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n浏览器的标签页由 Tab 对象（`ChromiumTab`和`MixTab`）控制。\\r\\n\\r\\n与网页的交互都由标签页对象进行。\\r\\n\\r\\n默认情况下，一个标签页由一个 Tab 对象控制。\\r\\n\\r\\n多个 Tab 对象可以同时操作，不需要切换焦点，也不需要激活到前台。\\r\\n\\r\\n:::tip 提醒\\r\\n    当禁用单例模式后，一个标签页也可以被多个 Tab 对象同时控制。\\r\\n:::\\r\\n\\r\\n ✅️️ 获取标签页对象\\r\\n\\r\\n 📌 获取最后激活的标签页\\r\\n\\r\\n`Chromium`对象的`lates\"},{\"url\":\"/dp/2.浏览器控制/upload.html\",\"relativePath\":\"/dp/2.浏览器控制/upload.html\",\"frontmatter\":{\"id\":\"upload\",\"title\":\"🛰️ 上传文件\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 上传文件\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n上传文件有两种方式：\\r\\n\\r\\n- 拦截文件输入框，自动填入路径\\r\\n- 找到`&lt;input&gt;`元素，填入文件路径\\r\\n\\r\\n ✅️️ 自然的交互\\r\\n\\r\\n传统自动化工具的文件上传，需要开发者在 DOM 里找到文件上传控件，然后用元素对象的`input()`方法填入路径。\\r\\n\\r\\n有些上传控件是临时加载的，有些藏得很深，找起来费时费力。\\r\\n\\r\\n本库提供一种自然的文件上传方式，无需在 DOM 里找控件，只要自然地点击触发文件选择框，程序就能主动截获，并填写设定好的路径，开发更省事。\"},{\"url\":\"/dp/2.浏览器控制/visit.html\",\"relativePath\":\"/dp/2.浏览器控制/visit.html\",\"frontmatter\":{\"id\":\"visit\",\"title\":\"🛰️ 访问网页\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 访问网页\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n本节介绍 Tab 对象访问网页的相关内容。\\r\\n\\r\\n ✅️️ 连接方法\\r\\n\\r\\n 📌 `get()`\\r\\n\\r\\n该方法用于跳转到一个网址。当连接失败时，程序会进行重试。\\r\\n\\r\\n可指定本地文件路径。\\r\\n\\r\\n|       参数名称        | 类型               | 默认值     | 说明                                                    |\\r\\n|:-----------------:|:------------\"},{\"url\":\"/dp/2.浏览器控制/waiting.html\",\"relativePath\":\"/dp/2.浏览器控制/waiting.html\",\"frontmatter\":{\"id\":\"waiting\",\"title\":\"🛰️ 等待\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🛰️ 等待\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n网络环境不稳定，页面 js 运行时间也难以确定，自动化过程中经常遇到需要等待的情况。\\r\\n\\r\\n如果总是用`sleep()`，显得不太优雅，等待多了浪费时间，等待不够会导致报错。\\r\\n\\r\\n因此，程序能够智能等待是非常重要的，DrissionPage 内置了一些等待方法，可以提高程序稳定性和效率。\\r\\n\\r\\n它们藏在页面对象和元素对象的`wait`属性里。\\r\\n\\r\\n等待方法均有`timeout`参数，可自行设得超时时间，也可以设置超时后返回`False`还是抛出异常。\\r\\n\\r\\n ✅️️ 浏览器\"},{\"url\":\"/dp/2.浏览器控制/元素定位/behavior.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/behavior.html\",\"frontmatter\":{\"id\":\"behavior\",\"title\":\"🔦 行为模式\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 行为模式\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"✅️ 等待元素\\r\\n\\r\\n由于网络、js 运行时间的不确定性，经常需要等待元素加载到 DOM 中才能使用。\\r\\n\\r\\n浏览器所有查找元素操作都自带等待，时间默认跟随元素所在页面`timeout`属性（默认 10 秒），也可以在每次查找时单独设置，单独设置的等待时间不会改变页面原来设置。\\r\\n\\r\\n 📌 内置等待\\r\\n\\r\\n```python\\r\\nfrom DrissionPage import Chromium\\r\\n\\r\\ntab = Chromium().latest_tab\\r\\n 设置查找元素超时时间为 5 秒\\r\\ntab.set.timeouts(5)\\r\\n\\r\\n 使用页面超时时间来查找元素（5 秒）\\r\\nele1 =\"},{\"url\":\"/dp/2.浏览器控制/元素定位/filter.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/filter.html\",\"frontmatter\":{\"id\":\"filter\",\"title\":\"🔦 在结果列表中筛选\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 在结果列表中筛选\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"本节介绍在元素列表中按需要进行筛选，获取指定元素。\\r\\n\\r\\n`eles()`、`nexts()`等能够获取多个元素的方法，返回的列表可进行进一步筛选，以获取指定的元素。\\r\\n\\r\\n:::info 说明\\r\\n    浏览器页面对象和`SessionPage`产生的元素列表均有此功能，前者筛选功能比后者多。\\r\\n:::\\r\\n\\r\\n示例1，筛选并返回元素列表：\\r\\n\\r\\n```python\\r\\nfrom DrissionPage import Chromium\\r\\n\\r\\ntab = Chromium().latest_tab\\r\\ntab.get('https://www.baidu.com')\\r\\neles = tab('s-\"},{\"url\":\"/dp/2.浏览器控制/元素定位/find_in_object.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/find_in_object.html\",\"frontmatter\":{\"id\":\"find_in_object\",\"title\":\"🔦 页面或元素内查找\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 页面或元素内查找\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"✅️️ 页面或元素内查找\\r\\n\\r\\n页面对象和元素对象都拥有`ele()`和`eles()`方法，用于获取其内部指定子元素。\\r\\n\\r\\n 📌 `ele()`\\r\\n\\r\\n用于查找其内部第一个符合条件的元素。\\r\\n\\r\\n`SessionPage`和`ChromiumPage`获取元素的方法是一致的，但前者返回的元素对象为`SessionElement`，后者是`ChromiumElement`。\\r\\n\\r\\n|         参数名称         |                        类型                        |  默认值   | 说明                   \"},{\"url\":\"/dp/2.浏览器控制/元素定位/intro.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/intro.html\",\"frontmatter\":{\"id\":\"intro\",\"title\":\"🔦 概述\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 概述\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n定位元素是自动化重中之重的技能。  \\r\\n虽然可在开发者工具直接复制绝对路径，但这样做有几个缺点：\\r\\n\\r\\n- 代码冗长，可读性低\\r\\n- 动态页面容易导致元素失效\\r\\n- 无法使用相对定位\\r\\n- 网页稍有改动或者出现临时元素就不能用，容错性低\\r\\n- 无法跨`&lt;iframe&gt;`查找元素\\r\\n\\r\\n因此作者极不建议使用右键复制的元素路径。\\r\\n\\r\\n本库提供一套简洁易用的语法，用于快速定位元素，并且内置等待功能、支持链式查找，减少了代码的复杂性。  \\r\\n同时也兼容 css selec\"},{\"url\":\"/dp/2.浏览器控制/元素定位/relative.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/relative.html\",\"frontmatter\":{\"id\":\"relative\",\"title\":\"🔦 相对定位\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 相对定位\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"相对定位的意思是以一个已获取的元素为基准，按需要使用不同方法获取指定的其它元素。\\r\\n\\r\\n相对定位有基于 DOM 的方式和基于视觉的方式两种\\r\\n\\r\\n ✅️️ 基于 DOM 相对定位\\r\\n\\r\\n以下方法可以以某元素为基准，在 DOM 中按照条件获取其直接子节点、同级节点、祖先元素、文档前后节点。  \\r\\n\\r\\n这里说的是 “节点”，不是 “元素”。因为相对定位可以获取除元素外的其它节点，包括文本、注释节点。\\r\\n\\r\\n:::warning 注意\\r\\n    如果元素在`&lt;iframe\\r\\n:::\\r\\n\\r\\n 📌 获取父级元素\\r\\n\\r\\n🔸 `parent()`\\r\\n\\r\\n此方法获取当前元素某一级父元素，可指定筛选条\"},{\"url\":\"/dp/2.浏览器控制/元素定位/sheet.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/sheet.html\",\"frontmatter\":{\"id\":\"sheet\",\"title\":\"🔦 语法速查表\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 语法速查表\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n ✅️ 定位语法\\r\\n\\r\\n 📌 基本用法\\r\\n\\r\\n|    写法     |       精确匹配        |    模糊匹配    |   匹配开头   |   匹配结尾   |                   说明                    |\\r\\n|:---------:|:-----------------:|:----------:|:--------:|:--------:|:------------------------------------\"},{\"url\":\"/dp/2.浏览器控制/元素定位/simplify.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/simplify.html\",\"frontmatter\":{\"id\":\"simplify\",\"title\":\"🔦 简化写法\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 简化写法\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n为进一步精简代码，定位语法都可以用简化形式来表示，使语句更短，链式操作时更清晰。\\r\\n\\r\\n ✅️ 定位符语法简化\\r\\n\\r\\n- 定位语法都有其简化形式\\r\\n- 页面和元素对象都实现了`__call__()`方法，所以`page.ele('')`可简化为`page('')`\\r\\n- 查找方法都支持链式操作\\r\\n\\r\\n示例：\\r\\n\\r\\n```python\\r\\n 查找tag为div的元素\\r\\nele = tab.ele('tag:div')   原写法\\r\\nele = tab('t:div')   简化写法\"},{\"url\":\"/dp/2.浏览器控制/元素定位/syntax.html\",\"relativePath\":\"/dp/2.浏览器控制/元素定位/syntax.html\",\"frontmatter\":{\"id\":\"syntax\",\"title\":\"🔦 定位语法\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"🔦 定位语法\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"定位语法用于指明以哪种方式去查找指定元素，语法简洁明了，熟练使用可大幅提高程序可读性。\\r\\n\\r\\n所有涉及获取元素的操作都可以使用定位语法，如`ele()`、`actions.move_to()`、`wait.eles_loaded()`、`get_frame()`等等。\\r\\n\\r\\n定位语法用于简化代码，提高可读性，但并不覆盖所有复杂场景。很复杂的场景可直接用 xpath 查找。\\r\\n\\r\\n以下使用这个页面进行讲解。\\r\\n\\r\\n```html\\r\\n&lt;html\\r\\n&lt;body&gt;\\r\\n&lt;div id=\\\"one\\\"&gt;\\r\\n    &lt;p class=\\\"p_cls\\\" id=\\\"row1\\\" dat\"},{\"url\":\"/dp/3.下载/DownloadKit.html\",\"relativePath\":\"/dp/3.下载/DownloadKit.html\",\"frontmatter\":{\"id\":\"DownloadKit\",\"title\":\"⤵️ download方法\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"⤵️ download方法\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\nDrissionPage 每种页面对象都内置一个下载工具，提供任务管理、多线程并发、大文件分块、自动重连、文件名冲突处理等功能。\\r\\n\\r\\n该工具现已独立打包成一个库，名为 DownloadKit，详细介绍见：DownloadKit。\\r\\n\\r\\n这里只介绍其主要功能，具体使用和设置方法请移步该文档。\\r\\n\\r\\n ✅️️ 功能简介\\r\\n\\r\\n 📌 支持该工具的对象\\r\\n\\r\\n以下对象均支持\\r\\n\\r\\n- `SessionPage`\\r\\n- `ChromiumTab`\\r\\n- `MixTab`\\r\\n- `Ch\"},{\"url\":\"/dp/3.下载/browser.html\",\"relativePath\":\"/dp/3.下载/browser.html\",\"frontmatter\":{\"id\":\"browser\",\"title\":\"⤵️ 浏览器下载\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"⤵️ 浏览器下载\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\n本节介绍对浏览器下载任务进行设置的功能。\\r\\n\\r\\n ✅️ 概述\\r\\n\\r\\n 📌 功能\\r\\n\\r\\nDrissionPage 提供以下功能，用于对浏览器下载任务进行控制：\\r\\n\\r\\n- 每个 tab 对象可独立设置文件保存路径\\r\\n- 下载前可指定文件名称，实现文件重命名\\r\\n- 可设置存在同名文件时的处理方式\\r\\n- 可获取任务下载进度\\r\\n- 可等待下载任务结束\\r\\n- 可取消任务\\r\\n- 可拦截下载任务并获取其信息\\r\\n\\r\\n---\\r\\n\\r\\n ⚠️ 注意事项\\r\\n\\r\\n 📌 记得等待任务结束\\r\\n\\r\\n因技术原\"},{\"url\":\"/dp/3.下载/intro.html\",\"relativePath\":\"/dp/3.下载/intro.html\",\"frontmatter\":{\"id\":\"intro\",\"title\":\"⤵️ 概述\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"⤵️ 概述\",\"date\":\"2025-09-25 10:35:43\",\"capture\":\"&lt;div class=\\\"wwads-cn wwads-horizontal\\\" data-id=\\\"317\\\"\\r\\n\\r\\nDrissionPage 提供了强大的文件下载管理功能。\\r\\n\\r\\n能够主动发起下载任务，也能够对浏览器触发的下载任务进行管理。\\r\\n\\r\\n ✅️️ `download()`方法\\r\\n\\r\\n该方法可以主动发起下载任务，提供任务管理、多线程、大文件分块、自动重连、文件名冲突处理等功能。\\r\\n\\r\\n页面对象、`&lt;iframe&gt;`元素对象均支持此方法。\\r\\n\\r\\n此方法是封装 requests 实现的，下载时会自动同步 cookies。\\r\\n\\r\\n示例：\\r\\n\\r\\n```python\\r\\nfrom D\"},{\"url\":\"/api-examples.html\",\"relativePath\":\"/api-examples.html\",\"frontmatter\":{\"outline\":\"deep\"},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"Runtime API Examples\",\"date\":\"2025-09-25 10:07:04\",\"capture\":\"Runtime API Examples\\nThis page demonstrates usage of some of the runtime APIs provided by VitePress.\\nThe main `useData()` API can be used to access site, theme, and page data for the current page. It works in both `.md` and `.vue` files:\\n```md\\n&lt;script setup\\nimport { useData } from 'vitepress'\\ncon\"},{\"url\":\"/markdown-examples.html\",\"relativePath\":\"/markdown-examples.html\",\"frontmatter\":{},\"author\":{\"name\":\"g1879\",\"link\":\"https://github.com/g1879\"},\"title\":\"Markdown Extension Examples\",\"date\":\"2025-09-25 10:07:04\",\"capture\":\"This page demonstrates some of the built-in markdown extensions provided by VitePress.\\n Syntax Highlighting\\nVitePress provides Syntax Highlighting powered by Shiki, with additional features like line-highlighting:\\nInput\\n````md\\n```js{4}\\nexport default {\\n  data () {\\n    return {\\n      msg: 'Highlighte\"}]}},\"groupPosts\":{\"categories\":{},\"tags\":{}},\"groupCards\":{\"categories\":[],\"tags\":[]}}},\"locales\":{},\"scrollOffset\":134,\"cleanUrls\":false}"));