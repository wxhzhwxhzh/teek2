import{_ as e,c as d,o as a,aN as i}from"./chunks/framework.0ZSa6Wd7.js";const g=JSON.parse('{"title":"🛰️ 等待","description":"","frontmatter":{"id":"waiting","title":"🛰️ 等待"},"headers":[],"relativePath":"dp/2.浏览器控制/waiting.md","filePath":"dp/2.浏览器控制/waiting.md"}'),n={name:"dp/2.浏览器控制/waiting.md"};function s(l,t,o,c,r,h){return a(),d("div",null,[...t[0]||(t[0]=[i('<h1 id="🛰️-等待" tabindex="-1">🛰️ 等待 <a class="header-anchor" href="#🛰️-等待" aria-label="Permalink to &quot;🛰️ 等待&quot;">​</a></h1><div class="wwads-cn wwads-horizontal" data-id="317"></div><br><p>网络环境不稳定，页面 js 运行时间也难以确定，自动化过程中经常遇到需要等待的情况。</p><p>如果总是用<code>sleep()</code>，显得不太优雅，等待多了浪费时间，等待不够会导致报错。</p><p>因此，程序能够智能等待是非常重要的，DrissionPage 内置了一些等待方法，可以提高程序稳定性和效率。</p><p>它们藏在页面对象和元素对象的<code>wait</code>属性里。</p><p>等待方法均有<code>timeout</code>参数，可自行设得超时时间，也可以设置超时后返回<code>False</code>还是抛出异常。</p><h2 id="✅️️-浏览器对象的等待方法" tabindex="-1">✅️️ 浏览器对象的等待方法 <a class="header-anchor" href="#✅️️-浏览器对象的等待方法" aria-label="Permalink to &quot;✅️️ 浏览器对象的等待方法&quot;">​</a></h2><h3 id="📌-wait-new-tab" tabindex="-1">📌 <code>wait.new_tab()</code> <a class="header-anchor" href="#📌-wait-new-tab" aria-label="Permalink to &quot;📌 `wait.new_tab()`&quot;">​</a></h3><p>此方法用于等待新标签页出现。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>超时时间（秒），为<code>None</code>时使用页面<code>timeout</code>设置</td></tr><tr><td style="text-align:center;"><code>curr_tab</code></td><td style="text-align:center;"><code>str</code><br><code>ChromiumTab</code><br><code>MixTab</code></td><td style="text-align:center;"><code>None</code></td><td>指定当前最新的 Tab 对象或标签页 id，用于判断新标签页出现，为<code>None</code>自动获取</td></tr><tr><td style="text-align:center;"><code>raise_err</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>None</code></td><td>等待失败时是否报错，为<code>None</code>时根据<code>Settings</code>设置</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>str</code></td><td>等待成返回新标签页 id</td></tr><tr><td style="text-align:center;"><code>False</code></td><td>等待失败返回<code>False</code></td></tr></tbody></table><hr><h3 id="📌-wait-download-begin" tabindex="-1">📌 <code>wait.download_begin()</code> <a class="header-anchor" href="#📌-wait-download-begin" aria-label="Permalink to &quot;📌 `wait.download_begin()`&quot;">​</a></h3><p>此方法用于等待浏览器一个下载任务开始，详见下载功能章节。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>超时时间（秒），为<code>None</code>时使用页面<code>timeout</code>设置</td></tr><tr><td style="text-align:center;"><code>cancel_it</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>False</code></td><td>是否取消该任务</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>DownloadMission</code></td><td>等待成功返回下载任务对象</td></tr><tr><td style="text-align:center;"><code>False</code></td><td>等待失败</td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#download_btn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).click()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 点击按钮触发下载</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.wait.download_begin()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 等待下载开始</span></span></code></pre></div><hr><h3 id="📌-wait-downloads-done" tabindex="-1">📌 <code>wait.downloads_done()</code> <a class="header-anchor" href="#📌-wait-downloads-done" aria-label="Permalink to &quot;📌 `wait.downloads_done()`&quot;">​</a></h3><p>此方法用于等待浏览器所有下载任务完成，详见下载功能章节。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>超时时间（秒），为<code>None</code>时无限等待</td></tr><tr><td style="text-align:center;"><code>cancel_if_timeout</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>True</code></td><td>超时时是否取消剩余任务</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>bool</code></td><td>是否等待成功</td></tr></tbody></table><hr><h2 id="✅️️-页面对象的等待方法" tabindex="-1">✅️️ 页面对象的等待方法 <a class="header-anchor" href="#✅️️-页面对象的等待方法" aria-label="Permalink to &quot;✅️️ 页面对象的等待方法&quot;">​</a></h2><p>页面对象指<code>ChromiumTab</code>、<code>MixTab</code>和<code>ChromiumFrame</code>。</p><p><strong>用法：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium().latest_tab</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://DrissionPage.cn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.wait.ele_displayed(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tag:div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="📌-wait-load-start" tabindex="-1">📌 <code>wait.load_start()</code> <a class="header-anchor" href="#📌-wait-load-start" aria-label="Permalink to &quot;📌 `wait.load_start()`&quot;">​</a></h3><p>此方法用于等待页面进入加载状态。<br> 我们经常会通过点击元素进入下一个网页，并立刻获取新页面的元素。<br> 但若跳转前的页面拥有和跳转后页面相同定位符的元素，会导致过早获取元素，跳转后失效的问题。<br> 使用此方法，会阻塞程序，等待页面开始加载后再继续，从而避免上述问题。<br> 我们通常只需等待页面加载开始，程序会自动等待加载结束。</p><div class="info custom-block"><p class="custom-block-title">注意</p><pre><code>`get()`已内置等待加载开始，后无须跟`wait.load_start()`。\n</code></pre></div><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code><br><code>None</code><br><code>True</code></td><td style="text-align:center;"><code>None</code></td><td>超时时间（秒），为<code>None</code>或<code>Ture</code>时使用页面<code>timeout</code>设置<br>为数字时等待相应时间</td></tr><tr><td style="text-align:center;"><code>raise_err</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>None</code></td><td>等待失败时是否报错，为<code>None</code>时根据<code>Settings</code>设置</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>bool</code></td><td>等待结束时是否进入加载状态</td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele.click()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 点击某个元素</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.wait.load_start()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 等待页面进入加载状态</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 执行在新页面的操作</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(page.title)</span></span></code></pre></div><hr><h3 id="📌-wait-doc-loaded" tabindex="-1">📌 <code>wait.doc_loaded()</code> <a class="header-anchor" href="#📌-wait-doc-loaded" aria-label="Permalink to &quot;📌 `wait.doc_loaded()`&quot;">​</a></h3><p>此方法用于等待页面文档加载完成。<br> 一般来说都无需开发者使用，程序大部分动作都会自动等待加载完成再执行。</p><div class="info custom-block"><p class="custom-block-title">注意</p><pre><code>- 此功能仅用于等待页面主 document 加载，不能用于等待 js 加载的变化。\n- 除非`load_mode`为`None`，`get()`方法已内置等待加载完成，后面无须添加等待。\n</code></pre></div><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code><br><code>None</code><br><code>True</code></td><td style="text-align:center;"><code>None</code></td><td>超时时间（秒），为<code>None</code>或<code>Ture</code>时使用页面<code>timeout</code>设置<br>为数字时等待相应时间</td></tr><tr><td style="text-align:center;"><code>raise_err</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>None</code></td><td>等待失败时是否报错，为<code>None</code>时根据<code>Settings</code>设置</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>bool</code></td><td>等待结束时是否完成加载完成</td></tr></tbody></table><hr><h3 id="📌-wait-eles-loaded" tabindex="-1">📌 <code>wait.eles_loaded()</code> <a class="header-anchor" href="#📌-wait-eles-loaded" aria-label="Permalink to &quot;📌 `wait.eles_loaded()`&quot;">​</a></h3><p>此方法用于等待元素被加载到 DOM，可等待全部或任意一个加载。<br> 有时一个元素的正常出现是下一步操作的前提，用此方法可以防止一些元素加载速度慢于程序动作速度导致的误操作。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>locator</code></td><td style="text-align:center;"><code>str</code><br><code>Tuple[str, str]</code><br><code>list</code></td><td style="text-align:center;">必填</td><td>要等待的元素，定位符</td></tr><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>超时时间（秒），为<code>None</code>时使用页面<code>timeout</code>设置</td></tr><tr><td style="text-align:center;"><code>any_one</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>False</code></td><td>是否等待到一个就返回</td></tr><tr><td style="text-align:center;"><code>raise_err</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>None</code></td><td>等待失败时是否报错，为<code>None</code>时根据<code>Settings</code>设置</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>bool</code></td><td>是否等待成功</td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele1.click()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 点击某个元素</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">page.wait.eles_loaded(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#div1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 等待 id 为 div1 的元素加载</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele2.click()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># div1 加载完成后再执行下一步操作</span></span></code></pre></div><hr><h3 id="📌-wait-ele-displayed" tabindex="-1">📌 <code>wait.ele_displayed()</code> <a class="header-anchor" href="#📌-wait-ele-displayed" aria-label="Permalink to &quot;📌 `wait.ele_displayed()`&quot;">​</a></h3><p>此方法用于等待一个元素变成显示状态。<br> 如果当前 DOM 中查找不到指定元素，则会自动等待元素加载，再等待它显示。<br> 元素隐藏是指元素在 DOM 内，但处于隐藏状态（即使在视口内且不被遮挡）。<br> 父元素隐藏时子元素也是隐藏的。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>loc_or_ele</code></td><td style="text-align:center;"><code>str</code><br><code>Tuple[str, str]</code><br><code>ChromiumElement</code></td><td style="text-align:center;">必填</td><td>要等待的元素，可以是元素或定位符</td></tr><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>超时时间（秒），为<code>None</code>时使用页面<code>timeout</code>设置</td></tr><tr><td style="text-align:center;"><code>raise_err</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>None</code></td><td>等待失败时是否报错，为<code>None</code>时根据<code>Settings</code>设置</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>bool</code></td><td>是否等待成功</td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 等待 id 为 div1 的元素显示，超时使用页面设置</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.wait.ele_displayed(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#div1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 等待 id 为 div1 的元素显示，设置超时3秒</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.wait.ele_displayed(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#div1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">timeout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 等待已获取到的元素被显示</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab.ele(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#div1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.wait.ele_displayed(ele)</span></span></code></pre></div><hr><h3 id="📌-wait-ele-hidden" tabindex="-1">📌 <code>wait.ele_hidden()</code> <a class="header-anchor" href="#📌-wait-ele-hidden" aria-label="Permalink to &quot;📌 `wait.ele_hidden()`&quot;">​</a></h3><p>此方法用于等待一个元素变成隐藏状态。<br> 如果当前 DOM 中查找不到指定元素，则会自动等待元素加载，再等待它隐藏。<br> 元素隐藏是指元素在 DOM 内，但处于隐藏状态（即使在视口内且不被遮挡）。<br> 父元素隐藏时子元素也是隐藏的。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>loc_or_ele</code></td><td style="text-align:center;"><code>str</code><br><code>Tuple[str, str]</code><br><code>ChromiumElement</code></td><td style="text-align:center;">必填</td><td>要等待的元素，可以是元素或定位符</td></tr><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>超时时间（秒），为<code>None</code>时使用页面<code>timeout</code>设置</td></tr><tr><td style="text-align:center;"><code>raise_err</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>None</code></td><td>等待失败时是否报错，为<code>None</code>时根据<code>Settings</code>设置</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>bool</code></td><td>是否等待成功</td></tr></tbody></table><hr><h3 id="📌-wait-ele-deleted" tabindex="-1">📌 <code>wait.ele_deleted()</code> <a class="header-anchor" href="#📌-wait-ele-deleted" aria-label="Permalink to &quot;📌 `wait.ele_deleted()`&quot;">​</a></h3><p>此方法用于等待一个元素被从 DOM 中删除。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>loc_or_ele</code></td><td style="text-align:center;"><code>str</code><br><code>Tuple[str, str]</code><br><code>ChromiumElement</code></td><td style="text-align:center;">必填</td><td>要等待的元素，可以是元素或定位符</td></tr><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>超时时间（秒），为<code>None</code>时使用页面<code>timeout</code>设置</td></tr><tr><td style="text-align:center;"><code>raise_err</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>None</code></td><td>等待失败时是否报错，为<code>None</code>时根据<code>Settings</code>设置</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>bool</code></td><td>是否等待成功</td></tr></tbody></table><hr><h3 id="📌-wait-download-begin-1" tabindex="-1">📌 <code>wait.download_begin()</code> <a class="header-anchor" href="#📌-wait-download-begin-1" aria-label="Permalink to &quot;📌 `wait.download_begin()`&quot;">​</a></h3><p>此方法用于等待下载开始，详见下载功能章节。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>超时时间（秒），为<code>None</code>时使用页面<code>timeout</code>设置</td></tr><tr><td style="text-align:center;"><code>cancel_it</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>False</code></td><td>是否取消该任务</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>DownloadMission</code></td><td>等待成功返回下载任务对象</td></tr><tr><td style="text-align:center;"><code>False</code></td><td>等待失败</td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#download_btn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).click()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 点击按钮触发下载</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.wait.download_begin()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 等待下载开始</span></span></code></pre></div><hr><h3 id="📌-wait-downloads-done-1" tabindex="-1">📌 <code>wait.downloads_done()</code> <a class="header-anchor" href="#📌-wait-downloads-done-1" aria-label="Permalink to &quot;📌 `wait.downloads_done()`&quot;">​</a></h3><p>此方法用于等待本标签页所有下载任务完成，详见下载功能章节。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>超时时间（秒），为<code>None</code>时无限等待</td></tr><tr><td style="text-align:center;"><code>cancel_if_timeout</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>True</code></td><td>超时时是否取消剩余任务</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumTab</code></td><td><code>ChromiumTab</code>对象等待成功返回自己</td></tr><tr><td style="text-align:center;"><code>MixTab</code></td><td><code>MixTab</code>对象等待成功返回自己</td></tr><tr><td style="text-align:center;"><code>False</code></td><td>等待失败</td></tr></tbody></table><hr><h3 id="📌-wait-upload-paths-inputted" tabindex="-1">📌 <code>wait.upload_paths_inputted()</code> <a class="header-anchor" href="#📌-wait-upload-paths-inputted" aria-label="Permalink to &quot;📌 `wait.upload_paths_inputted()`&quot;">​</a></h3><p>此方法用于等待自动填写上传文件路径。详见文件上传章节。</p><p><strong>参数：</strong> 无</p><p><strong>返回：</strong><code>None</code></p><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置要上传的文件路径</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.set.upload_files(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;demo.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 点击触发文件选择框按钮</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">btn_ele.click()</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 等待路径填入</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.wait.upload_paths_inputted()</span></span></code></pre></div><hr><h3 id="📌-wait-title-change" tabindex="-1">📌 <code>wait.title_change()</code> <a class="header-anchor" href="#📌-wait-title-change" aria-label="Permalink to &quot;📌 `wait.title_change()`&quot;">​</a></h3><p>此方法用于等待 title 变成包含或不包含指定文本。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>text</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;">必填</td><td>用于识别的文本</td></tr><tr><td style="text-align:center;"><code>exclude</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>False</code></td><td>是否排除，为<code>True</code>时当 title 不包含<code>text</code>指定文本时返回<code>True</code></td></tr><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>float</code></td><td>超时时间（秒）</td></tr><tr><td style="text-align:center;"><code>raise_err</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>None</code></td><td>等待失败时是否报错，为<code>None</code>时根据<code>Settings</code>设置</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumTab</code></td><td>等待成功<code>ChromiumTab</code>对象返回自身</td></tr><tr><td style="text-align:center;"><code>MixTab</code></td><td>等待成功<code>MixTab</code>对象返回自身</td></tr><tr><td style="text-align:center;"><code>ChromiumFrame</code></td><td><code>&lt;iframe&gt;</code>元素的等待返回对象自身</td></tr><tr><td style="text-align:center;"><code>False</code></td><td>等待失败</td></tr></tbody></table><hr><h3 id="📌-wait-url-change" tabindex="-1">📌 <code>wait.url_change()</code> <a class="header-anchor" href="#📌-wait-url-change" aria-label="Permalink to &quot;📌 `wait.url_change()`&quot;">​</a></h3><p>此方法用于等待 url 变成包含或不包含指定文本。<br> 比如有些网站登录时会进行多重跳转，url 发生多次变化，可用此功能等待到达最终需要的页面。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>text</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;">必填</td><td>用于识别的文本</td></tr><tr><td style="text-align:center;"><code>exclude</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>False</code></td><td>是否排除，为<code>True</code>时当 url 不包含<code>text</code>指定文本时返回<code>True</code></td></tr><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>float</code></td><td>超时时间（秒）</td></tr><tr><td style="text-align:center;"><code>raise_err</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>None</code></td><td>等待失败时是否报错，为<code>None</code>时根据<code>Settings</code>设置</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumTab</code></td><td>等待成功<code>ChromiumTab</code>对象返回自身</td></tr><tr><td style="text-align:center;"><code>MixTab</code></td><td>等待成功<code>MixTab</code>对象返回自身</td></tr><tr><td style="text-align:center;"><code>ChromiumFrame</code></td><td><code>&lt;iframe&gt;</code>元素的等待返回对象自身</td></tr><tr><td style="text-align:center;"><code>False</code></td><td>等待失败</td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 访问网站</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://www.*****.cn/login/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 访问登录页面</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.ele(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#username&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).input(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;***&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 执行登录逻辑</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.ele(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#password&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).input(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;***</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.wait.url_change(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://www.*****.cn/center/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 等待url变成后台url</span></span></code></pre></div><hr><h3 id="📌-wait-alert-closed" tabindex="-1">📌 <code>wait.alert_closed()</code> <a class="header-anchor" href="#📌-wait-alert-closed" aria-label="Permalink to &quot;📌 `wait.alert_closed()`&quot;">​</a></h3><p>此方法用于等待弹出框被关闭。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>float</code></td><td>超时时间（秒），为<code>None</code>无限等待</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumTab</code></td><td>等待成功<code>ChromiumTab</code>对象返回自身</td></tr><tr><td style="text-align:center;"><code>MixTab</code></td><td>等待成功<code>MixTab</code>对象返回自身</td></tr><tr><td style="text-align:center;"><code>False</code></td><td>等待失败</td></tr></tbody></table><hr><hr><h2 id="✅️️-元素对象的等待方法" tabindex="-1">✅️️ 元素对象的等待方法 <a class="header-anchor" href="#✅️️-元素对象的等待方法" aria-label="Permalink to &quot;✅️️ 元素对象的等待方法&quot;">​</a></h2><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium().latest_tab</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://DrissionPage.cn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tag:div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele.wait.covered()</span></span></code></pre></div><h3 id="📌-wait-displayed" tabindex="-1">📌 <code>wait.displayed()</code> <a class="header-anchor" href="#📌-wait-displayed" aria-label="Permalink to &quot;📌 `wait.displayed()`&quot;">​</a></h3><p>此方法用于等待元素从隐藏状态变成显示状态。<br> 元素隐藏是指元素在 DOM 内，但处于隐藏状态（即使在视口内且不被遮挡）。父元素隐藏时子元素也是隐藏的。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>等待超时时间（秒），为<code>None</code>则使用元素所在页面超时时间</td></tr><tr><td style="text-align:center;"><code>raise_err</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>None</code></td><td>等待失败时是否报错，为<code>None</code>时根据<code>Settings</code>设置</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumElement</code></td><td>元素对象自身</td></tr><tr><td style="text-align:center;"><code>ChromiumFrame</code></td><td><code>&lt;iframe&gt;</code>元素的等待返回对象自身</td></tr><tr><td style="text-align:center;"><code>False</code></td><td>等待失败</td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 等待元素显示，超时使用ele所在页面设置</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele.wait.displayed()</span></span></code></pre></div><hr><h3 id="📌-wait-hidden" tabindex="-1">📌 <code>wait.hidden()</code> <a class="header-anchor" href="#📌-wait-hidden" aria-label="Permalink to &quot;📌 `wait.hidden()`&quot;">​</a></h3><p>此方法用于等待元素从显示状态变成隐藏状态。<br> 元素隐藏是指元素在 DOM 内，但处于隐藏状态（即使在视口内且不被遮挡）。父元素隐藏时子元素也是隐藏的。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>等待超时时间（秒），为<code>None</code>则使用元素所在页面超时时间</td></tr><tr><td style="text-align:center;"><code>raise_err</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>None</code></td><td>等待失败时是否报错，为<code>None</code>时根据<code>Settings</code>设置</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumElement</code></td><td>元素对象自身</td></tr><tr><td style="text-align:center;"><code>ChromiumFrame</code></td><td><code>&lt;iframe&gt;</code>元素的等待返回对象自身</td></tr><tr><td style="text-align:center;"><code>False</code></td><td>等待失败</td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 等待元素不显示，超时为3秒</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele.wait.hidden(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">timeout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h3 id="📌-wait-deleted" tabindex="-1">📌 <code>wait.deleted()</code> <a class="header-anchor" href="#📌-wait-deleted" aria-label="Permalink to &quot;📌 `wait.deleted()`&quot;">​</a></h3><p>此方法用于等待元素被从 DOM 删除。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>等待超时时间（秒），为<code>None</code>则使用元素所在页面超时时间</td></tr><tr><td style="text-align:center;"><code>raise_err</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>None</code></td><td>等待失败时是否报错，为<code>None</code>时根据<code>Settings</code>设置</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumElement</code></td><td>元素对象自身</td></tr><tr><td style="text-align:center;"><code>ChromiumFrame</code></td><td><code>&lt;iframe&gt;</code>元素的等待返回对象自身</td></tr><tr><td style="text-align:center;"><code>False</code></td><td>等待失败</td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 等待元素显示，超时使用ele所在页面设置</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele.wait.deleted()</span></span></code></pre></div><hr><h3 id="📌-wait-has-rect" tabindex="-1">📌 <code>wait.has_rect()</code> <a class="header-anchor" href="#📌-wait-has-rect" aria-label="Permalink to &quot;📌 `wait.has_rect()`&quot;">​</a></h3><p>此方法用于等待元素被赋予大小。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>等待超时时间（秒），为<code>None</code>则使用元素所在页面超时时间</td></tr><tr><td style="text-align:center;"><code>raise_err</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>None</code></td><td>等待失败时是否报错，为<code>None</code>时根据<code>Settings</code>设置</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumElement</code></td><td>元素对象自身</td></tr><tr><td style="text-align:center;"><code>ChromiumFrame</code></td><td><code>&lt;iframe&gt;</code>元素的等待返回对象自身</td></tr><tr><td style="text-align:center;"><code>False</code></td><td>等待失败</td></tr></tbody></table><hr><h3 id="📌-wait-covered" tabindex="-1">📌 <code>wait.covered()</code> <a class="header-anchor" href="#📌-wait-covered" aria-label="Permalink to &quot;📌 `wait.covered()`&quot;">​</a></h3><p>此方法用于等待元素被其它元素覆盖。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>等待超时时间（秒），为<code>None</code>则使用元素所在页面超时时间</td></tr><tr><td style="text-align:center;"><code>raise_err</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>None</code></td><td>等待失败时是否报错，为<code>None</code>时根据<code>Settings</code>设置</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumElement</code></td><td>元素对象自身</td></tr><tr><td style="text-align:center;"><code>ChromiumFrame</code></td><td><code>&lt;iframe&gt;</code>元素的等待返回对象自身</td></tr><tr><td style="text-align:center;"><code>False</code></td><td>等待失败</td></tr></tbody></table><hr><h3 id="📌-wait-not-covered" tabindex="-1">📌 <code>wait.not_covered()</code> <a class="header-anchor" href="#📌-wait-not-covered" aria-label="Permalink to &quot;📌 `wait.not_covered()`&quot;">​</a></h3><p>此方法用于等待元素不被其它元素覆盖。<br> 可用于等待遮挡被操作元素的“加载中”遮罩消失。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>等待超时时间（秒），为<code>None</code>则使用元素所在页面超时时间</td></tr><tr><td style="text-align:center;"><code>raise_err</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>None</code></td><td>等待失败时是否报错，为<code>None</code>时根据<code>Settings</code>设置</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumElement</code></td><td>元素对象自身</td></tr><tr><td style="text-align:center;"><code>ChromiumFrame</code></td><td><code>&lt;iframe&gt;</code>元素的等待返回对象自身</td></tr><tr><td style="text-align:center;"><code>False</code></td><td>等待失败</td></tr></tbody></table><hr><h3 id="📌-wait-enabled" tabindex="-1">📌 <code>wait.enabled()</code> <a class="header-anchor" href="#📌-wait-enabled" aria-label="Permalink to &quot;📌 `wait.enabled()`&quot;">​</a></h3><p>此方法用于等待元素变为可用状态。<br> 不可用状态的元素仍然在 DOM 内，<code>disabled</code>属性为<code>False</code>。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>等待超时时间（秒），为<code>None</code>则使用元素所在页面超时时间</td></tr><tr><td style="text-align:center;"><code>raise_err</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>None</code></td><td>等待失败时是否报错，为<code>None</code>时根据<code>Settings</code>设置</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumElement</code></td><td>元素对象自身</td></tr><tr><td style="text-align:center;"><code>ChromiumFrame</code></td><td><code>&lt;iframe&gt;</code>元素的等待返回对象自身</td></tr><tr><td style="text-align:center;"><code>False</code></td><td>等待失败</td></tr></tbody></table><hr><h3 id="📌-wait-disabled" tabindex="-1">📌 <code>wait.disabled()</code> <a class="header-anchor" href="#📌-wait-disabled" aria-label="Permalink to &quot;📌 `wait.disabled()`&quot;">​</a></h3><p>此方法用于等待元素变为不可用状态。<br> 不可用状态的元素仍然在 DOM 内，<code>disabled</code>属性为<code>True</code>。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>等待超时时间（秒），为<code>None</code>则使用元素所在页面超时时间</td></tr><tr><td style="text-align:center;"><code>raise_err</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>None</code></td><td>等待失败时是否报错，为<code>None</code>时根据<code>Settings</code>设置</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumElement</code></td><td>元素对象自身</td></tr><tr><td style="text-align:center;"><code>ChromiumFrame</code></td><td><code>&lt;iframe&gt;</code>元素的等待返回对象自身</td></tr><tr><td style="text-align:center;"><code>False</code></td><td>等待失败</td></tr></tbody></table><hr><h3 id="📌-wait-stop-moving" tabindex="-1">📌 <code>wait.stop_moving()</code> <a class="header-anchor" href="#📌-wait-stop-moving" aria-label="Permalink to &quot;📌 `wait.stop_moving()`&quot;">​</a></h3><p>此方法用于等待元素运动结束。如果元素没有大小和位置信息，会在超时时抛出<code>NoRectError</code>异常。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>等待超时时间（秒），为<code>None</code>则使用元素所在页面超时时间</td></tr><tr><td style="text-align:center;"><code>gap</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>0.1</code></td><td>检测运动的间隔时间</td></tr><tr><td style="text-align:center;"><code>raise_err</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>None</code></td><td>等待失败时是否报错，为<code>None</code>时根据<code>Settings</code>设置</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumElement</code></td><td>元素对象自身</td></tr><tr><td style="text-align:center;"><code>ChromiumFrame</code></td><td><code>&lt;iframe&gt;</code>元素的等待返回对象自身</td></tr><tr><td style="text-align:center;"><code>False</code></td><td>等待失败</td></tr></tbody></table><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 等待元素稳定</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.ele(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#button1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).wait.stop_moving()</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 点击元素</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.ele(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#button1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).click()</span></span></code></pre></div><hr><h3 id="📌-wait-clickable" tabindex="-1">📌 <code>wait.clickable()</code> <a class="header-anchor" href="#📌-wait-clickable" aria-label="Permalink to &quot;📌 `wait.clickable()`&quot;">​</a></h3><p>此方法用于等待元素可被点击。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>wait_moved</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>True</code></td><td>是否等待元素运动结束</td></tr><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>等待超时时间（秒），为<code>None</code>则使用元素所在页面超时时间</td></tr><tr><td style="text-align:center;"><code>raise_err</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>None</code></td><td>等待失败时是否报错，为<code>None</code>时根据<code>Settings</code>设置</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumElement</code></td><td>元素对象自身</td></tr><tr><td style="text-align:center;"><code>ChromiumFrame</code></td><td><code>&lt;iframe&gt;</code>元素的等待返回对象自身</td></tr><tr><td style="text-align:center;"><code>False</code></td><td>等待失败</td></tr></tbody></table><hr><h3 id="📌-wait-disabled-or-deleted" tabindex="-1">📌 <code>wait.disabled_or_deleted()</code> <a class="header-anchor" href="#📌-wait-disabled-or-deleted" aria-label="Permalink to &quot;📌 `wait.disabled_or_deleted()`&quot;">​</a></h3><p>此方法用于等待元素变为不可用或被删除。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>等待超时时间（秒），为<code>None</code>则使用元素所在页面超时时间</td></tr><tr><td style="text-align:center;"><code>raise_err</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>None</code></td><td>等待失败时是否报错，为<code>None</code>时根据<code>Settings</code>设置</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;">是否等待成功</td></tr></tbody></table><hr><h2 id="✅️️-共有的等待方法" tabindex="-1">✅️️ 共有的等待方法 <a class="header-anchor" href="#✅️️-共有的等待方法" aria-label="Permalink to &quot;✅️️ 共有的等待方法&quot;">​</a></h2><h3 id="📌-wait" tabindex="-1">📌 <code>wait()</code> <a class="header-anchor" href="#📌-wait" aria-label="Permalink to &quot;📌 `wait()`&quot;">​</a></h3><p>此方法用于等待若干秒。所有对象的等待都可使用这个方法。<br><code>scope</code>为<code>None</code>时，效果与<code>time.sleep()</code>没有区别，等待指定秒数。<br><code>scope</code>不为<code>None</code>时，获取两个参数之间的一个随机值，等待这个数值的秒数。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>second</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;">必填</td><td>要等待的秒数，<code>scope</code>不为<code>None</code>时表示随机数范围起始值</td></tr><tr><td style="text-align:center;"><code>scope</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>随机数范围结束值</td></tr></tbody></table><p><strong>返回：</strong> 调用者自身</p><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">browser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium()</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 强制等待1秒</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">browser.wait(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 获取3.5至8.5之间的一个随机数，等待这个数值的秒数</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">browser.wait(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>',176)])])}const y=e(n,[["render",s]]);export{g as __pageData,y as default};
