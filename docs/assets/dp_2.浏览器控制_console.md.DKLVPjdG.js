import{_ as e,c as a,o,aN as s}from"./chunks/framework.0ZSa6Wd7.js";const g=JSON.parse('{"title":"🛰️ 获取控制台信息","description":"","frontmatter":{"id":"console","title":"🛰️ 获取控制台信息"},"headers":[],"relativePath":"dp/2.浏览器控制/console.md","filePath":"dp/2.浏览器控制/console.md"}'),d={name:"dp/2.浏览器控制/console.md"};function n(l,t,i,c,r,h){return o(),a("div",null,[...t[0]||(t[0]=[s('<h1 id="🛰️-获取控制台信息" tabindex="-1">🛰️ 获取控制台信息 <a class="header-anchor" href="#🛰️-获取控制台信息" aria-label="Permalink to &quot;🛰️ 获取控制台信息&quot;">​</a></h1><div class="wwads-cn wwads-horizontal" data-id="317"></div><br><p>获取控制台信息的逻辑和监听网络数据差不多，是通过监听控制台数据实现的。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><pre><code>不是所有显示在控制台的信息都能获取，需要用`console.log()`等方法输出到控制台的才能获取。\n</code></pre></div><h2 id="✅️-示例" tabindex="-1">✅️ 示例 <a class="header-anchor" href="#✅️-示例" aria-label="Permalink to &quot;✅️ 示例&quot;">​</a></h2><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium().latest_tab</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.console.start()</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.run_js(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;console.log(&quot;DrissionPage&quot;);&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab.console.wait()</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data.text)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出：DrissionPage</span></span></code></pre></div><hr><h2 id="✅️-启动和停止" tabindex="-1">✅️ 启动和停止 <a class="header-anchor" href="#✅️-启动和停止" aria-label="Permalink to &quot;✅️ 启动和停止&quot;">​</a></h2><h3 id="📌-console-start" tabindex="-1">📌 <code>console.start()</code> <a class="header-anchor" href="#📌-console-start" aria-label="Permalink to &quot;📌 `console.start()`&quot;">​</a></h3><p>此方法用于启动控制台信息监听。</p><p><strong>参数：</strong> 无</p><p><strong>返回：</strong><code>None</code></p><hr><h3 id="📌-console-stop" tabindex="-1">📌 <code>console.stop()</code> <a class="header-anchor" href="#📌-console-stop" aria-label="Permalink to &quot;📌 `console.stop()`&quot;">​</a></h3><p>此方法用于停止监听，清空已监听到的信息列表。</p><p><strong>参数：</strong> 无</p><p><strong>返回：</strong><code>None</code></p><hr><h2 id="✅️-获取信息" tabindex="-1">✅️ 获取信息 <a class="header-anchor" href="#✅️-获取信息" aria-label="Permalink to &quot;✅️ 获取信息&quot;">​</a></h2><h3 id="📌-console-wait" tabindex="-1">📌 <code>console.wait()</code> <a class="header-anchor" href="#📌-console-wait" aria-label="Permalink to &quot;📌 `console.wait()`&quot;">​</a></h3><p>此方法用于等待一条控制台信息。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code><br><code>None</code></td><td style="text-align:center;"><code>None</code></td><td>超时时间（秒），为<code>None</code>无限等待</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ConsoleData</code></td><td>控制台信息数据包对象</td></tr><tr><td style="text-align:center;"><code>False</code></td><td>等待超时时</td></tr></tbody></table><hr><h3 id="📌-console-steps" tabindex="-1">📌 <code>console.steps()</code> <a class="header-anchor" href="#📌-console-steps" aria-label="Permalink to &quot;📌 `console.steps()`&quot;">​</a></h3><p>此方法返回一个可迭代对象，用于<code>for</code>循环，每次循环可从中获取到的信息。</p><p>可实现实时获取并返回数据包。</p><p>如果<code>timeout</code>超时，会中断循环。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code><br><code>None</code></td><td style="text-align:center;"><code>None</code></td><td>每个信息等待时间（秒），为<code>None</code>表示无限等待</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ConsoleData</code></td><td>控制台信息数据包对象</td></tr></tbody></table><hr><h3 id="📌-console-messages" tabindex="-1">📌 <code>console.messages</code> <a class="header-anchor" href="#📌-console-messages" aria-label="Permalink to &quot;📌 `console.messages`&quot;">​</a></h3><p>此属性以<code>list</code>方式返回获取到的信息，返回后会清空列表。</p><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>List[ConsoleData]</code></td><td>控制台信息对象组成的列表</td></tr></tbody></table><hr><h2 id="✅️-其它" tabindex="-1">✅️ 其它 <a class="header-anchor" href="#✅️-其它" aria-label="Permalink to &quot;✅️ 其它&quot;">​</a></h2><h3 id="📌-console-listening" tabindex="-1">📌 <code>console.listening</code> <a class="header-anchor" href="#📌-console-listening" aria-label="Permalink to &quot;📌 `console.listening`&quot;">​</a></h3><p>此属性返回监听是否进行中。</p><p><strong>返回：</strong> <code>bool</code></p><hr><h3 id="📌-console-clear" tabindex="-1">📌 <code>console.clear()</code> <a class="header-anchor" href="#📌-console-clear" aria-label="Permalink to &quot;📌 `console.clear()`&quot;">​</a></h3><p>此方法用于清空已获取但未返回的信息。</p><p><strong>参数：</strong> 无</p><p><strong>返回：</strong><code>None</code></p><hr><h2 id="✅️-consoledata对象" tabindex="-1">✅️ <code>ConsoleData</code>对象 <a class="header-anchor" href="#✅️-consoledata对象" aria-label="Permalink to &quot;✅️ `ConsoleData`对象&quot;">​</a></h2><p><code>ConsoleData</code>对象是获取到的数据包结果对象，包含了数据包各种信息。</p><h3 id="📌-对象属性" tabindex="-1">📌 <code>对象属性</code> <a class="header-anchor" href="#📌-对象属性" aria-label="Permalink to &quot;📌 `对象属性`&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:center;">属性名称</th><th style="text-align:center;">数据类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>source</code></td><td style="text-align:center;"><code>str</code></td><td>来源</td></tr><tr><td style="text-align:center;"><code>level</code></td><td style="text-align:center;"><code>str</code></td><td>类型</td></tr><tr><td style="text-align:center;"><code>text</code></td><td style="text-align:center;"><code>str</code></td><td>内容文本</td></tr><tr><td style="text-align:center;"><code>body</code></td><td style="text-align:center;"><code>Any</code></td><td>把<code>text</code>进行 json 解析</td></tr><tr><td style="text-align:center;"><code>url</code></td><td style="text-align:center;"><code>str</code></td><td>网址</td></tr><tr><td style="text-align:center;"><code>line</code></td><td style="text-align:center;"><code>str</code></td><td>行号</td></tr><tr><td style="text-align:center;"><code>column</code></td><td style="text-align:center;"><code>str</code></td><td>列号</td></tr></tbody></table>',50)])])}const b=e(d,[["render",n]]);export{g as __pageData,b as default};
