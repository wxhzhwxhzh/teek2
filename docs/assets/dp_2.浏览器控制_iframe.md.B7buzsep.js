import{_ as i,c as a,o as e,aN as t}from"./chunks/framework.0ZSa6Wd7.js";const k=JSON.parse('{"title":"🛰️ iframe 操作","description":"","frontmatter":{"id":"iframe","title":"🛰️ iframe 操作"},"headers":[],"relativePath":"dp/2.浏览器控制/iframe.md","filePath":"dp/2.浏览器控制/iframe.md"}'),n={name:"dp/2.浏览器控制/iframe.md"};function l(h,s,d,p,r,o){return e(),a("div",null,[...s[0]||(s[0]=[t(`<h1 id="🛰️-iframe-操作" tabindex="-1">🛰️ iframe 操作 <a class="header-anchor" href="#🛰️-iframe-操作" aria-label="Permalink to &quot;🛰️ iframe 操作&quot;">​</a></h1><div class="wwads-cn wwads-horizontal" data-id="317"></div><br><p><code>&lt;iframe&gt;</code>元素是一种特殊的元素，它既是元素，也是页面。</p><p>DrissionPage 无需切入切出即可处理<code>&lt;iframe&gt;</code>元素。 可实现跨级元素查找、元素内部单独跳转、同时操作<code>&lt;iframe&gt;</code>内外元素、多线程控制多个<code>&lt;iframe&gt;</code>等操作。</p><h2 id="✅️-获取-iframe-对象" tabindex="-1">✅️ 获取<code>&lt;iframe&gt;</code>对象 <a class="header-anchor" href="#✅️-获取-iframe-对象" aria-label="Permalink to &quot;✅️ 获取\`&lt;iframe&gt;\`对象&quot;">​</a></h2><p>获取<code>&lt;iframe&gt;</code>对象的方法有两种，可用获取普通元素的方式获取，或者用<code>get_frame()</code>方法获取。</p><p>推荐优先使用<code>get_frame()</code>方法，因为当作普通元素获取时，IDE 无法正确识别获取到的是<code>&lt;iframe&gt;</code>元素。</p><h3 id="📌-get-frame" tabindex="-1">📌 <code>get_frame()</code> <a class="header-anchor" href="#📌-get-frame" aria-label="Permalink to &quot;📌 \`get_frame()\`&quot;">​</a></h3><p>此方法用于获取页面中一个<code>&lt;frame&gt;</code>或<code>&lt;iframe&gt;</code>对象。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>loc_ind_ele</code></td><td style="text-align:center;"><code>str</code><br><code>int</code><br><code>ChromiumFrame</code></td><td style="text-align:center;">必填</td><td>定位符<br><code>&lt;iframe&gt;</code>元素序号（从<code>1</code>开始，负数表示倒数）<br><code>ChromiumFrame对象</code><br><code>id</code>属性内容<br><code>name</code>属性内容</td></tr><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>超时时间（秒），为<code>None</code>时使用页面超时时间</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumFrame</code></td><td><code>&lt;frame&gt;</code>或<code>&lt;iframe&gt;</code>元素对象</td></tr><tr><td style="text-align:center;"><code>NoneElement</code></td><td>找不到时返回<code>NoneElement</code></td></tr></tbody></table><div class="warning custom-block"><p class="custom-block-title">注意</p><pre><code>需要特别注意的是，如果页面中有嵌套的\`&lt;iframe&gt;\`，用序号获取的方式会存在不准确。
比如，用\`get_frames()\`可获取到 6 个元素，但用\`get_frame(6)\`却获取不到最后一个。
这是因为有两个\`&lt;iframe&gt;\`是嵌套关系，导致获取不准确。
</code></pre></div><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用定位符获取</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iframe </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab.get_frame(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;t:iframe&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 获取第1个iframe</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iframe </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab.get_frame(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h3 id="📌-get-frames" tabindex="-1">📌 <code>get_frames()</code> <a class="header-anchor" href="#📌-get-frames" aria-label="Permalink to &quot;📌 \`get_frames()\`&quot;">​</a></h3><p>此方法用于获取页面中多个符合条件的<code>&lt;frame&gt;</code>或<code>&lt;iframe&gt;</code>对象。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>locator</code></td><td style="text-align:center;"><code>str</code><br><code>Tuple[str, str]</code></td><td style="text-align:center;"><code>None</code></td><td>定位符，为<code>None</code>时返回所有</td></tr><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>超时时间（秒），为<code>None</code>时使用页面超时时间</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>List[ChromiumFrame]</code></td><td><code>&lt;frame&gt;</code>或<code>&lt;iframe&gt;</code>元素对象组成的列表</td></tr></tbody></table><div class="info custom-block"><p class="custom-block-title">提醒</p><pre><code>获取所有\`&lt;iframe&gt;\`会很慢，而且浪费资源，一般使用获取需要用到的就好。
</code></pre></div><hr><h3 id="📌-普通元素方式" tabindex="-1">📌 普通元素方式 <a class="header-anchor" href="#📌-普通元素方式" aria-label="Permalink to &quot;📌 普通元素方式&quot;">​</a></h3><p>可以用获取普通元素的方式获取<code>&lt;iframe&gt;</code>对象：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iframe </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;t:iframe&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>这个<code>ChromiumFrame</code>对象既是页面也是元素。由于 IDE 不会提示<code>&lt;iframe&gt;</code> 元素对象相关的属性和方法，因此用这种方式获取时建议再用<code>get_frame()</code>包装一下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iframe </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;t:iframe&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iframe </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab.get_frame(iframe)</span></span></code></pre></div><hr><h2 id="✅️-查找-iframe-内元素" tabindex="-1">✅️ 查找<code>&lt;iframe&gt;</code>内元素 <a class="header-anchor" href="#✅️-查找-iframe-内元素" aria-label="Permalink to &quot;✅️ 查找\`&lt;iframe&gt;\`内元素&quot;">​</a></h2><p>当<code>&lt;iframe&gt;</code>与标签页是同域的，我们并不需要先切入<code>&lt;iframe&gt;</code>，就可以获取到里面的元素。</p><p>如果是异域的，则先要获取这个标签页的<code>ChromiumFrame</code>对象，再用这个对象在自己内部搜索。</p><h3 id="📌-页面跨-iframe-查找" tabindex="-1">📌 页面跨<code>&lt;iframe&gt;</code>查找 <a class="header-anchor" href="#📌-页面跨-iframe-查找" aria-label="Permalink to &quot;📌 页面跨\`&lt;iframe&gt;\`查找&quot;">​</a></h3><p>如果<code>&lt;iframe&gt;</code>元素的网址和主页面是同域的，我们可以直接用页面对象查找<code>&lt;iframe&gt;</code>内部元素，而无需先获取<code>ChromiumFrame</code>对象。</p><p>以下示例页面中有一个<code>&lt;iframe&gt;</code>元素，和标签页是同域的，可直接通过 Tab 对象查找它内部的元素。</p><p>只要是同域名的，无论跨多少层<code>&lt;iframe&gt;</code>都能用页面对象直接获取。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium().latest_tab</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://DrissionPage.cn/demos/iframe_same_domain.html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;概述&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ele)</span></span></code></pre></div><p><strong>输出：</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ChromiumElement h2 class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;anchor anchorWithStickyNavbar_LWe7&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;️-概述&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><hr><h3 id="📌-在-iframe-内查找" tabindex="-1">📌 在<code>&lt;iframe&gt;</code>内查找 <a class="header-anchor" href="#📌-在-iframe-内查找" aria-label="Permalink to &quot;📌 在\`&lt;iframe&gt;\`内查找&quot;">​</a></h3><p>如果<code>&lt;iframe&gt;</code>跟当前标签页是不同域名的，不能使用页面对象直接查找其中元素，只能先获取其<code>ChromiumFrame</code>元素对象，再在这个对象中查找。</p><p>即使是同域的，也可以通过这种方法查找。</p><p>但创建<code>ChromiumFrame</code>对象会增加系统资源的使用，一般建议异域的才创建对象。</p><p>以下示例页面中有一个<code>&lt;iframe&gt;</code>元素，和标签页是不同域的，需要先获取<code>ChromiumFrame</code>对象，再在里面找元素。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium().latest_tab</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://DrissionPage.cn/demos/iframe_diff_domain.html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iframe </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab.get_frame(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;t:iframe&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iframe(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;网易首页&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ele)</span></span></code></pre></div><p><strong>输出：</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ChromiumElement a class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ntes-nav-index-title ntes-nav-entry-wide c-fl&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> href</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://www.163.com/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;网易首页&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><hr><h2 id="✅️-方法和属性" tabindex="-1">✅️ 方法和属性 <a class="header-anchor" href="#✅️-方法和属性" aria-label="Permalink to &quot;✅️ 方法和属性&quot;">​</a></h2><p>正如上面所说，<code>ChromiumFrame</code>既是元素也是页面，它可以获取自身元素方面的属性或执行操作。</p><p>详见相关章节。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iframe.tag</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iframe.html</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iframe.remove_attr()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iframe.states.is_alive</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iframe.get()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iframe.get_screenshot()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 等等</span></span></code></pre></div>`,52)])])}const g=i(n,[["render",l]]);export{k as __pageData,g as default};
