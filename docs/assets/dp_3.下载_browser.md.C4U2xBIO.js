import{_ as e,c as s,o as a,aN as i}from"./chunks/framework.0ZSa6Wd7.js";const k=JSON.parse('{"title":"⤵️ 浏览器下载","description":"","frontmatter":{"id":"browser","title":"⤵️ 浏览器下载"},"headers":[],"relativePath":"dp/3.下载/browser.md","filePath":"dp/3.下载/browser.md"}'),n={name:"dp/3.下载/browser.md"};function d(l,t,h,o,p,r){return a(),s("div",null,[...t[0]||(t[0]=[i(`<h1 id="⤵️-浏览器下载" tabindex="-1">⤵️ 浏览器下载 <a class="header-anchor" href="#⤵️-浏览器下载" aria-label="Permalink to &quot;⤵️ 浏览器下载&quot;">​</a></h1><div class="wwads-cn wwads-horizontal" data-id="317"></div><br><p>本节介绍对浏览器下载任务进行设置的功能。</p><h2 id="✅️-概述" tabindex="-1">✅️ 概述 <a class="header-anchor" href="#✅️-概述" aria-label="Permalink to &quot;✅️ 概述&quot;">​</a></h2><h3 id="📌-功能" tabindex="-1">📌 功能 <a class="header-anchor" href="#📌-功能" aria-label="Permalink to &quot;📌 功能&quot;">​</a></h3><p>DrissionPage 提供以下功能，用于对浏览器下载任务进行控制：</p><ul><li>每个 tab 对象可独立设置文件保存路径</li><li>下载前可指定文件名称，实现文件重命名</li><li>可设置存在同名文件时的处理方式</li><li>可获取任务下载进度</li><li>可等待下载任务结束</li><li>可取消任务</li><li>可拦截下载任务并获取其信息</li></ul><hr><h2 id="⚠️-注意事项" tabindex="-1">⚠️ 注意事项 <a class="header-anchor" href="#⚠️-注意事项" aria-label="Permalink to &quot;⚠️ 注意事项&quot;">​</a></h2><h3 id="📌-记得等待任务结束" tabindex="-1">📌 记得等待任务结束 <a class="header-anchor" href="#📌-记得等待任务结束" aria-label="Permalink to &quot;📌 记得等待任务结束&quot;">​</a></h3><p>因技术原因，程序在下载结束时才能对其重命名，在这之前文件名是临时的任务 id。</p><p>因此必需等待下载完毕，文件名才能正确命名。无论是否指定文件名都一样。</p><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium().latest_tab</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#button&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).click()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 点击下载按钮</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.wait.download_begin()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 等待下载开始</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.wait.downloads_done()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 等待所有任务结束</span></span></code></pre></div><hr><h3 id="📌-多-tab-操作时推荐设置临时路径" tabindex="-1">📌 多 Tab 操作时推荐设置临时路径 <a class="header-anchor" href="#📌-多-tab-操作时推荐设置临时路径" aria-label="Permalink to &quot;📌 多 Tab 操作时推荐设置临时路径&quot;">​</a></h3><p>程序需要把任务下载到一个指定位置，完成后再移动到目标路径。</p><p>因此，如果程序涉及多个 Tab 触发下载任务，最好给<code>Chromium</code>对象设置一个下载路径。</p><p>即使每个 Tab 对象都设置了自己的路径。</p><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">browser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">browser.set.download_path(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tmp&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置总路径</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> browser.get_tab(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab1.set.download_path(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;path1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> browser.get_tab(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab2.set.download_path(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;path2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h3 id="📌-启动下载管理功能" tabindex="-1">📌 启动下载管理功能 <a class="header-anchor" href="#📌-启动下载管理功能" aria-label="Permalink to &quot;📌 启动下载管理功能&quot;">​</a></h3><p>本节介绍的下载管理功能默认不开启，此时触发下载任务和手动操作没有区别。</p><p>当启动配置中设置了下载路径，或调用<code>set.download_path()</code>方法时，管理功能才会启动。</p><p>使用<code>click.to_download()</code>方法会自动自动此功能。</p><hr><h2 id="✅️-click-to-download" tabindex="-1">✅️ <code>click.to_download()</code> <a class="header-anchor" href="#✅️-click-to-download" aria-label="Permalink to &quot;✅️ \`click.to_download()\`&quot;">​</a></h2><p>当预期点击元素后会触发下载，可使用此方法返回下载任务。</p><p>使用时可以同时设置下载路径、指定文件名名称。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><pre><code>- 有些下载任务是点击后弹出新标签页，在新标签页触发下载，此时必须设置\`new_tab=True\`
- 点击后等待下载触发时间为页面对象\`timeout\`属性（默认10秒），如果需要更久的等待，用下文介绍的方法。
</code></pre></div><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>save_path</code></td><td style="text-align:center;"><code>str</code><br><code>Path</code></td><td style="text-align:center;">必填</td><td>保存路径，为<code>None</code>保存在原来设置的，如未设置保存到当前路径</td></tr><tr><td style="text-align:center;"><code>rename</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;"><code>None</code></td><td>重命名文件名，为<code>None</code>则不修改</td></tr><tr><td style="text-align:center;"><code>suffix</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;"><code>None</code></td><td>指定文件后缀，为<code>None</code>则不修改</td></tr><tr><td style="text-align:center;"><code>new_tab</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>False</code></td><td>预期的下载是否在新标签页中触发</td></tr><tr><td style="text-align:center;"><code>by_js</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>False</code></td><td>是否用 js 方式点击，逻辑与<code>click()</code>一致</td></tr><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>超时时间（秒），为<code>None</code>时使用页面对象默认超时时间</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>DownloadMission</code></td><td style="text-align:center;">下载任务对象</td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium().latest_tab </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://im.qq.com/pcqq/index.shtml&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;全新体验版下载&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele.wait.has_rect()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mission </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ele.click.to_download(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">save_path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tmp&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">rename</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;QQ.exe&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mission.wait()</span></span></code></pre></div><p><code>click.to_download()</code>方法能够应付多数情况，不是点击触发的下载任务或更复杂的情况，请根据下文介绍的配置方式使用。</p><hr><h2 id="✅️-设置下载路径" tabindex="-1">✅️ 设置下载路径 <a class="header-anchor" href="#✅️-设置下载路径" aria-label="Permalink to &quot;✅️ 设置下载路径&quot;">​</a></h2><h3 id="📌-设置总下载路径" tabindex="-1">📌 设置总下载路径 <a class="header-anchor" href="#📌-设置总下载路径" aria-label="Permalink to &quot;📌 设置总下载路径&quot;">​</a></h3><p>使用<code>Chromium</code>对象的<code>set.download_path()</code>方法设置下载路径。不设置时，默认下载到程序当前路径。</p><p><code>Chromium</code>对象设置下载路径后，后续新建的 Tab 对象均会使用该路径，之前建立的 Tab 对象使用的路径则不会改变。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>path</code></td><td style="text-align:center;"><code>str</code><br><code>Path</code></td><td style="text-align:center;">必填</td><td>下载路径</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">browser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">browser.set.download_path(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">C:</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">mp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h3 id="📌-设置-tab-下载路径" tabindex="-1">📌 设置 Tab 下载路径 <a class="header-anchor" href="#📌-设置-tab-下载路径" aria-label="Permalink to &quot;📌 设置 Tab 下载路径&quot;">​</a></h3><p>使用方法与设置<code>Chromium</code>的一致，但只在当前 Tab 对象生效。</p><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium().latest_tab</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.set.download_path(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">C:</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">mp1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置Tab下载路径</span></span></code></pre></div><hr><h2 id="✅️-设置文件名" tabindex="-1">✅️ 设置文件名 <a class="header-anchor" href="#✅️-设置文件名" aria-label="Permalink to &quot;✅️ 设置文件名&quot;">​</a></h2><p>使用<code>download_file_name()</code>方法，可在下载前设置文件名，实现下载文件的重命名。</p><p>设置的文件名可以不带后缀，程序会根据下载的文件自动补充后缀。</p><p>如设置的文件名带<code>&#39;.&#39;</code>，且后缀与网络文件不一致，程序会以网络文件的后缀为准。</p><p>如果想修改后缀名，设置<code>suffix</code>参数即可。</p><p>每次触发下载后，该设置会被清空。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>name</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;"><code>None</code></td><td>文件名</td></tr><tr><td style="text-align:center;"><code>suffix</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;"><code>None</code></td><td>文件后缀名，传入<code>&#39;&#39;</code>可去除后缀</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium().latest_tab</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.set.download_file_name(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;new_file&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;t:a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).click()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 点击一个会触发下载的链接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mission </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab.wait.download_begin()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mission.wait()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 记得等待任务触发和结束</span></span></code></pre></div><hr><h2 id="✅️-等待" tabindex="-1">✅️ 等待 <a class="header-anchor" href="#✅️-等待" aria-label="Permalink to &quot;✅️ 等待&quot;">​</a></h2><h3 id="📌-等待下载开始" tabindex="-1">📌 等待下载开始 <a class="header-anchor" href="#📌-等待下载开始" aria-label="Permalink to &quot;📌 等待下载开始&quot;">​</a></h3><p>点击下载链接后，下载并不会瞬间触发，需要进行等待，才能将其捕获。</p><p>使用<code>wait.download_begin()</code>方法等待下载开始。</p><p>一般来说，标签页触发的下载任务用 Tab 对象进行等待，未被控制的标签页触发的下载，可由<code>Chromium</code>对象进行等待。</p><p><code>cancel_it</code>参数为<code>True</code>时，捕获到任务时会将其取消，以便将返回的下载信息用于其它需要。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>超时时间（秒），<code>None</code>为页面默认等待时间</td></tr><tr><td style="text-align:center;"><code>cancel_it</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>False</code></td><td>是否取消该任务</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>DownloadMission</code></td><td>等待成功且<code>cancel_it</code>为<code>False</code>时返回下载任务对象</td></tr><tr><td style="text-align:center;"><code>dict</code></td><td>等待成功且<code>cancel_it</code>为<code>True</code>时返回下载任务信息</td></tr><tr><td style="text-align:center;"><code>False</code></td><td>等待失败返回<code>False</code></td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium().latest_tab</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;t:a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).click()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 点击一个会触发下载的链接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.wait.download_begin()</span></span></code></pre></div><hr><h3 id="📌-等待所有下载任务结束" tabindex="-1">📌 等待所有下载任务结束 <a class="header-anchor" href="#📌-等待所有下载任务结束" aria-label="Permalink to &quot;📌 等待所有下载任务结束&quot;">​</a></h3><p>用<code>Chromium</code>对象的<code>wait.downloads_done()</code>方法可等待浏览器所有下载任务结束。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>超时时间（秒），为<code>None</code>时无限等待</td></tr><tr><td style="text-align:center;"><code>cancel_if_timeout</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>False</code></td><td>如超时是否取消未完成的任务</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>bool</code></td><td>是否等待成功</td></tr></tbody></table><hr><h3 id="📌-等待某-tab-所有下载任务结束" tabindex="-1">📌 等待某 Tab 所有下载任务结束 <a class="header-anchor" href="#📌-等待某-tab-所有下载任务结束" aria-label="Permalink to &quot;📌 等待某 Tab 所有下载任务结束&quot;">​</a></h3><p>用 Tab 对象的<code>wait.downloads_done()</code>方法可等待该 Tab 对象触发点下载任务结束。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>超时时间（秒），为<code>None</code>时无限等待</td></tr><tr><td style="text-align:center;"><code>cancel_if_timeout</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>False</code></td><td>如超时是否取消未完成的任务</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>bool</code></td><td>是否等待成功</td></tr></tbody></table><hr><h2 id="✅️-拦截下载任务" tabindex="-1">✅️ 拦截下载任务 <a class="header-anchor" href="#✅️-拦截下载任务" aria-label="Permalink to &quot;✅️ 拦截下载任务&quot;">​</a></h2><p><code>wait.download_begin()</code>方法有个<code>cancel_it</code>参数，当为<code>True</code>时，会取消下载任务。</p><p>此时可使用该方法返回的任务信息进行下一步操作，如改用<code>download()</code>方法下载等。</p><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium().latest_tab</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;t:a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).click()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab.wait.download_begin(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">cancel_it</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.download(data.url)</span></span></code></pre></div><hr><h2 id="✅️-同名文件的处理" tabindex="-1">✅️ 同名文件的处理 <a class="header-anchor" href="#✅️-同名文件的处理" aria-label="Permalink to &quot;✅️ 同名文件的处理&quot;">​</a></h2><p>下载遇到同名文件时，可选择三种处理方式：自动重命名、覆盖、跳过。</p><p>使用<code>set.when_download_file_exists(&#39;****&#39;)</code>进行设置。</p><p>其中<code>****</code>可选<code>&#39;rename&#39;</code>、<code>&#39;overwrite&#39;</code>、<code>&#39;skip&#39;</code>。</p><p>也可选择它们的首字母<code>&#39;r&#39;</code>、<code>&#39;o&#39;</code>、<code>&#39;s&#39;</code>。</p><h3 id="📌-自动重命名" tabindex="-1">📌 自动重命名 <a class="header-anchor" href="#📌-自动重命名" aria-label="Permalink to &quot;📌 自动重命名&quot;">​</a></h3><p>设置方法：<code>set.when_download_file_exists(&#39;rename&#39;)</code></p><p>这种方式遇到已有同名文件时会自动将新文件重命名，方式是在后面加上序号。</p><p>假设保存路径已存在名为 &#39;abc.zip&#39; 的文件，再下载一个 &#39;abc.zip&#39; 时，新文件会自动重命名为 &#39;abc_1.zip&#39;。</p><p>之后再下载会命名为 &#39;abc_2.zip&#39;，如此类推。</p><hr><h3 id="📌-覆盖已有文件" tabindex="-1">📌 覆盖已有文件 <a class="header-anchor" href="#📌-覆盖已有文件" aria-label="Permalink to &quot;📌 覆盖已有文件&quot;">​</a></h3><p>设置方法：<code>set.when_download_file_exists(&#39;overwrite&#39;)</code></p><p>这种方式会把原有的同名文件替换成新下载的。</p><hr><h3 id="📌-跳过" tabindex="-1">📌 跳过 <a class="header-anchor" href="#📌-跳过" aria-label="Permalink to &quot;📌 跳过&quot;">​</a></h3><p>设置方法：<code>set.when_download_file_exists(&#39;skip&#39;)</code></p><p>这种方式下，发现已有同名文件时会取消下载任务。</p><hr><h2 id="✅️-任务管理" tabindex="-1">✅️ 任务管理 <a class="header-anchor" href="#✅️-任务管理" aria-label="Permalink to &quot;✅️ 任务管理&quot;">​</a></h2><p><code>wait.download_begin()</code>方法会返回<code>DownloadMission</code>对象，用于浏览器下载任务的管理。</p><h3 id="📌-获取任务信息" tabindex="-1">📌 获取任务信息 <a class="header-anchor" href="#📌-获取任务信息" aria-label="Permalink to &quot;📌 获取任务信息&quot;">​</a></h3><p>可获取任务状态、进度、保存路径、文件名等信息。</p><table tabindex="0"><thead><tr><th style="text-align:center;">属性名称</th><th style="text-align:center;">类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>url</code></td><td style="text-align:center;"><code>str</code></td><td>返回任务网址</td></tr><tr><td style="text-align:center;"><code>tab_id</code></td><td style="text-align:center;"><code>str</code></td><td>触发任务的 Tab 对象 id</td></tr><tr><td style="text-align:center;"><code>id</code></td><td style="text-align:center;"><code>str</code></td><td>任务 id</td></tr><tr><td style="text-align:center;"><code>folder</code></td><td style="text-align:center;"><code>str</code></td><td>保存文件夹路径</td></tr><tr><td style="text-align:center;"><code>name</code></td><td style="text-align:center;"><code>str</code></td><td>文件名</td></tr><tr><td style="text-align:center;"><code>tmp_path</code></td><td style="text-align:center;"><code>str</code></td><td>临时文件保存路径</td></tr><tr><td style="text-align:center;"><code>state</code></td><td style="text-align:center;"><code>str</code></td><td>任务状态，&#39;running&#39;, &#39;done&#39;, &#39;canceled&#39;, &#39;skipped&#39;</td></tr><tr><td style="text-align:center;"><code>total_bytes</code></td><td style="text-align:center;"><code>int</code></td><td>总字节数</td></tr><tr><td style="text-align:center;"><code>received_bytes</code></td><td style="text-align:center;"><code>int</code></td><td>已接收字节数</td></tr><tr><td style="text-align:center;"><code>final_path</code></td><td style="text-align:center;"><code>str</code><br><code>None</code></td><td>最终完整路径，任务完成后才产生</td></tr></tbody></table><p><strong>示例：</strong></p><p>实时打印任务进度。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mission </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab.wait.download_begin()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mission.is_done:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mission.rate</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">%&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">end</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h3 id="📌-等待任务结束" tabindex="-1">📌 等待任务结束 <a class="header-anchor" href="#📌-等待任务结束" aria-label="Permalink to &quot;📌 等待任务结束&quot;">​</a></h3><p>使用<code>DownloadMission</code>对象的<code>wait()</code>方法，可等待任务结束。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>show</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>True</code></td><td>是否打印下载信息</td></tr><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>超时时间（秒），<code>None</code>为无限等待</td></tr><tr><td style="text-align:center;"><code>cancel_if_timeout</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>False</code></td><td>如超时是否取消该任务</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>str</code></td><td>下载完成返回最终保存路径</td></tr><tr><td style="text-align:center;"><code>False</code></td><td>超时或被取消返回<code>False</code></td></tr></tbody></table><hr><h3 id="📌-取消任务" tabindex="-1">📌 取消任务 <a class="header-anchor" href="#📌-取消任务" aria-label="Permalink to &quot;📌 取消任务&quot;">​</a></h3><p>使用<code>DownloadMission</code>对象的<code>cancel()</code>方法，可取消任务。</p><p>调用该方法，已下载的文件会被删除，即使是已完成的任务。</p>`,126)])])}const g=e(n,[["render",d]]);export{k as __pageData,g as default};
