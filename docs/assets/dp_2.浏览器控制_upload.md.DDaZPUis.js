import{_ as i,c as a,o as t,aM as n}from"./chunks/framework.Fs4ucY6U.js";const c=JSON.parse('{"title":"🛰️ 上传文件","description":"","frontmatter":{"id":"upload","title":"🛰️ 上传文件"},"headers":[],"relativePath":"dp/2.浏览器控制/upload.md","filePath":"dp/2.浏览器控制/upload.md"}'),e={name:"dp/2.浏览器控制/upload.md"};function l(p,s,h,k,d,o){return t(),a("div",null,[...s[0]||(s[0]=[n(`<h1 id="🛰️-上传文件" tabindex="-1">🛰️ 上传文件 <a class="header-anchor" href="#🛰️-上传文件" aria-label="Permalink to &quot;🛰️ 上传文件&quot;">​</a></h1><div class="wwads-cn wwads-horizontal" data-id="317"></div><br><p>上传文件有两种方式：</p><ul><li>拦截文件输入框，自动填入路径</li><li>找到<code>&lt;input&gt;</code>元素，填入文件路径</li></ul><h2 id="✅️️-自然的交互" tabindex="-1">✅️️ 自然的交互 <a class="header-anchor" href="#✅️️-自然的交互" aria-label="Permalink to &quot;✅️️ 自然的交互&quot;">​</a></h2><p>传统自动化工具的文件上传，需要开发者在 DOM 里找到文件上传控件，然后用元素对象的<code>input()</code>方法填入路径。</p><p>有些上传控件是临时加载的，有些藏得很深，找起来费时费力。</p><p>本库提供一种自然的文件上传方式，无需在 DOM 里找控件，只要自然地点击触发文件选择框，程序就能主动截获，并填写设定好的路径，开发更省事。</p><h3 id="📌-click-to-upload" tabindex="-1">📌 <code>click.to_upload()</code> <a class="header-anchor" href="#📌-click-to-upload" aria-label="Permalink to &quot;📌 \`click.to_upload()\`&quot;">​</a></h3><p>浏览器元素对象拥有此方法，用于上传文件到网页。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>file_paths</code></td><td style="text-align:center;"><code>str</code><br><code>Path</code><br><code>list</code><br><code>tuple</code></td><td style="text-align:center;">必填</td><td>文件路径，如果上传框支持多文件，可传入列表或字符串，字符串时多个文件用<code>\\n</code>分隔</td></tr><tr><td style="text-align:center;"><code>by_js</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>False</code></td><td>是否用 js 方式点击，逻辑与<code>click()</code>一致</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><p><strong>示例</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium().latest_tab</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#uploadButton&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele.click.to_upload(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">C:</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">ext</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">txt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h3 id="📌-手动方式" tabindex="-1">📌 手动方式 <a class="header-anchor" href="#📌-手动方式" aria-label="Permalink to &quot;📌 手动方式&quot;">​</a></h3><p>上面的方法使用默认点击方式触发上传，假如页面要求其它触发方式，可自行手动写上传逻辑。</p><p><strong>步骤：</strong></p><ul><li>设置要上传的文件路径，多路径传入<code>list</code>、<code>tuple</code>或以<code>\\n</code>分隔的字符串</li><li>点击会触发文件选择框的按钮</li><li>调用等待录入语句，确保输入完整</li></ul><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置要上传的文件路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.set.upload_files(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;demo.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 点击触发文件选择框按钮</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">btn_ele.click()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 等待路径填入</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.wait.upload_paths_inputted()</span></span></code></pre></div><p>点击按钮后，文本选择框被拦截不会弹出，但可以看到文件路径已经传入其中。</p><p>由于此动作是异步输入，需显式等待输入完成才进行下一步操作。</p><hr><h3 id="📌-注意事项" tabindex="-1">📌 注意事项 <a class="header-anchor" href="#📌-注意事项" aria-label="Permalink to &quot;📌 注意事项&quot;">​</a></h3><p>如果您要操作的上传控件在一个异域的<code>&lt;iframe&gt;</code>，那必需用这个<code>&lt;iframe&gt;</code>对象来设置上传路径，而不能用页面对象设置。</p><p>❌ 错误做法：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.set.upload_paths(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;demo.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.get_frame(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).ele(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@type=file&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).click()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.wait.upload_paths_inputted()</span></span></code></pre></div><p>⭕ 正确做法：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iframe </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab.get_frame(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iframe.set.upload_paths(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;demo.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iframe.ele(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@type=file&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).click()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iframe.wait.upload_paths_inputted()</span></span></code></pre></div><p>如果<code>&lt;iframe&gt;</code>和主页面是同域的，则用域名对象和<code>&lt;iframe&gt;</code>对象设置均可。</p><hr><h2 id="✅️️-传统方式" tabindex="-1">✅️️ 传统方式 <a class="header-anchor" href="#✅️️-传统方式" aria-label="Permalink to &quot;✅️️ 传统方式&quot;">​</a></h2><p>传统方式，需要开发者在 DOM 里找到文件上传控件，然后用元素对象的<code>input()</code>方法填入路径。</p><p>文件上传控件是<code>type</code>属性为<code>&#39;file&#39;</code>的<code>&lt;input&gt;</code>元素进行输入，把文件路径输入到元素即可，用法与输入文本一致。</p><p>稍有不同的是，无论<code>clear</code>参数是什么，都会清空原控件内容。</p><p>如果控件支持多文件上传，多个路径用<code>list</code>、<code>tuple</code>或以<code>\\n</code>分隔的字符串传入。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">upload </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tag:input@type=file&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 传入一个路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">upload.input(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;D:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">test1.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 传入多个路径，方式 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">paths </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;D:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">test1.txt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">D:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">test2.txt&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">upload.input(paths)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 传入多个路径，方式 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">paths </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;D:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">test1.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;D:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">test2.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">upload.input(paths)</span></span></code></pre></div><p>如果<code>&lt;input&gt;</code>元素很好找，这种方式是很简便的。</p><p>有些<code>&lt;input&gt;</code>是临时加载的，或者经过修饰隐藏很深，找起来很费劲。</p><p>万一有些上传是用 js 控制的，这种方式未必能奏效。</p>`,42)])])}const E=i(e,[["render",l]]);export{c as __pageData,E as default};
