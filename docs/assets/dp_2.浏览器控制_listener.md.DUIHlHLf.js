import{_ as e,c as d,o as s,aN as a}from"./chunks/framework.0ZSa6Wd7.js";const g=JSON.parse('{"title":"🛰️ 监听网络数据","description":"","frontmatter":{"id":"listener","title":"🛰️ 监听网络数据"},"headers":[],"relativePath":"dp/2.浏览器控制/listener.md","filePath":"dp/2.浏览器控制/listener.md"}'),i={name:"dp/2.浏览器控制/listener.md"};function n(l,t,o,c,r,h){return s(),d("div",null,[...t[0]||(t[0]=[a('<h1 id="🛰️-监听网络数据" tabindex="-1">🛰️ 监听网络数据 <a class="header-anchor" href="#🛰️-监听网络数据" aria-label="Permalink to &quot;🛰️ 监听网络数据&quot;">​</a></h1><div class="wwads-cn wwads-horizontal" data-id="317"></div><br><p>许多网页的数据来自接口，在网站使用过程中动态加载，如使用 JS 加载内容的翻页列表。</p><p>这些数据通常以 json 形式发送，浏览器接收后，对其进行解析，再加载到 DOM 相应位置。</p><p>做数据采集的时候，我们往往从 DOM 中去获取解析后数据的，可能存在数据不全、加载响应不及时、难以判断加载完成等问题。</p><p>如果我们可以拿到浏览器收发的数据包，根据数据包状态判断下一步操作，甚至直接获取数据，岂不是爽爆了？</p><p>DrissionPage 每个页面对象（包括 Tab 和 Frame 对象）内置了一个监听器，专门用于抓取浏览器数据包。</p><p>可以提供等待和捕获指定数据包，实时返回指定数据包功能。</p><h2 id="✅️-示例" tabindex="-1">✅️ 示例 <a class="header-anchor" href="#✅️-示例" aria-label="Permalink to &quot;✅️ 示例&quot;">​</a></h2><p>先看两个示例了解监听器工作方式。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><pre><code>要先启动监听，再执行动作，`listen.start()`之前的数据包是获取不到的。\n</code></pre></div><h3 id="📌-等待并获取" tabindex="-1">📌 等待并获取 <a class="header-anchor" href="#📌-等待并获取" aria-label="Permalink to &quot;📌 等待并获取&quot;">​</a></h3><p>点击下一页，等待数据包，再点击下一页，循环。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium().latest_tab</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://gitee.com/explore/all&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 访问网址，这行产生的数据包不监听</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.listen.start(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;gitee.com/explore&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 开始监听，指定获取包含该文本的数据包</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tab(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@rel=next&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).click()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 点击下一页</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab.listen.wait()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 等待并获取一个数据包</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res.url)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 打印数据包url</span></span></code></pre></div><p><strong>输出：</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">https://gitee.com/explore/all?page</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=2</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">https://gitee.com/explore/all?page</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=3</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">https://gitee.com/explore/all?page</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=4</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">https://gitee.com/explore/all?page</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=5</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">https://gitee.com/explore/all?page</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=6</span></span></code></pre></div><hr><h3 id="📌-实时获取" tabindex="-1">📌 实时获取 <a class="header-anchor" href="#📌-实时获取" aria-label="Permalink to &quot;📌 实时获取&quot;">​</a></h3><p>跟上一个示例做同样的事情，不过换一种方式。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium().latest_tab</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.listen.start(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;gitee.com/explore&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 开始监听，指定获取包含该文本的数据包</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://gitee.com/explore/all&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 访问网址</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> packet </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab.listen.steps():</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(packet.url)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 打印数据包url</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tab(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@rel=next&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).click()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 点击下一页</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        break</span></span></code></pre></div><hr><h2 id="✅️-设置目标和启动监听" tabindex="-1">✅️ 设置目标和启动监听 <a class="header-anchor" href="#✅️-设置目标和启动监听" aria-label="Permalink to &quot;✅️ 设置目标和启动监听&quot;">​</a></h2><h3 id="📌-listen-start" tabindex="-1">📌 <code>listen.start()</code> <a class="header-anchor" href="#📌-listen-start" aria-label="Permalink to &quot;📌 `listen.start()`&quot;">​</a></h3><p>此方法用于启动监听器，启动同时可设置获取的目标特征。</p><p>可设置多个特征，符合条件的数据包会被获取。</p><p>如果监听未停止时调用这个方法，可清除已抓取的队列。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>targets</code></td><td style="text-align:center;"><code>str</code><br><code>list</code><br><code>tuple</code><br><code>set</code></td><td style="text-align:center;"><code>None</code></td><td>要匹配的数据包 url 特征，可用列表指定多个，为<code>True</code>时获取所有</td></tr><tr><td style="text-align:center;"><code>is_regex</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>None</code></td><td>设置的 target 是否正则表达式，为<code>None</code>时保持原来设置</td></tr><tr><td style="text-align:center;"><code>method</code></td><td style="text-align:center;"><code>str</code><br><code>list</code><br><code>tuple</code><br><code>set</code></td><td style="text-align:center;"><code>None</code></td><td>设置监听的请求类型，可指定多个，默认<code>(&#39;GET&#39;, &#39;POST&#39;)</code>，为<code>True</code>时监听所有，为<code>None</code>时保持原来设置</td></tr><tr><td style="text-align:center;"><code>res_type</code></td><td style="text-align:center;"><code>str</code><br><code>list</code><br><code>tuple</code><br><code>set</code></td><td style="text-align:center;"><code>None</code></td><td>设置监听的 ResourceType 类型，可指定多个，为<code>True</code>时监听所有，为<code>None</code>时保持原来设置</td></tr></tbody></table><p><strong>返回：</strong> <code>None</code></p><div class="warning custom-block"><p class="custom-block-title">注意</p><pre><code>当`targets`不为`None`，`is_regex`会自动设为`False`。  \n即如要使用正则，每次设置`targets`时需显式指定`is_regex=True`。  \n</code></pre></div><hr><h3 id="📌-listen-set-targets" tabindex="-1">📌 <code>listen.set_targets()</code> <a class="header-anchor" href="#📌-listen-set-targets" aria-label="Permalink to &quot;📌 `listen.set_targets()`&quot;">​</a></h3><p>此方法可在监听过程中修改监听目标，也可在监听开始前设置。</p><p>如监听未启动，不会启动监听。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>targets</code></td><td style="text-align:center;"><code>str</code><br><code>list</code><br><code>tuple</code><br><code>set</code></td><td style="text-align:center;"><code>True</code></td><td>要匹配的数据包 url 特征，可用列表指定多个，为<code>True</code>时获取所有</td></tr><tr><td style="text-align:center;"><code>is_regex</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>False</code></td><td>设置的 target 是否正则表达式</td></tr><tr><td style="text-align:center;"><code>method</code></td><td style="text-align:center;"><code>str</code><br><code>list</code><br><code>tuple</code><br><code>set</code></td><td style="text-align:center;"><code>(&#39;GET&#39;, &#39;POST&#39;)</code></td><td>设置监听的请求类型，可指定多个，默认<code>(&#39;GET&#39;, &#39;POST&#39;)</code>，为<code>True</code>时监听所有</td></tr><tr><td style="text-align:center;"><code>res_type</code></td><td style="text-align:center;"><code>str</code><br><code>list</code><br><code>tuple</code><br><code>set</code></td><td style="text-align:center;"><code>True</code></td><td>设置监听的 ResourceType 类型，可指定多个，为<code>True</code>时监听所有</td></tr></tbody></table><p><strong>返回：</strong> <code>None</code></p><hr><h2 id="✅️-等待和获取数据包" tabindex="-1">✅️ 等待和获取数据包 <a class="header-anchor" href="#✅️-等待和获取数据包" aria-label="Permalink to &quot;✅️ 等待和获取数据包&quot;">​</a></h2><h3 id="📌-listen-wait" tabindex="-1">📌 <code>listen.wait()</code> <a class="header-anchor" href="#📌-listen-wait" aria-label="Permalink to &quot;📌 `listen.wait()`&quot;">​</a></h3><p>此方法用于等待符合要求的数据包到达指定数量。</p><p>所有符合条件的数据包都会存储到队列，<code>wait()</code>实际上是逐个从队列中取结果，不用担心页面已刷走而丢包。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>count</code></td><td style="text-align:center;"><code>int</code></td><td style="text-align:center;"><code>1</code></td><td>需要捕捉的数据包数量</td></tr><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code><br><code>None</code></td><td style="text-align:center;"><code>None</code></td><td>超时时间（秒），为<code>None</code>无限等待</td></tr><tr><td style="text-align:center;"><code>fit_count</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>True</code></td><td>是否必需满足总数要求，如超时，为<code>True</code>返回<code>False</code>，为<code>False</code>返回已捕捉到的数据包</td></tr><tr><td style="text-align:center;"><code>raise_err</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>None</code></td><td>超时时是否抛出错误，为<code>None</code>时根据<code>Settings</code>设置，如不抛出，超时返回<code>False</code></td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>DataPacket</code></td><td><code>count</code>为<code>1</code>且未超时，返回一个数据包对象</td></tr><tr><td style="text-align:center;"><code>List[DataPacket]</code></td><td><code>count</code>大于<code>1</code>，未超时或<code>fit_count</code>为<code>False</code>，返回数据包对象组成的列表</td></tr><tr><td style="text-align:center;"><code>False</code></td><td>超时且<code>fit_count</code>为<code>True</code>时</td></tr></tbody></table><hr><h3 id="📌-listen-steps" tabindex="-1">📌 <code>listen.steps()</code> <a class="header-anchor" href="#📌-listen-steps" aria-label="Permalink to &quot;📌 `listen.steps()`&quot;">​</a></h3><p>此方法返回一个可迭代对象，用于<code>for</code>循环，每次循环可从中获取到的数据包。</p><p>可实现实时获取并返回数据包。</p><p>如果<code>timeout</code>超时，会中断循环。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>count</code></td><td style="text-align:center;"><code>int</code></td><td style="text-align:center;"><code>None</code></td><td>需捕获的数据包总数，为<code>None</code>表示无限</td></tr><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code><br><code>None</code></td><td style="text-align:center;"><code>None</code></td><td>每个数据包等待时间（秒），为<code>None</code>表示无限等待</td></tr><tr><td style="text-align:center;"><code>gap</code></td><td style="text-align:center;"><code>int</code></td><td style="text-align:center;"><code>1</code></td><td>每接收到多少个数据包返回一次数据</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>DataPacket</code></td><td><code>gap</code>为<code>1</code>时，返回一个数据包对象</td></tr><tr><td style="text-align:center;"><code>List[DataPacket]</code></td><td><code>gap</code>大于<code>1</code>，返回数据包对象组成的列表</td></tr></tbody></table><hr><h3 id="📌-listen-wait-silent" tabindex="-1">📌 <code>listen.wait_silent()</code> <a class="header-anchor" href="#📌-listen-wait-silent" aria-label="Permalink to &quot;📌 `listen.wait_silent()`&quot;">​</a></h3><p>此方法用于等待所有指定的请求完成。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code><br><code>None</code></td><td style="text-align:center;"><code>None</code></td><td>等待时间（秒），为<code>None</code>表示无限等待</td></tr><tr><td style="text-align:center;"><code>targets_only</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>False</code></td><td>是否只等待<code>targets</code>指定的请求结束</td></tr><tr><td style="text-align:center;"><code>limit</code></td><td style="text-align:center;"><code>int</code></td><td style="text-align:center;"><code>0</code></td><td>剩下多少个连接时视为结束</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>bool</code></td><td>是否等待成功</td></tr></tbody></table><hr><h2 id="✅️-暂停和恢复" tabindex="-1">✅️ 暂停和恢复 <a class="header-anchor" href="#✅️-暂停和恢复" aria-label="Permalink to &quot;✅️ 暂停和恢复&quot;">​</a></h2><h3 id="📌-listen-pause" tabindex="-1">📌 <code>listen.pause()</code> <a class="header-anchor" href="#📌-listen-pause" aria-label="Permalink to &quot;📌 `listen.pause()`&quot;">​</a></h3><p>此方法用于暂停监听。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>clear</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>True</code></td><td>是否清空已获取队列</td></tr></tbody></table><p><strong>返回：</strong> <code>None</code></p><hr><h3 id="📌-listen-resume" tabindex="-1">📌 <code>listen.resume()</code> <a class="header-anchor" href="#📌-listen-resume" aria-label="Permalink to &quot;📌 `listen.resume()`&quot;">​</a></h3><p>此方法用于继续暂停的监听。</p><p><strong>参数：</strong> 无</p><p><strong>返回：</strong><code>None</code></p><hr><h3 id="📌-listen-stop" tabindex="-1">📌 <code>listen.stop()</code> <a class="header-anchor" href="#📌-listen-stop" aria-label="Permalink to &quot;📌 `listen.stop()`&quot;">​</a></h3><p>此方法用于终止监听器的运行，会清空已获取的队列，不清空 targets。</p><p><strong>参数：</strong> 无</p><p><strong>返回：</strong><code>None</code></p><hr><h2 id="✅️-datapacket对象" tabindex="-1">✅️ <code>DataPacket</code>对象 <a class="header-anchor" href="#✅️-datapacket对象" aria-label="Permalink to &quot;✅️ `DataPacket`对象&quot;">​</a></h2><p><code>DataPacket</code>对象是获取到的数据包结果对象，包含了数据包各种信息。</p><h3 id="📌-对象属性" tabindex="-1">📌 <code>对象属性</code> <a class="header-anchor" href="#📌-对象属性" aria-label="Permalink to &quot;📌 `对象属性`&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:center;">属性名称</th><th style="text-align:center;">数据类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>tab_id</code></td><td style="text-align:center;"><code>str</code></td><td>产生这个请求的标签页的 id</td></tr><tr><td style="text-align:center;"><code>frameId</code></td><td style="text-align:center;"><code>str</code></td><td>产生这个请求的框架 id</td></tr><tr><td style="text-align:center;"><code>target</code></td><td style="text-align:center;"><code>str</code></td><td>产生这个请求的监听目标</td></tr><tr><td style="text-align:center;"><code>url</code></td><td style="text-align:center;"><code>str</code></td><td>数据包请求网址</td></tr><tr><td style="text-align:center;"><code>method</code></td><td style="text-align:center;"><code>str</code></td><td>请求类型</td></tr><tr><td style="text-align:center;"><code>is_failed</code></td><td style="text-align:center;"><code>bool</code></td><td>是否连接失败</td></tr><tr><td style="text-align:center;"><code>resourceType</code></td><td style="text-align:center;"><code>str</code></td><td>资源类型</td></tr><tr><td style="text-align:center;"><code>request</code></td><td style="text-align:center;"><code>Request</code></td><td>保存请求信息的对象</td></tr><tr><td style="text-align:center;"><code>response</code></td><td style="text-align:center;"><code>Response</code></td><td>保存响应信息的对象</td></tr><tr><td style="text-align:center;"><code>fail_info</code></td><td style="text-align:center;"><code>FailInof</code></td><td>保存连接失败信息的对象</td></tr></tbody></table><h3 id="📌-wait-extra-info" tabindex="-1">📌 <code>wait_extra_info()</code> <a class="header-anchor" href="#📌-wait-extra-info" aria-label="Permalink to &quot;📌 `wait_extra_info()`&quot;">​</a></h3><p>有些数据包有<code>extra_info</code>数据，但这些数据可能会迟于数据包返回，用这个方法可以等待这些数据加载到数据包对象。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code><br><code>None</code></td><td style="text-align:center;"><code>None</code></td><td>超时时间（秒），<code>None</code>为无限等待</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>bool</code></td><td>是否等待成功</td></tr></tbody></table><h3 id="📌-request对象" tabindex="-1">📌 <code>Request</code>对象 <a class="header-anchor" href="#📌-request对象" aria-label="Permalink to &quot;📌 `Request`对象&quot;">​</a></h3><p><code>Request</code>对象是<code>DataPacket</code>对象内用于保存请求信息的对象，有以下属性：</p><table tabindex="0"><thead><tr><th style="text-align:center;">属性名称</th><th style="text-align:center;">数据类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>url</code></td><td style="text-align:center;"><code>str</code></td><td>请求的网址</td></tr><tr><td style="text-align:center;"><code>method</code></td><td style="text-align:center;"><code>str</code></td><td>请求类型</td></tr><tr><td style="text-align:center;"><code>params</code></td><td style="text-align:center;"><code>dict</code></td><td>以<code>dict</code>格式返回 url 中的参数</td></tr><tr><td style="text-align:center;"><code>headers</code></td><td style="text-align:center;"><code>CaseInsensitiveDict</code></td><td>以大小写不敏感字典返回 headers 数据</td></tr><tr><td style="text-align:center;"><code>cookies</code></td><td style="text-align:center;"><code>List[dict]</code></td><td>返回发送的 cookies</td></tr><tr><td style="text-align:center;"><code>postData</code></td><td style="text-align:center;"><code>str</code><br><code>dict</code></td><td>post 类型的请求所提交的数据，json 以<code>dict</code>格式返回</td></tr></tbody></table><p>除以上常用属性，还有以下属性，自行体会：</p><p>urlFragment、hasPostData、postDataEntries、mixedContentType、initialPriority、referrerPolicy、isLinkPreload、trustTokenParams、isSameSite</p><hr><h3 id="📌-response对象" tabindex="-1">📌 <code>Response</code>对象 <a class="header-anchor" href="#📌-response对象" aria-label="Permalink to &quot;📌 `Response`对象&quot;">​</a></h3><p><code>Response</code>对象是<code>DataPacket</code>对象内用于保存响应信息的对象，有以下属性：</p><table tabindex="0"><thead><tr><th style="text-align:center;">属性名称</th><th style="text-align:center;">数据类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>url</code></td><td style="text-align:center;"><code>str</code></td><td>请求的网址</td></tr><tr><td style="text-align:center;"><code>headers</code></td><td style="text-align:center;"><code>CaseInsensitiveDict</code></td><td>以大小写不敏感字典返回 headers 数据</td></tr><tr><td style="text-align:center;"><code>body</code></td><td style="text-align:center;"><code>str</code><br><code>bytes</code><br><code>dict</code></td><td>如果是 json 格式，转换为<code>dict</code>；如果是 base64 格式，转换为<code>bytes</code>，其它格式直接返回文本</td></tr><tr><td style="text-align:center;"><code>raw_body</code></td><td style="text-align:center;"><code>str</code></td><td>未被处理的 body 文本</td></tr><tr><td style="text-align:center;"><code>status</code></td><td style="text-align:center;"><code>int</code></td><td>请求状态</td></tr><tr><td style="text-align:center;"><code>statusText</code></td><td style="text-align:center;"><code>str</code></td><td>请求状态文本</td></tr></tbody></table><p>除以上属性，还有以下属性，自行体会：</p><p>headersText、mimeType、requestHeaders、requestHeadersText、connectionReused、connectionId、remoteIPAddress、remotePort、fromDiskCache、fromServiceWorker、fromPrefetchCache、encodedDataLength、timing、serviceWorkerResponseSource、responseTime、cacheStorageCacheName、protocol、alternateProtocolUsage、securityState、securityDetails</p><hr><h3 id="📌-failinfo对象" tabindex="-1">📌 <code>FailInfo</code>对象 <a class="header-anchor" href="#📌-failinfo对象" aria-label="Permalink to &quot;📌 `FailInfo`对象&quot;">​</a></h3><p><code>FailInfo</code>对象是<code>DataPacket</code>对象内用于保存连接失败信息的对象，有以下属性：</p><table tabindex="0"><thead><tr><th style="text-align:center;">属性名称</th><th style="text-align:center;">数据类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>errorText</code></td><td style="text-align:center;"><code>str</code></td><td>错误信息文本</td></tr><tr><td style="text-align:center;"><code>canceled</code></td><td style="text-align:center;"><code>bool</code></td><td>是否取消</td></tr><tr><td style="text-align:center;"><code>blockedReason</code></td><td style="text-align:center;"><code>str</code></td><td>拦截原因</td></tr><tr><td style="text-align:center;"><code>corsErrorStatus</code></td><td style="text-align:center;"><code>str</code></td><td>cors 错误状态</td></tr></tbody></table>',95)])])}const k=e(i,[["render",n]]);export{g as __pageData,k as default};
