import{_ as e,c as a,o as s,aM as i}from"./chunks/framework.CWgDeAH8.js";const k=JSON.parse('{"title":"🛰️ 获取元素信息","description":"","frontmatter":{"id":"get_ele_info","title":"🛰️ 获取元素信息"},"headers":[],"relativePath":"dp/2.浏览器控制/get_ele_info.md","filePath":"dp/2.浏览器控制/get_ele_info.md"}'),o={name:"dp/2.浏览器控制/get_ele_info.md"};function d(r,t,n,l,h,c){return s(),a("div",null,[...t[0]||(t[0]=[i('<h1 id="🛰️-获取元素信息" tabindex="-1">🛰️ 获取元素信息 <a class="header-anchor" href="#🛰️-获取元素信息" aria-label="Permalink to &quot;🛰️ 获取元素信息&quot;">​</a></h1><p>浏览器元素对应的对象是<code>ChromiumElement</code>和<code>ShadowRoot</code>，本节介绍如何获取元素信息。</p><h2 id="✅️️-内容和属性" tabindex="-1">✅️️ 内容和属性 <a class="header-anchor" href="#✅️️-内容和属性" aria-label="Permalink to &quot;✅️️ 内容和属性&quot;">​</a></h2><h3 id="📌-tag" tabindex="-1">📌 <code>tag</code> <a class="header-anchor" href="#📌-tag" aria-label="Permalink to &quot;📌 `tag`&quot;">​</a></h3><p>此属性返回元素的标签名。</p><p><strong>返回类型：</strong><code>str</code></p><hr><h3 id="📌-html" tabindex="-1">📌 <code>html</code> <a class="header-anchor" href="#📌-html" aria-label="Permalink to &quot;📌 `html`&quot;">​</a></h3><p>此属性返回元素的<code>outerHTML</code>文本。</p><p><strong>返回类型：</strong><code>str</code></p><hr><h3 id="📌-inner-html" tabindex="-1">📌 <code>inner_html</code> <a class="header-anchor" href="#📌-inner-html" aria-label="Permalink to &quot;📌 `inner_html`&quot;">​</a></h3><p>此属性返回元素的<code>innerHTML</code>文本。</p><p><strong>返回类型：</strong><code>str</code></p><hr><h3 id="📌-text" tabindex="-1">📌 <code>text</code> <a class="header-anchor" href="#📌-text" aria-label="Permalink to &quot;📌 `text`&quot;">​</a></h3><p>此属性返回元素内所有文本组合成的字符串。<br> 该字符串已格式化，即已转码，已去除多余换行符，符合人读取习惯，便于直接使用。</p><p><strong>返回类型：</strong><code>str</code></p><hr><h3 id="📌-raw-text" tabindex="-1">📌 <code>raw_text</code> <a class="header-anchor" href="#📌-raw-text" aria-label="Permalink to &quot;📌 `raw_text`&quot;">​</a></h3><p>此属性返回元素内未经处理的原始文本。</p><p><strong>返回类型：</strong><code>str</code></p><hr><h3 id="📌-texts" tabindex="-1">📌 <code>texts()</code> <a class="header-anchor" href="#📌-texts" aria-label="Permalink to &quot;📌 `texts()`&quot;">​</a></h3><p>此方法返回元素内所有<strong>直接</strong>子节点的文本，包括元素和文本节点。 它有一个参数<code>text_node_only</code>，为<code>True</code>时则只获取只返回不被包裹的文本节点。这个方法适用于获取文本节点和元素节点混排的情况。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>text_node_only</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>False</code></td><td>是否只返回文本节点</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>List[str]</code></td><td>文本列表</td></tr></tbody></table><hr><h3 id="📌-comments" tabindex="-1">📌 <code>comments</code> <a class="header-anchor" href="#📌-comments" aria-label="Permalink to &quot;📌 `comments`&quot;">​</a></h3><p>此属性以列表形式返回元素内的注释。</p><p><strong>返回类型：</strong><code>List[str]</code></p><hr><h3 id="📌-attrs" tabindex="-1">📌 <code>attrs</code> <a class="header-anchor" href="#📌-attrs" aria-label="Permalink to &quot;📌 `attrs`&quot;">​</a></h3><p>此属性以字典形式返回元素所有属性及值。</p><p><strong>返回类型：</strong><code>dict</code></p><hr><h3 id="📌-attr" tabindex="-1">📌 <code>attr()</code> <a class="header-anchor" href="#📌-attr" aria-label="Permalink to &quot;📌 `attr()`&quot;">​</a></h3><p>此方法返回元素某个 attribute 属性值。它接收一个字符串参数，返回该属性值文本，无该属性时返回<code>None</code>。<br> 此属性返回的<code>src</code>、<code>href</code>属性为已补充完整的路径。<code>text</code>属性为已格式化文本。 如果要获取未补充完整路径的<code>src</code>或<code>href</code>属性，可以用<code>attrs[&#39;src&#39;]</code>。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>name</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;">必填</td><td>属性名称</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>str</code></td><td>属性值文本</td></tr><tr><td style="text-align:center;"><code>None</code></td><td>没有该属性返回<code>None</code></td></tr></tbody></table><hr><h3 id="📌-property" tabindex="-1">📌 <code>property()</code> <a class="header-anchor" href="#📌-property" aria-label="Permalink to &quot;📌 `property()`&quot;">​</a></h3><p>此方法返回<code>property</code>属性值。它接收一个字符串参数，返回该参数的属性值。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>name</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;">必填</td><td>属性名称</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>str</code></td><td>属性值</td></tr></tbody></table><hr><h3 id="📌-value" tabindex="-1">📌 <code>value</code> <a class="header-anchor" href="#📌-value" aria-label="Permalink to &quot;📌 `value`&quot;">​</a></h3><p>此方法返回元素的<code>value</code>值。</p><p><strong>返回类型：</strong><code>str</code></p><hr><h3 id="📌-link" tabindex="-1">📌 <code>link</code> <a class="header-anchor" href="#📌-link" aria-label="Permalink to &quot;📌 `link`&quot;">​</a></h3><p>此方法返回元素的<code>href</code>属性或<code>src</code>属性，没有这两个属性则返回<code>None</code>。</p><p><strong>返回类型：</strong><code>str</code></p><hr><h3 id="📌-pseudo-before" tabindex="-1">📌 <code>pseudo.before</code> <a class="header-anchor" href="#📌-pseudo-before" aria-label="Permalink to &quot;📌 `pseudo.before`&quot;">​</a></h3><p>此属性以文本形式返回当前元素的<code>::before</code>伪元素内容。</p><p><strong>类型：</strong><code>str</code></p><hr><h3 id="📌-pseudo-after" tabindex="-1">📌 <code>pseudo.after</code> <a class="header-anchor" href="#📌-pseudo-after" aria-label="Permalink to &quot;📌 `pseudo.after`&quot;">​</a></h3><p>此属性以文本形式返回当前元素的<code>::after</code>伪元素内容。</p><p><strong>类型：</strong><code>str</code></p><hr><h3 id="📌-style" tabindex="-1">📌 <code>style()</code> <a class="header-anchor" href="#📌-style" aria-label="Permalink to &quot;📌 `style()`&quot;">​</a></h3><p>该方法返回元素 css 样式属性值，可获取伪元素的属性。它有两个参数，<code>style</code>参数输入样式属性名称，<code>pseudo_ele</code> 参数输入伪元素名称，省略则获取普通元素的 css 样式属性。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>style</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;">必填</td><td>样式名称</td></tr><tr><td style="text-align:center;"><code>pseudo_ele</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;"><code>&#39;&#39;</code></td><td>伪元素名称（如有）</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>str</code></td><td>样式属性值</td></tr></tbody></table><hr><h3 id="📌-shadow-root" tabindex="-1">📌 <code>shadow_root</code> <a class="header-anchor" href="#📌-shadow-root" aria-label="Permalink to &quot;📌 `shadow_root`&quot;">​</a></h3><p>此属性返回元素内的 shadow-root 对象，没有的返回<code>None</code>。</p><p><strong>类型：</strong><code>ShadowRoot</code></p><hr><h3 id="📌-child-count" tabindex="-1">📌 <code>child_count</code> <a class="header-anchor" href="#📌-child-count" aria-label="Permalink to &quot;📌 `child_count`&quot;">​</a></h3><p>此属性返回元素内第一级子元素个数。</p><p><strong>类型：</strong><code>int</code></p><hr><h2 id="✅️️-大小和位置" tabindex="-1">✅️️ 大小和位置 <a class="header-anchor" href="#✅️️-大小和位置" aria-label="Permalink to &quot;✅️️ 大小和位置&quot;">​</a></h2><h3 id="📌-rect-size" tabindex="-1">📌 <code>rect.size</code> <a class="header-anchor" href="#📌-rect-size" aria-label="Permalink to &quot;📌 `rect.size`&quot;">​</a></h3><p>此属性以元组形式返回元素的大小。</p><p><strong>类型：</strong><code>Tuple[float, float]</code></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ele.rect.size</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 返回：(50, 50)</span></span></code></pre></div><hr><h3 id="📌-rect-location" tabindex="-1">📌 <code>rect.location</code> <a class="header-anchor" href="#📌-rect-location" aria-label="Permalink to &quot;📌 `rect.location`&quot;">​</a></h3><p>此属性以元组形式返回元素<strong>左上角</strong>在<strong>整个页面</strong>中的坐标。</p><p><strong>类型：</strong><code>Tuple[float, float]</code></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">loc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ele.rect.location</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 返回：(50, 50)</span></span></code></pre></div><hr><h3 id="📌-rect-midpoint" tabindex="-1">📌 <code>rect.midpoint</code> <a class="header-anchor" href="#📌-rect-midpoint" aria-label="Permalink to &quot;📌 `rect.midpoint`&quot;">​</a></h3><p>此属性以元组形式返回元素<strong>中点</strong>在<strong>整个页面</strong>中的坐标。</p><p><strong>类型：</strong><code>Tuple[float, float]</code></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">loc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ele.rect.midpoint</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 返回：(55, 55)</span></span></code></pre></div><hr><h3 id="📌-rect-click-point" tabindex="-1">📌 <code>rect.click_point</code> <a class="header-anchor" href="#📌-rect-click-point" aria-label="Permalink to &quot;📌 `rect.click_point`&quot;">​</a></h3><p>此属性以元组形式返回元素<strong>点击点</strong>在<strong>整个页面</strong>中的坐标。</p><p>点击点是指<code>click()</code>方法点击时的位置，位于元素中上部。</p><p><strong>类型：</strong><code>Tuple[float, float]</code></p><hr><h3 id="📌-rect-corners" tabindex="-1">📌 <code>rect.corners</code> <a class="header-anchor" href="#📌-rect-corners" aria-label="Permalink to &quot;📌 `rect.corners`&quot;">​</a></h3><p>此属性以列表形式返回元素四个角在页面中的坐标，顺序：左上、右上、右下、左下。</p><p><strong>类型：</strong><code>((float, float), (float, float), (float, float), (float, float),)</code></p><hr><h3 id="📌-rect-viewport-corners" tabindex="-1">📌 <code>rect.viewport_corners</code> <a class="header-anchor" href="#📌-rect-viewport-corners" aria-label="Permalink to &quot;📌 `rect.viewport_corners`&quot;">​</a></h3><p>此属性以列表形式返回元素四个角在视口中的坐标，顺序：左上、右上、右下、左下。</p><p><strong>类型：</strong><code>list[(float, float), (float, float), (float, float), (float, float)]</code></p><hr><h3 id="📌-rect-viewport-location" tabindex="-1">📌 <code>rect.viewport_location</code> <a class="header-anchor" href="#📌-rect-viewport-location" aria-label="Permalink to &quot;📌 `rect.viewport_location`&quot;">​</a></h3><p>此属性以元组形式返回元素<strong>左上角</strong>在<strong>当前视口</strong>中的坐标。</p><p><strong>类型：</strong><code>Tuple[float, float]</code></p><hr><h3 id="📌-rect-viewport-midpoint" tabindex="-1">📌 <code>rect.viewport_midpoint</code> <a class="header-anchor" href="#📌-rect-viewport-midpoint" aria-label="Permalink to &quot;📌 `rect.viewport_midpoint`&quot;">​</a></h3><p>此属性以元组形式返回元素<strong>中点</strong>在<strong>当前视口</strong>中的坐标。</p><p><strong>类型：</strong><code>Tuple[floatt, float]</code></p><hr><h3 id="📌-rect-viewport-click-point" tabindex="-1">📌 <code>rect.viewport_click_point</code> <a class="header-anchor" href="#📌-rect-viewport-click-point" aria-label="Permalink to &quot;📌 `rect.viewport_click_point`&quot;">​</a></h3><p>此属性以元组形式返回元素<strong>点击点</strong>在<strong>当前视口</strong>中的坐标。</p><p><strong>类型：</strong><code>Tuple[float, float]</code></p><hr><h3 id="📌-rect-screen-location" tabindex="-1">📌 <code>rect.screen_location</code> <a class="header-anchor" href="#📌-rect-screen-location" aria-label="Permalink to &quot;📌 `rect.screen_location`&quot;">​</a></h3><p>此属性以元组形式返回元素<strong>左上角</strong>在<strong>屏幕</strong>中的坐标。</p><p><strong>类型：</strong><code>Tuple[float, float]</code></p><hr><h3 id="📌-rect-screen-midpoint" tabindex="-1">📌 <code>rect.screen_midpoint</code> <a class="header-anchor" href="#📌-rect-screen-midpoint" aria-label="Permalink to &quot;📌 `rect.screen_midpoint`&quot;">​</a></h3><p>此属性以元组形式返回元素<strong>中点</strong>在<strong>屏幕</strong>中的坐标。</p><p><strong>类型：</strong><code>Tuple[float, float]</code></p><hr><h3 id="📌-rect-screen-click-point" tabindex="-1">📌 <code>rect.screen_click_point</code> <a class="header-anchor" href="#📌-rect-screen-click-point" aria-label="Permalink to &quot;📌 `rect.screen_click_point`&quot;">​</a></h3><p>此属性以元组形式返回元素<strong>点击点</strong>在<strong>屏幕</strong>中的坐标。</p><p><strong>类型：</strong><code>Tuple[float, float]</code></p><hr><h3 id="📌-rect-scroll-position" tabindex="-1">📌 <code>rect.scroll_position</code> <a class="header-anchor" href="#📌-rect-scroll-position" aria-label="Permalink to &quot;📌 `rect.scroll_position`&quot;">​</a></h3><p>此属性返回元素内滚动条位置，格式：(x, y)。</p><p><strong>类型：</strong><code>Tuple[float, float]</code></p><hr><h3 id="📌-xpath" tabindex="-1">📌 <code>xpath</code> <a class="header-anchor" href="#📌-xpath" aria-label="Permalink to &quot;📌 `xpath`&quot;">​</a></h3><p>此属性返回当前元素在页面中 xpath 的绝对路径。</p><p><strong>返回类型：</strong><code>str</code></p><hr><h3 id="📌-css-path" tabindex="-1">📌 <code>css_path</code> <a class="header-anchor" href="#📌-css-path" aria-label="Permalink to &quot;📌 `css_path`&quot;">​</a></h3><p>此属性返回当前元素在页面中 css selector 的绝对路径。</p><p><strong>返回类型：</strong><code>str</code></p><hr><h2 id="✅️️-元素列表中批量获取信息" tabindex="-1">✅️️ 元素列表中批量获取信息 <a class="header-anchor" href="#✅️️-元素列表中批量获取信息" aria-label="Permalink to &quot;✅️️ 元素列表中批量获取信息&quot;">​</a></h2><p><code>eles()</code>等返回的元素列表，自带<code>get</code>属性，可用于获取指定信息。</p><h3 id="📌-示例" tabindex="-1">📌 示例 <a class="header-anchor" href="#📌-示例" aria-label="Permalink to &quot;📌 示例&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SessionPage</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SessionPage()</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">page.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://www.baidu.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">eles </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#s-top-left&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).eles(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;t:a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(eles.get.texts())  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 获取所有元素的文本</span></span></code></pre></div><p><strong>输出：</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;新闻&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hao123&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;地图&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;贴吧&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;视频&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;图片&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;网盘&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;文库&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;更多&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;翻译&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;学术&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;百科&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;知道&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;健康&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;营销推广&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;直播&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;音乐&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;橙篇&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;查看全部百度产品 &gt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h3 id="📌-get-attrs" tabindex="-1">📌 <code>get.attrs()</code> <a class="header-anchor" href="#📌-get-attrs" aria-label="Permalink to &quot;📌 `get.attrs()`&quot;">​</a></h3><p>此方法用于返回所有元素指定的 attribute 属性组成的列表。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>name</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;">必填</td><td>属性名称</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>List[str]</code></td><td>属性文本组成的列表</td></tr></tbody></table><hr><h3 id="📌-get-links" tabindex="-1">📌 <code>get.links()</code> <a class="header-anchor" href="#📌-get-links" aria-label="Permalink to &quot;📌 `get.links()`&quot;">​</a></h3><p>此方法用于返回所有元素的<code>link</code>属性组成的列表。</p><p><strong>参数：</strong> 无</p><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>List[str]</code></td><td>链接文本组成的列表</td></tr></tbody></table><hr><h3 id="📌-get-texts" tabindex="-1">📌 <code>get.texts()</code> <a class="header-anchor" href="#📌-get-texts" aria-label="Permalink to &quot;📌 `get.texts()`&quot;">​</a></h3><p>此方法用于返回所有元素的<code>text</code>属性组成的列表。</p><p><strong>参数：</strong> 无</p><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>List[str]</code></td><td>元素文本组成的列表</td></tr></tbody></table><hr><div class="wwads-cn wwads-horizontal" data-id="317"></div><br><h2 id="✅️️-状态信息" tabindex="-1">✅️️ 状态信息 <a class="header-anchor" href="#✅️️-状态信息" aria-label="Permalink to &quot;✅️️ 状态信息&quot;">​</a></h2><h3 id="📌timeout" tabindex="-1">📌<code>timeout</code> <a class="header-anchor" href="#📌timeout" aria-label="Permalink to &quot;📌`timeout`&quot;">​</a></h3><p>此属性返回获取内部或相对定位元素的超时时间，实际上是元素所在页面的超时设置。</p><p><strong>类型：</strong><code>float</code></p><hr><h3 id="📌states-is-in-viewport" tabindex="-1">📌<code>states.is_in_viewport</code> <a class="header-anchor" href="#📌states-is-in-viewport" aria-label="Permalink to &quot;📌`states.is_in_viewport`&quot;">​</a></h3><p>此属性以布尔值方式返回元素是否在视口中，以元素可以接受点击的点为判断。</p><p><strong>类型：</strong><code>bool</code></p><hr><h3 id="📌states-is-whole-in-viewport" tabindex="-1">📌<code>states.is_whole_in_viewport</code> <a class="header-anchor" href="#📌states-is-whole-in-viewport" aria-label="Permalink to &quot;📌`states.is_whole_in_viewport`&quot;">​</a></h3><p>此属性以布尔值方式返回元素是否整个在视口中。</p><p><strong>类型：</strong><code>bool</code></p><hr><h3 id="📌states-is-alive" tabindex="-1">📌<code>states.is_alive</code> <a class="header-anchor" href="#📌states-is-alive" aria-label="Permalink to &quot;📌`states.is_alive`&quot;">​</a></h3><p>此属性以布尔值形式返回当前元素是否仍可用。用于判断 d 模式下是否因页面刷新而导致元素失效。</p><p><strong>类型：</strong><code>bool</code></p><hr><h3 id="📌-states-is-checked" tabindex="-1">📌 <code>states.is_checked</code> <a class="header-anchor" href="#📌-states-is-checked" aria-label="Permalink to &quot;📌 `states.is_checked`&quot;">​</a></h3><p>此属性以布尔值返回表单单选或多选元素是否选中。</p><p><strong>类型：</strong><code>bool</code></p><hr><h3 id="📌-states-is-selected" tabindex="-1">📌 <code>states.is_selected</code> <a class="header-anchor" href="#📌-states-is-selected" aria-label="Permalink to &quot;📌 `states.is_selected`&quot;">​</a></h3><p>此属性以布尔值返回<code>&lt;select&gt;</code>元素中的项是否选中。</p><p><strong>类型：</strong><code>bool</code></p><hr><h3 id="📌-states-is-enabled" tabindex="-1">📌 <code>states.is_enabled</code> <a class="header-anchor" href="#📌-states-is-enabled" aria-label="Permalink to &quot;📌 `states.is_enabled`&quot;">​</a></h3><p>此属性以布尔值返回元素是否可用。</p><p><strong>类型：</strong><code>bool</code></p><hr><h3 id="📌-states-is-displayed" tabindex="-1">📌 <code>states.is_displayed</code> <a class="header-anchor" href="#📌-states-is-displayed" aria-label="Permalink to &quot;📌 `states.is_displayed`&quot;">​</a></h3><p>此属性以布尔值返回元素是否可见。</p><p><strong>类型：</strong><code>bool</code></p><hr><h3 id="📌-states-is-covered" tabindex="-1">📌 <code>states.is_covered</code> <a class="header-anchor" href="#📌-states-is-covered" aria-label="Permalink to &quot;📌 `states.is_covered`&quot;">​</a></h3><p>此属性返回元素是否被其它元素覆盖。如被覆盖，返回覆盖元素的 id，否则返回<code>False</code></p><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>False</code></td><td style="text-align:center;">未被覆盖，返回<code>False</code></td></tr><tr><td style="text-align:center;"><code>int</code></td><td style="text-align:center;">被覆盖时返回覆盖元素的 id</td></tr></tbody></table><hr><h3 id="📌-states-is-clickable" tabindex="-1">📌 <code>states.is_clickable</code> <a class="header-anchor" href="#📌-states-is-clickable" aria-label="Permalink to &quot;📌 `states.is_clickable`&quot;">​</a></h3><p>此属性返回元素是否可被模拟点击，从是否有大小、是否可用、是否显示、是否响应点击判断，不判断是否被遮挡。</p><p><strong>类型：</strong><code>bool</code></p><hr><h3 id="📌-states-has-rect" tabindex="-1">📌 <code>states.has_rect</code> <a class="header-anchor" href="#📌-states-has-rect" aria-label="Permalink to &quot;📌 `states.has_rect`&quot;">​</a></h3><p>此属性返回元素是否拥有大小和位置信息，有则返回四个角在页面上的坐标组成的列表，没有则返回<code>False</code>。</p><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>list</code></td><td>存在大小和位置信息时，以[(int, int), ...] 格式返回元素四个角的坐标，顺序：左上、右上、右下、左下</td></tr><tr><td style="text-align:center;"><code>False</code></td><td>不存在时返回<code>False</code></td></tr></tbody></table><hr><h2 id="✅️️-保存元素" tabindex="-1">✅️️ 保存元素 <a class="header-anchor" href="#✅️️-保存元素" aria-label="Permalink to &quot;✅️️ 保存元素&quot;">​</a></h2><p>保存功能是本库一个特色功能，可以直接读取浏览器缓存，无需依赖另外的 ui 库或重新下载就可以保存页面资源。</p><p>作为对比，selenium 无法自身实现图片另存，往往需要通过使用 ui 工具进行辅助，不仅效率和可靠性低，还占用键鼠资源。</p><h3 id="📌-src" tabindex="-1">📌 <code>src()</code> <a class="header-anchor" href="#📌-src" aria-label="Permalink to &quot;📌 `src()`&quot;">​</a></h3><p>此方法用于返回元素<code>src</code>属性所使用的资源。base64 的可转为<code>bytes</code>返回，其它的以<code>str</code>返回。无资源的返回<code>None</code>。</p><p>例如，可获取页面上图片字节数据，用于识别内容，或保存到文件。<code>&lt;script&gt;</code>和<code>&lt;link&gt;</code>标签也可获取文件内容。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><pre><code>获取`&lt;script&gt;`或`&lt;link&gt;`文件内容时，视网站情况不一定会成功。\n</code></pre></div><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>等待资源加载超时时间（秒），为<code>None</code>时使用元素所在页面<code>timeout</code>属性</td></tr><tr><td style="text-align:center;"><code>base64_to_bytes</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>True</code></td><td>为<code>True</code>时，如果是 base64 数据，转换为<code>bytes</code>格式</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>str</code></td><td>资源字符串</td></tr><tr><td style="text-align:center;"><code>None</code></td><td>无资源的返回<code>None</code></td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">img </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tag:img&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> img.src()</span></span></code></pre></div><hr><h3 id="📌-save" tabindex="-1">📌 <code>save()</code> <a class="header-anchor" href="#📌-save" aria-label="Permalink to &quot;📌 `save()`&quot;">​</a></h3><p>此方法用于保存<code>src()</code>方法获取到的资源到文件。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>path</code></td><td style="text-align:center;"><code>str</code><br><code>Path</code></td><td style="text-align:center;"><code>None</code></td><td>文件保存路径，为<code>None</code>时保存到当前文件夹</td></tr><tr><td style="text-align:center;"><code>name</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;"><code>None</code></td><td>文件名称，需包含后缀，为<code>None</code>时从资源 url 获取</td></tr><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>等待资源加载超时时间（秒），为<code>None</code>时使用元素所在页面<code>timeout</code>属性</td></tr><tr><td style="text-align:center;"><code>rename</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>True</code></td><td>遇到重名文件时是否自动重命名</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>str</code></td><td>保存路径</td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">img </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tag:img&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">img.save(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;D:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">img.png&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h2 id="✅️️-比较元素" tabindex="-1">✅️️ 比较元素 <a class="header-anchor" href="#✅️️-比较元素" aria-label="Permalink to &quot;✅️️ 比较元素&quot;">​</a></h2><p>两个元素对象可以用<code>==</code>来比较，以判断它们是否指向同一个元素。</p><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;t:div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;t:div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ele1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele2)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出True</span></span></code></pre></div>',231)])])}const g=e(o,[["render",d]]);export{k as __pageData,g as default};
