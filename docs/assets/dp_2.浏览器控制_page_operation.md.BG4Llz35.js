import{_ as e,c as s,o as a,aM as i}from"./chunks/framework.CWgDeAH8.js";const g=JSON.parse('{"title":"🛰️ 页面交互","description":"","frontmatter":{"id":"page_operation","title":"🛰️ 页面交互"},"headers":[],"relativePath":"dp/2.浏览器控制/page_operation.md","filePath":"dp/2.浏览器控制/page_operation.md"}'),d={name:"dp/2.浏览器控制/page_operation.md"};function n(l,t,o,r,h,c){return a(),s("div",null,[...t[0]||(t[0]=[i('<h1 id="🛰️-页面交互" tabindex="-1">🛰️ 页面交互 <a class="header-anchor" href="#🛰️-页面交互" aria-label="Permalink to &quot;🛰️ 页面交互&quot;">​</a></h1><div class="wwads-cn wwads-horizontal" data-id="317"></div><br><p>本节介绍浏览器页面交互功能。</p><p>一个 Tab 对象控制一个浏览器的标签页，是页面控制的主要单位。</p><h2 id="✅️️-页面跳转" tabindex="-1">✅️️ 页面跳转 <a class="header-anchor" href="#✅️️-页面跳转" aria-label="Permalink to &quot;✅️️ 页面跳转&quot;">​</a></h2><h3 id="📌-get" tabindex="-1">📌 <code>get()</code> <a class="header-anchor" href="#📌-get" aria-label="Permalink to &quot;📌 `get()`&quot;">​</a></h3><p>详见 “访问网页” 章节。</p><hr><h3 id="📌-back" tabindex="-1">📌 <code>back()</code> <a class="header-anchor" href="#📌-back" aria-label="Permalink to &quot;📌 `back()`&quot;">​</a></h3><p>此方法用于在浏览历史中后退若干步。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>steps</code></td><td style="text-align:center;"><code>int</code></td><td style="text-align:center;"><code>1</code></td><td>后退步数</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.back(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 后退两个网页</span></span></code></pre></div><hr><h3 id="📌-forward" tabindex="-1">📌 <code>forward()</code> <a class="header-anchor" href="#📌-forward" aria-label="Permalink to &quot;📌 `forward()`&quot;">​</a></h3><p>此方法用于在浏览历史中前进若干步。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>steps</code></td><td style="text-align:center;"><code>int</code></td><td style="text-align:center;"><code>1</code></td><td>前进步数</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.forward(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 前进两步</span></span></code></pre></div><hr><h3 id="📌-refresh" tabindex="-1">📌 <code>refresh()</code> <a class="header-anchor" href="#📌-refresh" aria-label="Permalink to &quot;📌 `refresh()`&quot;">​</a></h3><p>此方法用于刷新当前页面。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ignore_cache</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>False</code></td><td>刷新时是否忽略缓存</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.refresh()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 刷新页面</span></span></code></pre></div><hr><h3 id="📌-stop-loading" tabindex="-1">📌 <code>stop_loading()</code> <a class="header-anchor" href="#📌-stop-loading" aria-label="Permalink to &quot;📌 `stop_loading()`&quot;">​</a></h3><p>此方法用于强制停止当前页面加载。</p><p><strong>参数：</strong> 无</p><p><strong>返回：</strong><code>None</code></p><hr><h3 id="📌-set-blocked-urls" tabindex="-1">📌 <code>set.blocked_urls()</code> <a class="header-anchor" href="#📌-set-blocked-urls" aria-label="Permalink to &quot;📌 `set.blocked_urls()`&quot;">​</a></h3><p>此方法用于设置忽略的连接。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>urls</code></td><td style="text-align:center;"><code>str</code><br><code>list</code><br><code>tuple</code><br><code>None</code></td><td style="text-align:center;">必填</td><td>要忽略的 url，可传入多个，可用<code>&#39;*&#39;</code>通配符，传入<code>None</code>时清空已设置的项</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.set.blocked_urls(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*.css*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置不加载css文件</span></span></code></pre></div><hr><h2 id="✅️️-元素管理" tabindex="-1">✅️️ 元素管理 <a class="header-anchor" href="#✅️️-元素管理" aria-label="Permalink to &quot;✅️️ 元素管理&quot;">​</a></h2><h3 id="📌-add-ele" tabindex="-1">📌 <code>add_ele()</code> <a class="header-anchor" href="#📌-add-ele" aria-label="Permalink to &quot;📌 `add_ele()`&quot;">​</a></h3><p>此方法用于创建一个元素。可选择是否插入到 DOM。</p><p><code>html_or_info</code>传入元素完整 html 文本时，会插入到 DOM。如<code>insert_to</code>参数为<code>None</code>，插入到<code>body</code>元素。</p><p>传入元素信息（格式：<code>(tag, {name: value})</code>）时，如<code>insert_to</code>参数为<code>None</code>，不插入到 DOM。此时返回的元素需用 js 方式点击。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>html_or_info</code></td><td style="text-align:center;"><code>str</code><br><code>Tuple[str, dict]</code></td><td style="text-align:center;">必填</td><td>新元素的 html 文本或信息；为<code>tuple</code>可新建不加入到 DOM 的元素</td></tr><tr><td style="text-align:center;"><code>insert_to</code></td><td style="text-align:center;"><code>str</code><br><code>ChromiumElement</code><br><code>Tuple[str, str]</code></td><td style="text-align:center;"><code>None</code></td><td>插入到哪个元素中，可接收元素对象和定位符；如为<code>None</code>，<code>html_or_info</code>是<code>str</code>时添加到 body，否则不添加到 DOM</td></tr><tr><td style="text-align:center;"><code>before</code></td><td style="text-align:center;"><code>str</code><br><code>ChromiumElement</code><br><code>Tuple[str, str]</code></td><td style="text-align:center;"><code>None</code></td><td>在哪个子节点前面插入，可接收对象和定位符，为<code>None</code>插入到父元素末尾</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumElement</code></td><td style="text-align:center;">新建的元素对象</td></tr></tbody></table><p><strong>添加一个可见的元素：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium().latest_tab</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://www.baidu.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">html </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&lt;a href=&quot;http://DrissionPage.cn&quot; target=&quot;blank&quot;&gt;DrissionPage &lt;/a&gt; &#39;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab.add_ele(html, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#s-top-left&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;新闻&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 插入到导航栏</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele.click()</span></span></code></pre></div><p><strong>添加一个不可见的元素：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium().latest_tab</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">info </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;innerText&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;DrissionPage&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;href&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://DrissionPage.cn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;target&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;blank&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab.add_ele(info)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele.click(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 需用js点击</span></span></code></pre></div><hr><h3 id="📌-remove-ele" tabindex="-1">📌 <code>remove_ele()</code> <a class="header-anchor" href="#📌-remove-ele" aria-label="Permalink to &quot;📌 `remove_ele()`&quot;">​</a></h3><p>此方法用于从页面上删除一个元素。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>loc_or_ele</code></td><td style="text-align:center;"><code>str</code><br><code>Tuple[str, str]</code><br><code>ChromiumElement</code></td><td style="text-align:center;">必填</td><td>要删除的元素，可以是元素或定位符</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除一个已获得的元素</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tag:a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.remove_ele(ele)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除用定位符找到的元素</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.remove_ele(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tag:a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h2 id="✅️️-执行脚本或命令" tabindex="-1">✅️️ 执行脚本或命令 <a class="header-anchor" href="#✅️️-执行脚本或命令" aria-label="Permalink to &quot;✅️️ 执行脚本或命令&quot;">​</a></h2><h3 id="📌-run-js" tabindex="-1">📌 <code>run_js()</code> <a class="header-anchor" href="#📌-run-js" aria-label="Permalink to &quot;📌 `run_js()`&quot;">​</a></h3><p>此方法用于执行 js 脚本。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>script</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;">必填</td><td>js 脚本文本或脚本文件路径</td></tr><tr><td style="text-align:center;"><code>*args</code></td><td style="text-align:center;">-</td><td style="text-align:center;">无</td><td>传入的参数，按顺序在js文本中对应<code>arguments[0]</code>、<code>arguments[1]</code>...</td></tr><tr><td style="text-align:center;"><code>as_expr</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>False</code></td><td>是否作为表达式运行，为<code>True</code>时<code>args</code>参数无效</td></tr><tr><td style="text-align:center;"><code>timetout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>js 超时时间（秒），为<code>None</code>则使用页面<code>timeouts.script</code>设置</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>Any</code></td><td>脚本执行结果</td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用传入参数的方式执行 js 脚本显示弹出框显示 Hello world!</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.run_js(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;alert(arguments[0]+arguments[1]);&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; world!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">注意</p><pre><code>- 如果`as_expr`为`True`，脚本应是返回一个结果的形式，并且不能有`return`\n- 如果`as_expr`不为`True&#39;，脚本应尽量写成一个方法。\n</code></pre></div><hr><h3 id="📌-run-js-loaded" tabindex="-1">📌 <code>run_js_loaded()</code> <a class="header-anchor" href="#📌-run-js-loaded" aria-label="Permalink to &quot;📌 `run_js_loaded()`&quot;">​</a></h3><p>此方法用于运行 js 脚本，执行前等待页面加载完毕。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>script</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;">必填</td><td>js 脚本文本</td></tr><tr><td style="text-align:center;"><code>*args</code></td><td style="text-align:center;">-</td><td style="text-align:center;">无</td><td>传入的参数，按顺序在js文本中对应<code>arguments[0]</code>、<code>arguments[1]</code>...</td></tr><tr><td style="text-align:center;"><code>as_expr</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>False</code></td><td>是否作为表达式运行，为<code>True</code>时<code>args</code>参数无效</td></tr><tr><td style="text-align:center;"><code>timetout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>js 超时时间（秒），为<code>None</code>则使用页面<code>timeouts.script</code>设置</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>Any</code></td><td>脚本执行结果</td></tr></tbody></table><hr><h3 id="📌-run-async-js" tabindex="-1">📌 <code>run_async_js()</code> <a class="header-anchor" href="#📌-run-async-js" aria-label="Permalink to &quot;📌 `run_async_js()`&quot;">​</a></h3><p>此方法用于以异步方式执行 js 代码。</p><p><strong>参数：</strong></p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>script</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;">必填</td><td>js 脚本文本</td></tr><tr><td style="text-align:center;"><code>*args</code></td><td style="text-align:center;">-</td><td style="text-align:center;">无</td><td>传入的参数，按顺序在js文本中对应<code>arguments[0]</code>、<code>arguments[1]</code>...</td></tr><tr><td style="text-align:center;"><code>as_expr</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>False</code></td><td>是否作为表达式运行，为<code>True</code>时<code>args</code>参数无效</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><hr><h3 id="📌-run-cdp" tabindex="-1">📌 <code>run_cdp()</code> <a class="header-anchor" href="#📌-run-cdp" aria-label="Permalink to &quot;📌 `run_cdp()`&quot;">​</a></h3><p>此方法用于执行 Chrome DevTools Protocol 语句。</p><p>cdp 用法详见 <a href="https://chromedevtools.github.io/devtools-protocol/" target="_blank" rel="noreferrer">Chrome DevTools Protocol</a>。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>cmd</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;">必填</td><td>协议项目</td></tr><tr><td style="text-align:center;"><code>**cmd_args</code></td><td style="text-align:center;">-</td><td style="text-align:center;">无</td><td>项目参数</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>dict</code></td><td>执行返回的结果</td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 停止页面加载</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.run_cdp(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Page.stopLoading&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h3 id="📌-run-cdp-loaded" tabindex="-1">📌 <code>run_cdp_loaded()</code> <a class="header-anchor" href="#📌-run-cdp-loaded" aria-label="Permalink to &quot;📌 `run_cdp_loaded()`&quot;">​</a></h3><p>此方法用于执行 Chrome DevTools Protocol 语句，执行前先确保页面加载完毕。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>cmd</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;">必填</td><td>协议项目</td></tr><tr><td style="text-align:center;"><code>**cmd_args</code></td><td style="text-align:center;">-</td><td style="text-align:center;">无</td><td>项目参数</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>dict</code></td><td>执行返回的结果</td></tr></tbody></table><hr><h2 id="✅️️-cookies-及缓存" tabindex="-1">✅️️ cookies 及缓存 <a class="header-anchor" href="#✅️️-cookies-及缓存" aria-label="Permalink to &quot;✅️️ cookies 及缓存&quot;">​</a></h2><h3 id="📌-set-cookies" tabindex="-1">📌 <code>set.cookies()</code> <a class="header-anchor" href="#📌-set-cookies" aria-label="Permalink to &quot;📌 `set.cookies()`&quot;">​</a></h3><p>此方法用于设置 cookie。可设置一个或多个。</p><p>设置一个 cookie 支持的格式：</p><ul><li><code>Cookie</code>：单个<code>Cookie</code>对象</li><li><code>str</code>：<code>&#39;name=value; domain=****; ...&#39;</code>或<code>&#39;name=****; value=****; domain=****; ...&#39;</code>格式，只支持用<code>&#39;;&#39;</code>分隔</li><li><code>dict</code>：<code>{&#39;name&#39;: &#39;****&#39;, &#39;value&#39;: &#39;****&#39;, &#39;domain&#39;: &#39;****&#39;, ...}</code>或<code>{name: value, &#39;domain&#39;: &#39;****&#39;, ...}</code>格式</li></ul><p>设置多个 cookie 支持的格式：</p><ul><li><code>list</code>或<code>tuple</code>：上面几种形式的单个 cookie 放到列表中传入即可</li><li><code>dict</code>：<code>{name1: value1, name2: value2, ..., &#39;domain&#39;: &#39;****&#39;, ...}</code>格式</li><li><code>str</code>：<code>&#39;name1=value1; name2=value2; ... domain=****; ...&#39;</code>格式，多个 cookie 之间只能用<code>&#39;;&#39;</code>分隔</li><li><code>CookieJar</code>：单个<code>CookieJar</code>对象</li></ul><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>cookies</code></td><td style="text-align:center;"><code>Cookie</code><br><code>CookieJar</code><br><code>list</code><br><code>tuple</code><br><code>str</code><br><code>dict</code></td><td style="text-align:center;">必填</td><td>cookies 信息</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 可以接受多种类型的参数</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cookies1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name1=value1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name2=value2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cookies2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;name1=value1; name2=value2; path=/; domain=.example.com;&#39;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cookies3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;value1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;value2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;domain&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.example.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.set.cookies(cookies1)</span></span></code></pre></div><hr><h3 id="📌-set-cookies-clear" tabindex="-1">📌 <code>set.cookies.clear()</code> <a class="header-anchor" href="#📌-set-cookies-clear" aria-label="Permalink to &quot;📌 `set.cookies.clear()`&quot;">​</a></h3><p>此方法用于清除所有 cookie。</p><p><strong>参数：</strong> 无</p><p><strong>返回：</strong><code>None</code></p><hr><h3 id="📌-set-cookies-remove" tabindex="-1">📌 <code>set.cookies.remove()</code> <a class="header-anchor" href="#📌-set-cookies-remove" aria-label="Permalink to &quot;📌 `set.cookies.remove()`&quot;">​</a></h3><p>此方法用于删除一个 cookie。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>name</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;">必填</td><td>cookie 的 name 字段</td></tr><tr><td style="text-align:center;"><code>url</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;"><code>None</code></td><td>cookie 的 url 字段</td></tr><tr><td style="text-align:center;"><code>domain</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;"><code>None</code></td><td>cookie 的 domain 字段</td></tr><tr><td style="text-align:center;"><code>path</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;"><code>None</code></td><td>cookie 的 path 字段</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><hr><h3 id="📌-set-session-storage" tabindex="-1">📌 <code>set.session_storage()</code> <a class="header-anchor" href="#📌-set-session-storage" aria-label="Permalink to &quot;📌 `set.session_storage()`&quot;">​</a></h3><p>此方法用于设置或删除某项 sessionStorage 信息。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>item</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;">必填</td><td>要设置的项</td></tr><tr><td style="text-align:center;"><code>value</code></td><td style="text-align:center;"><code>str</code><br><code>False</code></td><td style="text-align:center;">必填</td><td>为<code>False</code>时，删除该项</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.set.session_storage(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;abc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;123&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h3 id="📌-set-local-storage" tabindex="-1">📌 <code>set.local_storage()</code> <a class="header-anchor" href="#📌-set-local-storage" aria-label="Permalink to &quot;📌 `set.local_storage()`&quot;">​</a></h3><p>此方法用于设置或删除某项 localStorage 信息。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>item</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;">必填</td><td>要设置的项</td></tr><tr><td style="text-align:center;"><code>value</code></td><td style="text-align:center;"><code>str</code><br><code>False</code></td><td style="text-align:center;">必填</td><td>为<code>False</code>时，删除该项</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><hr><h3 id="📌-clear-cache" tabindex="-1">📌 <code>clear_cache()</code> <a class="header-anchor" href="#📌-clear-cache" aria-label="Permalink to &quot;📌 `clear_cache()`&quot;">​</a></h3><p>此方法用于清除缓存，可选择要清除的项。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>session_storage</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>True</code></td><td>是否清除 sessionstorage</td></tr><tr><td style="text-align:center;"><code>local_storage</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>True</code></td><td>是否清除 localStorage</td></tr><tr><td style="text-align:center;"><code>cache</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>True</code></td><td>是否清除 cache</td></tr><tr><td style="text-align:center;"><code>cookies</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>True</code></td><td>是否清除 cookies</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.clear_cache(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">cookies</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">False</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 除了 cookies，其它都清除</span></span></code></pre></div><hr><h2 id="✅️️-运行参数设置" tabindex="-1">✅️️ 运行参数设置 <a class="header-anchor" href="#✅️️-运行参数设置" aria-label="Permalink to &quot;✅️️ 运行参数设置&quot;">​</a></h2><p>各种设置功能藏在<code>set</code>属性中。</p><h3 id="📌-set-retry-times" tabindex="-1">📌 <code>set.retry_times()</code> <a class="header-anchor" href="#📌-set-retry-times" aria-label="Permalink to &quot;📌 `set.retry_times()`&quot;">​</a></h3><p>此方法用于设置连接失败时重连次数。</p><table tabindex="0"><thead><tr><th>参数名称</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td><code>times</code></td><td><code>int</code></td><td>必填</td><td>次数</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><h3 id="📌-set-retry-interval" tabindex="-1">📌 <code>set.retry_interval()</code> <a class="header-anchor" href="#📌-set-retry-interval" aria-label="Permalink to &quot;📌 `set.retry_interval()`&quot;">​</a></h3><p>此方法用于设置连接失败时重连间隔。</p><table tabindex="0"><thead><tr><th>参数名称</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td><code>interval</code></td><td><code>float</code></td><td>必填</td><td>秒数</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><h3 id="📌-set-timeouts" tabindex="-1">📌 <code>set.timeouts()</code> <a class="header-anchor" href="#📌-set-timeouts" aria-label="Permalink to &quot;📌 `set.timeouts()`&quot;">​</a></h3><p>此方法用于设置三种超时时间，单位为秒。可单独设置，为<code>None</code>表示不改变原来设置。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>base</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>整体超时时间</td></tr><tr><td style="text-align:center;"><code>page_load</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>页面加载超时时间</td></tr><tr><td style="text-align:center;"><code>script</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>脚本运行超时时间</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.set.timeouts(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">page_load</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h3 id="📌-set-load-mode" tabindex="-1">📌 <code>set.load_mode</code> <a class="header-anchor" href="#📌-set-load-mode" aria-label="Permalink to &quot;📌 `set.load_mode`&quot;">​</a></h3><p>此属性用于设置页面加载策略，调用其方法选择某种策略。</p><table tabindex="0"><thead><tr><th style="text-align:center;">方法名称</th><th style="text-align:center;">参数</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>normal()</code></td><td style="text-align:center;">无</td><td>等待页面完全加载完成，为默认状态</td></tr><tr><td style="text-align:center;"><code>eager()</code></td><td style="text-align:center;">无</td><td>等待文档加载完成就结束，不等待资源加载</td></tr><tr><td style="text-align:center;"><code>none()</code></td><td style="text-align:center;">无</td><td>页面连接完成就结束</td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.set.load_mode.normal()</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.set.load_mode.eager()</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.set.load_mode.none()</span></span></code></pre></div><hr><h3 id="📌-set-user-agent" tabindex="-1">📌 <code>set.user_agent()</code> <a class="header-anchor" href="#📌-set-user-agent" aria-label="Permalink to &quot;📌 `set.user_agent()`&quot;">​</a></h3><p>此方法用于为浏览器当前标签页设置 user agent。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ua</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;">必填</td><td>user agent 字符串</td></tr><tr><td style="text-align:center;"><code>platform</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;"><code>None</code></td><td>平台类型，如<code>&#39;android&#39;</code></td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><hr><h3 id="📌-set-headers" tabindex="-1">📌 <code>set.headers()</code> <a class="header-anchor" href="#📌-set-headers" aria-label="Permalink to &quot;📌 `set.headers()`&quot;">​</a></h3><p>此方法用于设置额外添加到当前页面请求 headers 的参数。</p><p>headers 可以是<code>dict</code>格式的，也可以是文本格式。</p><p>文本格式不同字段用<code>\\n</code>分隔，字段 key 和 value 用<code>&#39;: &#39;</code>分隔，即从浏览器直接复制的格式。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>headers</code></td><td style="text-align:center;"><code>dict</code><br><code>str</code></td><td style="text-align:center;">必填</td><td>headers 信息</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># dict格式</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;connection&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;keep-alive&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;accept-charset&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;GB2312,utf-8;q=0.7,*;q=0.7&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.set.headers(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">headers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 文本格式</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;&#39;</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">connection: keep-alive</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">accept-charset: GB2312,utf-8;q=0.7,*;q=0.7</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;&#39;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.set.headers(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">headers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h)</span></span></code></pre></div><hr><h2 id="✅️️-窗口管理" tabindex="-1">✅️️ 窗口管理 <a class="header-anchor" href="#✅️️-窗口管理" aria-label="Permalink to &quot;✅️️ 窗口管理&quot;">​</a></h2><p>窗口管理功能藏在<code>set.window</code>属性中。</p><h3 id="📌-set-window-max" tabindex="-1">📌 <code>set.window.max()</code> <a class="header-anchor" href="#📌-set-window-max" aria-label="Permalink to &quot;📌 `set.window.max()`&quot;">​</a></h3><p>此方法用于使窗口最大化。</p><p><strong>参数：</strong> 无</p><p><strong>返回：</strong><code>None</code></p><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.set.window.max()</span></span></code></pre></div><hr><h3 id="📌-set-window-mini" tabindex="-1">📌 <code>set.window.mini()</code> <a class="header-anchor" href="#📌-set-window-mini" aria-label="Permalink to &quot;📌 `set.window.mini()`&quot;">​</a></h3><p>此方法用于使窗口最小化。</p><p><strong>参数：</strong> 无</p><p><strong>返回：</strong><code>None</code></p><hr><h3 id="📌-set-window-full" tabindex="-1">📌 <code>set.window.full()</code> <a class="header-anchor" href="#📌-set-window-full" aria-label="Permalink to &quot;📌 `set.window.full()`&quot;">​</a></h3><p>此方法用于使窗口切换到全屏模式。</p><p><strong>参数：</strong> 无</p><p><strong>返回：</strong><code>None</code></p><hr><h3 id="📌-set-window-normal" tabindex="-1">📌 <code>set.window.normal()</code> <a class="header-anchor" href="#📌-set-window-normal" aria-label="Permalink to &quot;📌 `set.window.normal()`&quot;">​</a></h3><p>此方法用于使窗口切换到普通模式。</p><p><strong>参数：</strong> 无</p><p><strong>返回：</strong><code>None</code></p><hr><h3 id="📌-set-window-size" tabindex="-1">📌 <code>set.window.size()</code> <a class="header-anchor" href="#📌-set-window-size" aria-label="Permalink to &quot;📌 `set.window.size()`&quot;">​</a></h3><p>此方法用于设置窗口大小。只传入一个参数时另一个参数不会变化。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>width</code></td><td style="text-align:center;"><code>int</code></td><td style="text-align:center;"><code>None</code></td><td>窗口宽度</td></tr><tr><td style="text-align:center;"><code>height</code></td><td style="text-align:center;"><code>int</code></td><td style="text-align:center;"><code>None</code></td><td>窗口高度</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.set.window.size(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h3 id="📌-set-window-location" tabindex="-1">📌 <code>set.window.location()</code> <a class="header-anchor" href="#📌-set-window-location" aria-label="Permalink to &quot;📌 `set.window.location()`&quot;">​</a></h3><p>此方法用于设置窗口位置。只传入一个参数时另一个参数不会变化。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>x</code></td><td style="text-align:center;"><code>int</code></td><td style="text-align:center;"><code>None</code></td><td>距离顶部距离</td></tr><tr><td style="text-align:center;"><code>y</code></td><td style="text-align:center;"><code>int</code></td><td style="text-align:center;"><code>None</code></td><td>距离左边距离</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.set.window.location(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h3 id="📌-set-window-hide" tabindex="-1">📌 <code>set.window.hide()</code> <a class="header-anchor" href="#📌-set-window-hide" aria-label="Permalink to &quot;📌 `set.window.hide()`&quot;">​</a></h3><p>此方法用于隐藏浏览器窗口。</p><p>与 headless 模式不一样，这个方法是直接隐藏浏览器进程。在任务栏上也会消失。只支持 Windows 系统，并且必需已安装 pypiwin32 库才可使用。</p><p>不过，窗口隐藏后，如果有新窗口出现，整个浏览器又会显现出来。</p><p><strong>参数：</strong> 无</p><p><strong>返回：</strong><code>None</code></p><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.set.window.hide()</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">注意</p><pre><code>- 浏览器隐藏后并没有关闭，下次运行程序还会接管已隐藏的浏览器\n- 浏览器隐藏后，如果有新建标签页，会自行显示出来\n</code></pre></div><hr><h3 id="📌-set-window-show" tabindex="-1">📌 <code>set.window.show()</code> <a class="header-anchor" href="#📌-set-window-show" aria-label="Permalink to &quot;📌 `set.window.show()`&quot;">​</a></h3><p>此方法用于显示当前浏览器窗口。</p><p><strong>参数：</strong> 无</p><p><strong>返回：</strong><code>None</code></p><hr><h2 id="✅️️-页面滚动" tabindex="-1">✅️️ 页面滚动 <a class="header-anchor" href="#✅️️-页面滚动" aria-label="Permalink to &quot;✅️️ 页面滚动&quot;">​</a></h2><p>页面滚动的功能藏在<code>scroll</code>属性中。</p><h3 id="📌-scroll-或scroll-down" tabindex="-1">📌 <code>scroll()</code>或<code>scroll.down()</code> <a class="header-anchor" href="#📌-scroll-或scroll-down" aria-label="Permalink to &quot;📌 `scroll()`或`scroll.down()`&quot;">​</a></h3><p>这两个方法效果是一样的，用于使页面向下滚动若干像素，水平位置不变。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>pixel</code></td><td style="text-align:center;"><code>int</code></td><td style="text-align:center;">必填</td><td>滚动的像素</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumTab</code></td><td><code>ChromiumTab</code>执行滚动时返回页面对象自身</td></tr><tr><td style="text-align:center;"><code>MixTab</code></td><td><code>MixTab</code>执行滚动时返回页面对象自身</td></tr><tr><td style="text-align:center;"><code>ChromiumFrame</code></td><td><code>ChromiumFrame</code>执行滚动时返回页面对象自身</td></tr></tbody></table><hr><h3 id="📌-scroll-up" tabindex="-1">📌 <code>scroll.up()</code> <a class="header-anchor" href="#📌-scroll-up" aria-label="Permalink to &quot;📌 `scroll.up()`&quot;">​</a></h3><p>此方法用于使页面向上滚动若干像素，水平位置不变。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>pixel</code></td><td style="text-align:center;"><code>int</code></td><td style="text-align:center;">必填</td><td>滚动的像素</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumTab</code></td><td><code>ChromiumTab</code>执行滚动时返回页面对象自身</td></tr><tr><td style="text-align:center;"><code>MixTab</code></td><td><code>MixTab</code>执行滚动时返回页面对象自身</td></tr><tr><td style="text-align:center;"><code>ChromiumFrame</code></td><td><code>ChromiumFrame</code>执行滚动时返回页面对象自身</td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.scroll.up(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h3 id="📌-scroll-right" tabindex="-1">📌 <code>scroll.right()</code> <a class="header-anchor" href="#📌-scroll-right" aria-label="Permalink to &quot;📌 `scroll.right()`&quot;">​</a></h3><p>此方法用于使页面向右滚动若干像素，垂直位置不变。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>pixel</code></td><td style="text-align:center;"><code>int</code></td><td style="text-align:center;">必填</td><td>滚动的像素</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumTab</code></td><td><code>ChromiumTab</code>执行滚动时返回页面对象自身</td></tr><tr><td style="text-align:center;"><code>MixTab</code></td><td><code>MixTab</code>执行滚动时返回页面对象自身</td></tr><tr><td style="text-align:center;"><code>ChromiumFrame</code></td><td><code>ChromiumFrame</code>执行滚动时返回页面对象自身</td></tr></tbody></table><hr><h3 id="📌-scroll-left" tabindex="-1">📌 <code>scroll.left()</code> <a class="header-anchor" href="#📌-scroll-left" aria-label="Permalink to &quot;📌 `scroll.left()`&quot;">​</a></h3><p>此方法用于使页面向左滚动若干像素，垂直位置不变。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>pixel</code></td><td style="text-align:center;"><code>int</code></td><td style="text-align:center;">必填</td><td>滚动的像素</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumTab</code></td><td><code>ChromiumTab</code>执行滚动时返回页面对象自身</td></tr><tr><td style="text-align:center;"><code>MixTab</code></td><td><code>MixTab</code>执行滚动时返回页面对象自身</td></tr><tr><td style="text-align:center;"><code>ChromiumFrame</code></td><td><code>ChromiumFrame</code>执行滚动时返回页面对象自身</td></tr></tbody></table><hr><h3 id="📌-scroll-to-top" tabindex="-1">📌 <code>scroll.to_top()</code> <a class="header-anchor" href="#📌-scroll-to-top" aria-label="Permalink to &quot;📌 `scroll.to_top()`&quot;">​</a></h3><p>此方法用于滚动页面到顶部，水平位置不变。</p><p><strong>参数：</strong> 无</p><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumTab</code></td><td><code>ChromiumTab</code>执行滚动时返回页面对象自身</td></tr><tr><td style="text-align:center;"><code>MixTab</code></td><td><code>MixTab</code>执行滚动时返回页面对象自身</td></tr><tr><td style="text-align:center;"><code>ChromiumFrame</code></td><td><code>ChromiumFrame</code>执行滚动时返回页面对象自身</td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.scroll.to_top()</span></span></code></pre></div><hr><h3 id="📌-scroll-to-bottom" tabindex="-1">📌 <code>scroll.to_bottom()</code> <a class="header-anchor" href="#📌-scroll-to-bottom" aria-label="Permalink to &quot;📌 `scroll.to_bottom()`&quot;">​</a></h3><p>此方法用于滚动页面到底部，水平位置不变。</p><p><strong>参数：</strong> 无</p><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumTab</code></td><td><code>ChromiumTab</code>执行滚动时返回页面对象自身</td></tr><tr><td style="text-align:center;"><code>MixTab</code></td><td><code>MixTab</code>执行滚动时返回页面对象自身</td></tr><tr><td style="text-align:center;"><code>ChromiumFrame</code></td><td><code>ChromiumFrame</code>执行滚动时返回页面对象自身</td></tr></tbody></table><hr><h3 id="📌-scroll-to-half" tabindex="-1">📌 <code>scroll.to_half()</code> <a class="header-anchor" href="#📌-scroll-to-half" aria-label="Permalink to &quot;📌 `scroll.to_half()`&quot;">​</a></h3><p>此方法用于滚动页面到垂直中间位置，水平位置不变。</p><p><strong>参数：</strong> 无</p><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumTab</code></td><td><code>ChromiumTab</code>执行滚动时返回页面对象自身</td></tr><tr><td style="text-align:center;"><code>MixTab</code></td><td><code>MixTab</code>执行滚动时返回页面对象自身</td></tr><tr><td style="text-align:center;"><code>ChromiumFrame</code></td><td><code>ChromiumFrame</code>执行滚动时返回页面对象自身</td></tr></tbody></table><hr><h3 id="📌-scroll-to-rightmost" tabindex="-1">📌 <code>scroll.to_rightmost()</code> <a class="header-anchor" href="#📌-scroll-to-rightmost" aria-label="Permalink to &quot;📌 `scroll.to_rightmost()`&quot;">​</a></h3><p>此方法用于滚动页面到最右边，垂直位置不变。</p><p><strong>参数：</strong> 无</p><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumTab</code></td><td><code>ChromiumTab</code>执行滚动时返回页面对象自身</td></tr><tr><td style="text-align:center;"><code>MixTab</code></td><td><code>MixTab</code>执行滚动时返回页面对象自身</td></tr><tr><td style="text-align:center;"><code>ChromiumFrame</code></td><td><code>ChromiumFrame</code>执行滚动时返回页面对象自身</td></tr></tbody></table><hr><h3 id="📌-scroll-to-leftmost" tabindex="-1">📌 <code>scroll.to_leftmost()</code> <a class="header-anchor" href="#📌-scroll-to-leftmost" aria-label="Permalink to &quot;📌 `scroll.to_leftmost()`&quot;">​</a></h3><p>此方法用于滚动页面到最左边，垂直位置不变。</p><p><strong>参数：</strong> 无</p><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumTab</code></td><td><code>ChromiumTab</code>执行滚动时返回页面对象自身</td></tr><tr><td style="text-align:center;"><code>MixTab</code></td><td><code>MixTab</code>执行滚动时返回页面对象自身</td></tr><tr><td style="text-align:center;"><code>ChromiumFrame</code></td><td><code>ChromiumFrame</code>执行滚动时返回页面对象自身</td></tr></tbody></table><hr><h3 id="📌-scroll-to-location" tabindex="-1">📌 <code>scroll.to_location()</code> <a class="header-anchor" href="#📌-scroll-to-location" aria-label="Permalink to &quot;📌 `scroll.to_location()`&quot;">​</a></h3><p>此方法用于滚动页面到滚动到指定位置。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>x</code></td><td style="text-align:center;"><code>int</code></td><td style="text-align:center;">必填</td><td>水平位置，单位是像素</td></tr><tr><td style="text-align:center;"><code>y</code></td><td style="text-align:center;"><code>int</code></td><td style="text-align:center;">必填</td><td>垂直位置，单位是像素</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumTab</code></td><td><code>ChromiumTab</code>执行滚动时返回页面对象自身</td></tr><tr><td style="text-align:center;"><code>MixTab</code></td><td><code>MixTab</code>执行滚动时返回页面对象自身</td></tr><tr><td style="text-align:center;"><code>ChromiumFrame</code></td><td><code>ChromiumFrame</code>执行滚动时返回页面对象自身</td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.scroll.to_location(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h3 id="📌-scroll-to-see" tabindex="-1">📌 <code>scroll.to_see()</code> <a class="header-anchor" href="#📌-scroll-to-see" aria-label="Permalink to &quot;📌 `scroll.to_see()`&quot;">​</a></h3><p>此方法用于滚动页面直到元素可见。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>loc_or_ele</code></td><td style="text-align:center;"><code>str</code><br><code>tuple</code><br><code>ChromiumElement</code></td><td style="text-align:center;">必填</td><td>元素的定位信息，可以是元素、定位符</td></tr><tr><td style="text-align:center;"><code>center</code></td><td style="text-align:center;"><code>bool</code><br><code>None</code></td><td style="text-align:center;"><code>None</code></td><td>是否尽量滚动到页面正中，为<code>None</code>时如果被遮挡，则滚动到页面正中</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ChromiumTab</code></td><td><code>ChromiumTab</code>执行滚动时返回页面对象自身</td></tr><tr><td style="text-align:center;"><code>MixTab</code></td><td><code>MixTab</code>执行滚动时返回页面对象自身</td></tr><tr><td style="text-align:center;"><code>ChromiumFrame</code></td><td><code>ChromiumFrame</code>执行滚动时返回页面对象自身</td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 滚动到某个已获取到的元素</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab.ele(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tag:div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.scroll.to_see(ele)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 滚动到按定位符查找到的元素</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.scroll.to_see(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tag:div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h2 id="✅️️-滚动设置" tabindex="-1">✅️️ 滚动设置 <a class="header-anchor" href="#✅️️-滚动设置" aria-label="Permalink to &quot;✅️️ 滚动设置&quot;">​</a></h2><p>页面滚动有两种方式，一种是滚动时直接跳到目标位置，第二种是平滑滚动，需要一定时间。后者滚动时间难以确定，容易导致程序不稳定，点击不准确的问题。</p><p>一些网站会在 css 设置中指定网站使用平滑滚动，这是我们不希望的，但本着让开发者拥有充分选择权利的原则，本库没有强制修改，而是提供两项设置供开发者选择。</p><h3 id="📌-set-scroll-smooth" tabindex="-1">📌 <code>set.scroll.smooth()</code> <a class="header-anchor" href="#📌-set-scroll-smooth" aria-label="Permalink to &quot;📌 `set.scroll.smooth()`&quot;">​</a></h3><p>此方法设置网站是否开启平滑滚动。建议用此方法为网页关闭平滑滚动。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>on_off</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>True</code></td><td><code>bool</code>表示开或关</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.set.scroll.smooth(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">on_off</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">False</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h3 id="📌-set-scroll-wait-complete" tabindex="-1">📌 <code>set.scroll.wait_complete()</code> <a class="header-anchor" href="#📌-set-scroll-wait-complete" aria-label="Permalink to &quot;📌 `set.scroll.wait_complete()`&quot;">​</a></h3><p>此方法用于设置滚动后是否等待滚动结束。在不想关闭网页平滑滚动功能时，可开启此设置以保障滚动结束后才执行后面的步骤</p><table tabindex="0"><thead><tr><th>参数名称</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td><code>on_off</code></td><td><code>bool</code></td><td><code>True</code></td><td><code>bool</code>表示开或关</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.set.scroll.wait_complete(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">on_off</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h2 id="✅️️-弹出消息处理" tabindex="-1">✅️️ 弹出消息处理 <a class="header-anchor" href="#✅️️-弹出消息处理" aria-label="Permalink to &quot;✅️️ 弹出消息处理&quot;">​</a></h2><h3 id="📌-handle-alert" tabindex="-1">📌 <code>handle_alert()</code> <a class="header-anchor" href="#📌-handle-alert" aria-label="Permalink to &quot;📌 `handle_alert()`&quot;">​</a></h3><p>此方法用于处理提示框。<br> 它能够设置等待时间，等待提示框出现才进行处理，若超时没等到提示框，返回<code>False</code>。<br> 也可只获取提示框文本而不处理提示框。 还可以处理下一个出现的提示框，这在处理离开页面时触发的弹窗非常有用。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><pre><code>程序无法接管一个已经弹出了提示框的浏览器或标签页。\n</code></pre></div><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>accept</code></td><td style="text-align:center;"><code>bool</code><br><code>None</code></td><td style="text-align:center;"><code>True</code></td><td><code>True</code>表示确认，<code>False</code>表示取消，<code>None</code>不会按按钮但依然返回文本值</td></tr><tr><td style="text-align:center;"><code>send</code></td><td style="text-align:center;"><code>str</code></td><td style="text-align:center;"><code>None</code></td><td>处理 prompt 提示框时可输入文本</td></tr><tr><td style="text-align:center;"><code>timeout</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>None</code></td><td>等待提示框出现的超时时间（秒），为<code>None</code>时使用页面整体超时时间</td></tr><tr><td style="text-align:center;"><code>next_one</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>False</code></td><td>是否处理下一个出现的弹窗，为<code>True</code>时<code>timeout</code>参数无效</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">返回类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>str</code></td><td>提示框内容文本</td></tr><tr><td style="text-align:center;"><code>False</code></td><td>未等到提示框则返回<code>False</code></td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 确认提示框并获取提示框文本</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">txt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab.handle_alert()</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 点击取消</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.handle_alert(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">accept</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">False</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 给 prompt 提示框输入文本并点击确定</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.handle_alert(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">accept</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">send</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;some text&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 不处理提示框，只获取提示框文本</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">txt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab.handle_alert(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">accept</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h3 id="📌-自动处理" tabindex="-1">📌 自动处理 <a class="header-anchor" href="#📌-自动处理" aria-label="Permalink to &quot;📌 自动处理&quot;">​</a></h3><p>标签页对象可使用<code>set.auto_handle_alert()</code>方法设置自动处理该 tab 的提示框，使提示框不会弹窗而直接被处理掉。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>on_off</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>True</code></td><td>开或关</td></tr><tr><td style="text-align:center;"><code>accept</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>True</code></td><td>确定还是取消</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium().latest_tab</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.set.auto_handle_alert()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这之后出现的弹窗都会自动确认</span></span></code></pre></div><hr><h3 id="📌-全局自动处理" tabindex="-1">📌 全局自动处理 <a class="header-anchor" href="#📌-全局自动处理" aria-label="Permalink to &quot;📌 全局自动处理&quot;">​</a></h3><p>如果需要设置所有标签页都自动处理 alert，可用<code>Chromium</code>对象进行设置。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">browser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium()</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">browser.set.auto_handle_alert()</span></span></code></pre></div><p>或者</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium().latest_tab</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.browser.set.auto_handle_alert()</span></span></code></pre></div><hr><h2 id="✅️️-关闭及重连" tabindex="-1">✅️️ 关闭及重连 <a class="header-anchor" href="#✅️️-关闭及重连" aria-label="Permalink to &quot;✅️️ 关闭及重连&quot;">​</a></h2><h3 id="📌-disconnect" tabindex="-1">📌 <code>disconnect()</code> <a class="header-anchor" href="#📌-disconnect" aria-label="Permalink to &quot;📌 `disconnect()`&quot;">​</a></h3><p>此方法用于页面对象断开与页面的连接，但不关闭标签页。断开后，对象不能对标签页进行操作。</p><p>Tab 和<code>ChromiumFrame</code>对象都有此方法。</p><p><strong>参数：</strong> 无</p><p><strong>返回：</strong><code>None</code></p><hr><h3 id="📌-reconnect" tabindex="-1">📌 <code>reconnect()</code> <a class="header-anchor" href="#📌-reconnect" aria-label="Permalink to &quot;📌 `reconnect()`&quot;">​</a></h3><p>此方法用于关闭与页面连接，然后重建一个新连接。</p><p>这主要用于应付长期运行导致内存占用过高，断开连接可释放内存，然后重连继续控制浏览器。</p><p>Tab 和<code>ChromiumFrame</code>对象都有此方法。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>wait</code></td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>0</code></td><td>关闭后等待多少秒再连接</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><hr><h3 id="📌-close" tabindex="-1">📌 <code>close()</code> <a class="header-anchor" href="#📌-close" aria-label="Permalink to &quot;📌 `close()`&quot;">​</a></h3><p>此方法用于关闭标签页。可关闭自己或自己以外的。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>others</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>False</code></td><td>是否关闭自己以外的标签页</td></tr><tr><td style="text-align:center;"><code>session</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>False</code></td><td>是否同时关闭内置<code>Session</code>对象，只对自己有效</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p>',346)])])}const k=e(d,[["render",n]]);export{g as __pageData,k as default};
