import{_ as i,c as a,o as t,aN as e}from"./chunks/framework.0ZSa6Wd7.js";const c=JSON.parse('{"title":"page.route","description":"","frontmatter":{"id":"intro4","permalink":"/pw/intro4","title":" page.route"},"headers":[],"relativePath":"pw/4.md","filePath":"pw/4.md"}'),n={name:"pw/4.md"};function l(h,s,p,r,k,o){return t(),a("div",null,[...s[0]||(s[0]=[e(`<h1 id="page-route" tabindex="-1">page.route <a class="header-anchor" href="#page-route" aria-label="Permalink to &quot;page.route&quot;">​</a></h1><p><strong>Playwright（Python）里 <code>page.route</code></strong> 的概念、API、常见用法、注意事项和可复用的同步/异步示例</p><h1 id="概览-一句话" tabindex="-1">概览（一句话） <a class="header-anchor" href="#概览-一句话" aria-label="Permalink to &quot;概览（一句话）&quot;">​</a></h1><p><code>page.route(pattern, handler)</code> 用来拦截页面发出的网络请求（XHR、fetch、图片、脚本等），把请求交给你写的 <code>handler(route, request)</code> 来决定：<strong>继续发送 / 修改后发送 / 直接返回假数据 / 中止请求</strong>。一旦启用匹配的路由，请求会被“挂起”，直到你用 <code>route.continue_()</code> / <code>route.fulfill()</code> / <code>route.abort()</code> / <code>route.fallback()</code> 之一处理它。 (<a href="https://playwright.dev/python/docs/api/class-page?utm_source=chatgpt.com" title="Page | Playwright Python" target="_blank" rel="noreferrer">playwright.dev</a>)</p><hr><h1 id="基本概念与签名" tabindex="-1">基本概念与签名 <a class="header-anchor" href="#基本概念与签名" aria-label="Permalink to &quot;基本概念与签名&quot;">​</a></h1><ul><li>注册路由（同步 API）：</li></ul><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">page.route(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;**/api/**&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, handler)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># handler(route, request)</span></span></code></pre></div><ul><li>注册路由（异步 API）通常写法（也可直接不 await，官方示例有 await 的写法）：</li></ul><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page.route(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;**/api/**&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, handler)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># async def handler(route, request)</span></span></code></pre></div><ul><li>handler 的两个参数：<code>route</code>（Route 对象，用来操作请求）和 <code>request</code>（Request 对象，用来读取原始请求信息，例如 <code>request.url</code>, <code>request.method</code>, <code>request.post_data</code> 等）。 (<a href="https://playwright.dev/python/docs/api/class-page?utm_source=chatgpt.com" title="Page | Playwright Python" target="_blank" rel="noreferrer">playwright.dev</a>)</li></ul><hr><h1 id="route-常用方法-速查" tabindex="-1">Route 常用方法（速查） <a class="header-anchor" href="#route-常用方法-速查" aria-label="Permalink to &quot;Route 常用方法（速查）&quot;">​</a></h1><ul><li><code>route.continue_(**overrides)</code>：把请求发到网络，可以用 <code>headers</code>, <code>method</code>, <code>post_data</code>, <code>url</code> 等覆盖（注意 <code>continue_</code> 在 Python 中是 <code>continue_</code>，因为 <code>continue</code> 是关键字）。<strong>使用 <code>continue_</code> 时，其他已注册的匹配处理器不会再被调用</strong>（立即发送）。 (<a href="https://playwright.dev/docs/api/class-route?utm_source=chatgpt.com" title="Route" target="_blank" rel="noreferrer">playwright.dev</a>)</li><li><code>route.fallback(**overrides)</code>：与 <code>continue_</code> 类似，但会把请求“传递到下一个匹配的 handler”，即允许链式/层叠的处理器协作（introduced v1.23）。 (<a href="https://playwright.dev/docs/api/class-route?utm_source=chatgpt.com" title="Route" target="_blank" rel="noreferrer">playwright.dev</a>)</li><li><code>route.fulfill(status=..., body=..., content_type=..., headers=..., path=..., response=..., json=...)</code>：直接用你指定的响应来“完成”请求（mock 响应）。可以直接以 <code>body</code>/<code>path</code>/或 <code>response</code>（来自 <code>route.fetch()</code>）作为基础并做修改。 (<a href="https://playwright.dev/python/docs/api/class-route?utm_source=chatgpt.com" title="Route | Playwright Python" target="_blank" rel="noreferrer">playwright.dev</a>)</li><li><code>route.abort(error_code=None)</code>：中止请求（默认 <code>failed</code>，也可以传特定错误码）。 (<a href="https://playwright.dev/docs/api/class-route?utm_source=chatgpt.com" title="Route" target="_blank" rel="noreferrer">playwright.dev</a>)</li><li><code>route.fetch()</code>：从网络执行原始请求并返回 <code>Response</code> 对象（便于基于真实响应做修改后再 <code>fulfill</code>）。 (<a href="https://playwright.dev/python/docs/mock?utm_source=chatgpt.com" title="Mock APIs | Playwright Python" target="_blank" rel="noreferrer">playwright.dev</a>)</li></ul><hr><h1 id="匹配规则、优先级与取消路由" tabindex="-1">匹配规则、优先级与取消路由 <a class="header-anchor" href="#匹配规则、优先级与取消路由" aria-label="Permalink to &quot;匹配规则、优先级与取消路由&quot;">​</a></h1><ul><li><code>url</code> 参数可以是 glob（<code>**/*</code>）、正则或回调 predicate（接收 URL 判断），非常灵活。 (<a href="https://playwright.dev/python/docs/api/class-browsercontext?utm_source=chatgpt.com" title="BrowserContext | Playwright Python" target="_blank" rel="noreferrer">playwright.dev</a>)</li><li><strong>优先级</strong>：<code>page.route</code>（只对该 page）比 <code>browser_context.route</code> 更高（即同一请求同时匹配 page 和 context 的规则时，page 的 handler 优先）。要对所有页面（包括 popup）拦截，考虑用 <code>context.route</code>。 (<a href="https://playwright.dev/python/docs/api/class-browsercontext?utm_source=chatgpt.com" title="BrowserContext | Playwright Python" target="_blank" rel="noreferrer">playwright.dev</a>)</li><li>取消路由：<code>page.unroute(url[, handler])</code> —— 如果不传 handler，会移除匹配 URL 的所有路由。 (<a href="https://playwright.dev/python/docs/api/class-page?utm_source=chatgpt.com" title="Page | Playwright Python" target="_blank" rel="noreferrer">playwright.dev</a>)</li></ul><hr><h1 id="实战示例-可直接复制粘贴改造" tabindex="-1">实战示例（可直接复制粘贴改造） <a class="header-anchor" href="#实战示例-可直接复制粘贴改造" aria-label="Permalink to &quot;实战示例（可直接复制粘贴改造）&quot;">​</a></h1><h2 id="_1-同步-api-拦截并-mock-某个-api" tabindex="-1">1) 同步 API：拦截并 mock 某个 API <a class="header-anchor" href="#_1-同步-api-拦截并-mock-某个-api" aria-label="Permalink to &quot;1) 同步 API：拦截并 mock 某个 API&quot;">​</a></h2><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> playwright.sync_api </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sync_playwright</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> json</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sync_playwright() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pw:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        browser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pw.chromium.launch()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> browser.new_page()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(route, request):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;api.example.com/data&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.url:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> json.dumps({</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mocked&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: []})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                route.fulfill(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">status</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">content_type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;application/json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">body</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">body)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                route.continue_()   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 一定要处理，否则请求会挂起</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        page.route(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;**/api/**&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, handler)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        page.goto(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        browser.close()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __name__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;__main__&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    run()</span></span></code></pre></div><h2 id="_2-异步-api-基于真实响应修改并返回-fetch-→-改-json-→-fulfill" tabindex="-1">2) 异步 API：基于真实响应修改并返回（fetch → 改 json → fulfill） <a class="header-anchor" href="#_2-异步-api-基于真实响应修改并返回-fetch-→-改-json-→-fulfill" aria-label="Permalink to &quot;2) 异步 API：基于真实响应修改并返回（fetch → 改 json → fulfill）&quot;">​</a></h2><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> asyncio</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> playwright.async_api </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> async_playwright</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> async_playwright() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pw:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        browser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pw.chromium.launch()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> browser.new_context()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context.new_page()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(route, request):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/xhr_endpoint&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.url:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                # 请求原始数据，然后在返回内容上打补丁</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> route.fetch()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.json()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                data[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;injected_by_test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> True</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> route.fulfill(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">json</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> route.continue_()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page.route(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;**/xhr_endpoint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, handler)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page.goto(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> browser.close()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">asyncio.run(run())</span></span></code></pre></div><h2 id="_3-同步-api-基于真实响应修改并返回-fetch-→-改-json-→-fulfill" tabindex="-1">3) 同步 API：基于真实响应修改并返回（fetch → 改 json → fulfill） <a class="header-anchor" href="#_3-同步-api-基于真实响应修改并返回-fetch-→-改-json-→-fulfill" aria-label="Permalink to &quot;3) 同步 API：基于真实响应修改并返回（fetch → 改 json → fulfill）&quot;">​</a></h2><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> playwright.sync_api </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sync_playwright</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sync_playwright() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pw:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        browser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pw.chromium.launch()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> browser.new_page()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(route, request):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/xhr_endpoint&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.url:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> route.fetch()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.json()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                data[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;patched_by_test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> True</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                route.fulfill(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">json</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                route.continue_()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        page.route(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;**/xhr_endpoint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, handler)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        page.goto(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        browser.close()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __name__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;__main__&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    run()</span></span></code></pre></div><p>（上面 <code>route.fetch()</code> + <code>route.fulfill(response=..., json=...)</code> 是官方推荐用法，用于“在真实响应基础上做小改动再返回”。） (<a href="https://playwright.dev/python/docs/mock?utm_source=chatgpt.com" title="Mock APIs | Playwright Python" target="_blank" rel="noreferrer">playwright.dev</a>)</p><hr><h1 id="常见场景与小技巧" tabindex="-1">常见场景与小技巧 <a class="header-anchor" href="#常见场景与小技巧" aria-label="Permalink to &quot;常见场景与小技巧&quot;">​</a></h1><ul><li><strong>只拦截你关心的 URL 区间</strong>（比如 <code>**/api/**</code>），避免用 <code>**/*</code> 全拦截，性能和调试都会更友好。</li><li><strong>模拟慢网速 / 超时</strong>：可以 <code>time.sleep</code>（同步）或 <code>await asyncio.sleep</code>（异步）后 <code>fulfill()</code> 来模拟延迟，或 <code>abort(&quot;timedout&quot;)</code>。</li><li><strong>修改请求头 / body</strong>：在 <code>route.continue_(headers=..., method=..., post_data=..., url=...)</code> 里覆盖。注意：headers 会作用到重定向的请求，但 <code>url/method/post_data</code> 的覆盖只应用到原始请求，不会自动传递到重定向后的请求。 (<a href="https://playwright.dev/python/docs/api/class-route?utm_source=chatgpt.com" title="Route | Playwright Python" target="_blank" rel="noreferrer">playwright.dev</a>)</li><li><strong>层叠路由（fallback）</strong>：用 <code>route.fallback()</code> 可以让多个 handler 串联，最后一个 handler 决定最终行为；而 <code>continue_()</code> 则会立即把请求发出并跳过后续 handler。 (<a href="https://playwright.dev/docs/api/class-route?utm_source=chatgpt.com" title="Route" target="_blank" rel="noreferrer">playwright.dev</a>)</li><li><strong>不要忘了所有分支都处理</strong>：如果 handler 在某些分支既没 <code>continue_()</code>、也没 <code>fulfill()</code> / <code>abort()</code>，对应请求会一直挂起，导致页面操作卡住（非常常见的陷阱）。 (<a href="https://playwright.dev/python/docs/api/class-page?utm_source=chatgpt.com" title="Page | Playwright Python" target="_blank" rel="noreferrer">playwright.dev</a>)</li></ul><hr><h1 id="注意事项-常见坑" tabindex="-1">注意事项 / 常见坑 <a class="header-anchor" href="#注意事项-常见坑" aria-label="Permalink to &quot;注意事项 / 常见坑&quot;">​</a></h1><ul><li><strong>启用路由会禁用 HTTP 缓存</strong>（文档有明确说明），测试时可能因此看到不同的行为。 (<a href="https://playwright.dev/python/docs/api/class-browsercontext?utm_source=chatgpt.com" title="BrowserContext | Playwright Python" target="_blank" rel="noreferrer">playwright.dev</a>)</li><li><code>continue_()</code> 不能覆盖 <code>Cookie</code> header（浏览器会从 cookie store 加载），如果你需要自定义 cookie，请用 <code>context.add_cookies()</code> 或其他办法。 （文档和实现里提到 Cookie 覆盖是受限的） (<a href="https://playwright-ruby-client.vercel.app/docs/api/route?utm_source=chatgpt.com" title="Route" target="_blank" rel="noreferrer">playwright-ruby-client.vercel.app</a>)</li><li>当多个 route pattern 匹配时，执行顺序<strong>是注册顺序的反向</strong>（最后注册的先执行），这让“覆盖默认路由”的模式很方便，但也要留意顺序。 (<a href="https://www.cuketest.com/playwright/docs/api/class-route/?utm_source=chatgpt.com" title="Route | Playwright" target="_blank" rel="noreferrer">Cuketest</a>)</li></ul><hr><h1 id="小型-cheatsheet-调用格式" tabindex="-1">小型 cheatsheet（调用格式） <a class="header-anchor" href="#小型-cheatsheet-调用格式" aria-label="Permalink to &quot;小型 cheatsheet（调用格式）&quot;">​</a></h1><ul><li>注册：<code>page.route(url, handler)</code> 或 <code>context.route(url, handler)</code>。 (<a href="https://playwright.dev/python/docs/api/class-page?utm_source=chatgpt.com" title="Page | Playwright Python" target="_blank" rel="noreferrer">playwright.dev</a>)</li><li>处理：<code>route.continue_(headers=..., url=..., method=..., post_data=...)</code>。 (<a href="https://playwright.dev/python/docs/api/class-route?utm_source=chatgpt.com" title="Route | Playwright Python" target="_blank" rel="noreferrer">playwright.dev</a>)</li><li>mock：<code>route.fulfill(status=200, content_type=&#39;application/json&#39;, body=json.dumps(...))</code> 或 <code>route.fulfill(response=response, json=...)</code>。 (<a href="https://playwright.dev/python/docs/api/class-route?utm_source=chatgpt.com" title="Route | Playwright Python" target="_blank" rel="noreferrer">playwright.dev</a>)</li><li>中止：<code>route.abort()</code>。 (<a href="https://playwright.dev/docs/api/class-route?utm_source=chatgpt.com" title="Route" target="_blank" rel="noreferrer">playwright.dev</a>)</li><li>原始请求：<code>response = await route.fetch()</code>。 (<a href="https://playwright.dev/python/docs/mock?utm_source=chatgpt.com" title="Mock APIs | Playwright Python" target="_blank" rel="noreferrer">playwright.dev</a>)</li><li>取消路由：<code>page.unroute(url[, handler])</code>。 (<a href="https://playwright.dev/python/docs/api/class-page?utm_source=chatgpt.com" title="Page | Playwright Python" target="_blank" rel="noreferrer">playwright.dev</a>)</li></ul><hr>`,36)])])}const g=i(n,[["render",l]]);export{c as __pageData,g as default};
