import{_ as i,c as a,o as n,aM as t}from"./chunks/framework.Fs4ucY6U.js";const o=JSON.parse('{"title":"🔦 行为模式","description":"","frontmatter":{"id":"behavior","title":"🔦 行为模式"},"headers":[],"relativePath":"dp/2.浏览器控制/元素定位/behavior.md","filePath":"dp/2.浏览器控制/元素定位/behavior.md"}'),e={name:"dp/2.浏览器控制/元素定位/behavior.md"};function h(l,s,p,k,d,E){return n(),a("div",null,[...s[0]||(s[0]=[t(`<h1 id="🔦-行为模式" tabindex="-1">🔦 行为模式 <a class="header-anchor" href="#🔦-行为模式" aria-label="Permalink to &quot;🔦 行为模式&quot;">​</a></h1><h2 id="✅️-等待元素" tabindex="-1">✅️ 等待元素 <a class="header-anchor" href="#✅️-等待元素" aria-label="Permalink to &quot;✅️ 等待元素&quot;">​</a></h2><p>由于网络、js 运行时间的不确定性，经常需要等待元素加载到 DOM 中才能使用。</p><p>浏览器所有查找元素操作都自带等待，时间默认跟随元素所在页面<code>timeout</code>属性（默认 10 秒），也可以在每次查找时单独设置，单独设置的等待时间不会改变页面原来设置。</p><h3 id="📌-内置等待" tabindex="-1">📌 内置等待 <a class="header-anchor" href="#📌-内置等待" aria-label="Permalink to &quot;📌 内置等待&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium().latest_tab</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置查找元素超时时间为 5 秒</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.set.timeouts(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用页面超时时间来查找元素（5 秒）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab.ele(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;search text&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 为这次查找页面独立设置等待时间（1 秒）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab.ele(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;search text&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">timeout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查找后代元素，使用页面超时时间（5 秒）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ele1.ele(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;search text&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查找后代元素，使用单独设置的超时时间（1 秒）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ele1.ele(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;some text&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">timeout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="📌-主动等待" tabindex="-1">📌 主动等待 <a class="header-anchor" href="#📌-主动等待" aria-label="Permalink to &quot;📌 主动等待&quot;">​</a></h3><p>页面对象的<code>wait.eles_loaded()</code>方法，可主动等待指定元素加载到 DOM。</p><p>用法详见等待章节。</p><hr><h2 id="✅️-链式写法" tabindex="-1">✅️ 链式写法 <a class="header-anchor" href="#✅️-链式写法" aria-label="Permalink to &quot;✅️ 链式写法&quot;">​</a></h2><p>因为元素对象本身又可以查找对象，所有可实现多级链式操作，可使程序更简洁。</p><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab.ele(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#s_fm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).ele(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#su&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>其中<code>ele()</code>可省略，简化写成：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#s_fm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#su&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h2 id="✅️-找不到元素时" tabindex="-1">✅️ 找不到元素时 <a class="header-anchor" href="#✅️-找不到元素时" aria-label="Permalink to &quot;✅️ 找不到元素时&quot;">​</a></h2><h3 id="📌-默认情况" tabindex="-1">📌 默认情况 <a class="header-anchor" href="#📌-默认情况" aria-label="Permalink to &quot;📌 默认情况&quot;">​</a></h3><p>默认情况下，找不到元素时不会立即抛出异常，而是返回一个<code>NoneElement</code>对象。</p><p>这个对象用<code>if</code>判断表现为<code>False</code>，调用其功能会抛出<code>ElementNotFoundError</code>异常。</p><p>这样可以用<code>if</code>判断是否找到元素，也可以用<code>try</code>去捕获异常。</p><p>查找多个元素找不到时，返回空的<code>list</code>。</p><p><strong>示例，用<code>if</code>判断：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab.ele(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;****&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 判断是否找到元素</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ele:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;找到了。&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ele:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;没有找到。&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>示例，用<code>try</code>捕获：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ele.click()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">except</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ElementNotFoundError:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;没有找到。&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h3 id="📌-立即抛出异常" tabindex="-1">📌 立即抛出异常 <a class="header-anchor" href="#📌-立即抛出异常" aria-label="Permalink to &quot;📌 立即抛出异常&quot;">​</a></h3><p>如果想在找不到元素时立刻抛出异常，可以用以下方法设置。</p><p>此设置为全局有效，在项目开始时设置一次即可。</p><p>查找多个元素找不到时，依然返回空的<code>list</code>。</p><p>设置全局变量：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage.common </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Settings</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Settings.set_raise_when_ele_not_found(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage.common </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Settings</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Settings.set_raise_when_ele_not_found(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium().latest_tab</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://www.baidu.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ele </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#abcd&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># (&#39;#abcd&#39;)这个元素不存在</span></span></code></pre></div><p>输出：</p><div class="language-console vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DrissionPage.errors.ElementNotFoundError: </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">没有找到元素。</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">method: ele()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">args: {&#39;locator&#39;: &#39;#abcd&#39;}</span></span></code></pre></div><hr><h3 id="📌-设置默认返回值" tabindex="-1">📌 设置默认返回值 <a class="header-anchor" href="#📌-设置默认返回值" aria-label="Permalink to &quot;📌 设置默认返回值&quot;">​</a></h3><p>如果查找元素后要获取一个属性，但这个元素不一定存在，或者链式查找其中一个节点找不到，可以设置查找失败时返回的值，而不是抛出异常，可以简化一些采集逻辑。</p><p>使用浏览器页面对象的<code>set.NoneElement_value()</code>方法设置该值。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>value</code></td><td style="text-align:center;"><code>Any</code></td><td style="text-align:center;"><code>None</code></td><td>将返回的设定值</td></tr><tr><td style="text-align:center;"><code>on_off</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>True</code></td><td><code>bool</code>表示是否启用</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><p><strong>示例</strong></p><p>比如说，遍历页面上一个列表中多个对象，但其中有些元素可能缺失某个子元素，可以这样写：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium().latest_tab</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.set.NoneElement_value(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;没找到&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> li </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab.eles(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;t:li&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> li(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).text</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> li(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.age&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).text</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    phone </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> li(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.phone&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).text</span></span></code></pre></div><p>这样，假如某个子元素不存在，不会抛出异常，而是返回<code>&#39;没找到&#39;</code>这个字符串。</p>`,48)])])}const g=i(e,[["render",h]]);export{o as __pageData,g as default};
