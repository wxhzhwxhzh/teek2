import{_ as i,c as a,o as t,aN as n}from"./chunks/framework.0ZSa6Wd7.js";const E=JSON.parse('{"title":"🛰️ 连接浏览器","description":"","frontmatter":{"id":"connect_browser","title":"🛰️ 连接浏览器"},"headers":[],"relativePath":"dp/2.浏览器控制/2.connect_browser.md","filePath":"dp/2.浏览器控制/2.connect_browser.md"}'),h={name:"dp/2.浏览器控制/2.connect_browser.md"};function p(e,s,l,k,o,r){return t(),a("div",null,[...s[0]||(s[0]=[n(`<h1 id="🛰️-连接浏览器" tabindex="-1">🛰️ 连接浏览器 <a class="header-anchor" href="#🛰️-连接浏览器" aria-label="Permalink to &quot;🛰️ 连接浏览器&quot;">​</a></h1><p><code>Chromium</code>对象用于连接和管理浏览器。标签页的开关和获取、整体运行参数配置、浏览器信息获取等都由它进行。</p><p>根据不同的配置，可以接管已打开的浏览器，也可以启动新的浏览器。</p><p>每个浏览器只能有一个<code>Chromium</code>对象（同一进程中）。对同一个浏览器重复使用<code>Chromium()</code>获取的都是同一个对象。</p><div class="tip custom-block"><p class="custom-block-title">Tips</p><pre><code>程序结束时，被打开的浏览器不会主动关闭（VSCode 启动的除外），以便下次运行程序时使用。
新手在使用无头模式时需注意，程序关闭后其实浏览器进程还在，只是看不见。
</code></pre></div><h2 id="✅️-chromium初始化参数" tabindex="-1">✅️ <code>Chromium</code>初始化参数 <a class="header-anchor" href="#✅️-chromium初始化参数" aria-label="Permalink to &quot;✅️ \`Chromium\`初始化参数&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:center;">初始化参数</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>addr_or_opts</code></td><td style="text-align:center;"><code>str</code><br><code>int</code><br><code>ChromiumOptions</code><br></td><td style="text-align:center;"><code>None</code></td><td>浏览器启动配置或接管信息。<br>传入 &#39;ip: port&#39; 字符串、浏览器 ws 地址、端口数字或<code>ChromiumOptions</code>对象时按配置启动或接管浏览器；<br>为<code>None</code>时使用配置文件配置启动浏览器</td></tr><tr><td style="text-align:center;"><code>session_options</code></td><td style="text-align:center;"><code>SessionOptions</code><br><code>None</code><br><code>False</code></td><td style="text-align:center;"><code>None</code></td><td>使用双模 Tab 时使用的默认 Session 配置，为<code>None</code>使用 ini 文件配置，为<code>False</code>不从 ini 读取</td></tr></tbody></table><hr><h2 id="✅️-直接创建" tabindex="-1">✅️ 直接创建 <a class="header-anchor" href="#✅️-直接创建" aria-label="Permalink to &quot;✅️ 直接创建&quot;">​</a></h2><h3 id="📌-默认方式" tabindex="-1">📌 默认方式 <a class="header-anchor" href="#📌-默认方式" aria-label="Permalink to &quot;📌 默认方式&quot;">​</a></h3><p>这种方式代码最简洁，程序会使用默认配置，自动生成页面对象。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">browser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium()</span></span></code></pre></div><p>创建<code>Chromium</code>对象时会在指定端口启动浏览器，或接管该端口已有浏览器。</p><p>默认情况下，程序使用 9222 端口，浏览器可执行文件路径为<code>&#39;chrome&#39;</code>。</p><p>如路径中没找到浏览器可执行文件，Windows 系统下程序会在注册表中查找路径。</p><p>如果都没找到，则要用下文介绍的手动配置方法。</p><p>直接创建时，程序默认读取 ini 文件配置，如 ini 文件不存在，会使用内置配置。</p><p>默认 ini 和内置配置信息详见“进阶使用-&gt;配置文件的使用”章节。</p><div class="tip custom-block"><p class="custom-block-title">Tips</p><pre><code>您可以修改配置文件中的配置，实现所有程序都按您的需要进行启动，详见”启动配置“章节。
</code></pre></div><hr><h3 id="📌-指定端口或地址" tabindex="-1">📌 指定端口或地址 <a class="header-anchor" href="#📌-指定端口或地址" aria-label="Permalink to &quot;📌 指定端口或地址&quot;">​</a></h3><p>创建<code>Chromium</code>对象时向<code>addr_or_opts</code>参数传入端口号或地址，可接管指定端口浏览器，若端口空闲，使用默认配置在该端口启动一个浏览器。</p><p>传入端口时用<code>int</code>类型，传入地址时用<code>&#39;ip:port&#39;</code>格式，传入 ws 地址需为完整地址。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">browser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9333</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 接管9333端口的浏览器，如该端口空闲，启动一个浏览器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">browser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;127.0.0.1:9333&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 与上一行一样</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">browser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ws://127.0.0.1:8987/devtools/browser/3e590fc5-4587-47e1-8756-cf6784f2fef3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 指定ws连接</span></span></code></pre></div><hr><h2 id="✅️-通过配置信息创建" tabindex="-1">✅️ 通过配置信息创建 <a class="header-anchor" href="#✅️-通过配置信息创建" aria-label="Permalink to &quot;✅️ 通过配置信息创建&quot;">​</a></h2><p>如果需要已指定方式启动浏览器，可使用<code>ChromiumOptions</code>。它是专门用于设置浏览器初始状态的类，内置了常用的配置。详细使用方法见“浏览器启动配置”一节。</p><h3 id="📌-使用方法" tabindex="-1">📌 使用方法 <a class="header-anchor" href="#📌-使用方法" aria-label="Permalink to &quot;📌 使用方法&quot;">​</a></h3><p><code>ChromiumOptions</code>用于管理创建浏览器时的配置，内置了常用的配置，并能实现链式操作。详细使用方法见“启动配置”一节。</p><table tabindex="0"><thead><tr><th>初始化参数</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td><code>read_file</code></td><td><code>bool</code></td><td><code>True</code></td><td>是否从 ini 文件中读取配置信息，如果为<code>False</code>则用默认配置创建</td></tr><tr><td><code>ini_path</code></td><td><code>str</code></td><td><code>None</code></td><td>文件路径，为<code>None</code>则读取默认 ini 文件</td></tr></tbody></table><div class="warning custom-block"><p class="custom-block-title">注意</p><pre><code>- 配置对象只有在启动浏览器时生效。
- 浏览器创建后再修改这个配置是没有效果的。
- 接管已打开的浏览器配置也不会生效。
</code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 导入 ChromiumOptions</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium, ChromiumOptions</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建浏览器配置对象，指定浏览器路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">co </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ChromiumOptions().set_browser_path(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">D:</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\c</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">hrome</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">exe</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用该配置创建页面对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">browser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">addr_or_opts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">co)</span></span></code></pre></div><hr><h3 id="📌-使用指定-ini-文件创建" tabindex="-1">📌 使用指定 ini 文件创建 <a class="header-anchor" href="#📌-使用指定-ini-文件创建" aria-label="Permalink to &quot;📌 使用指定 ini 文件创建&quot;">​</a></h3><p>以上方法是使用默认 ini 文件中保存的配置信息创建对象，你可以保存一个 ini 文件到别的地方，并在创建对象时指定使用它。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium, ChromiumOptions</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建配置对象时指定要读取的ini文件路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">co </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ChromiumOptions(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ini_path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">/config1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">ini</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用该配置对象创建页面</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">browser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">addr_or_opts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">co)</span></span></code></pre></div><hr><div class="wwads-cn wwads-horizontal" data-id="317"></div><br><h2 id="✅️-接管已打开的浏览器" tabindex="-1">✅️ 接管已打开的浏览器 <a class="header-anchor" href="#✅️-接管已打开的浏览器" aria-label="Permalink to &quot;✅️ 接管已打开的浏览器&quot;">​</a></h2><p>页面对象创建时，只要指定的地址（&#39;ip:port&#39; 或 ws 地址）已有浏览器在运行，就会直接接管。无论浏览器是下面哪种方式启动的。</p><h3 id="📌-用程序启动的浏览器" tabindex="-1">📌 用程序启动的浏览器 <a class="header-anchor" href="#📌-用程序启动的浏览器" aria-label="Permalink to &quot;📌 用程序启动的浏览器&quot;">​</a></h3><p>默认情况下，创建浏览器页面对象时会自动启动一个浏览器。只要这个浏览器不关闭，下次运行程序时会接管同一个浏览器继续操作（配置的 ip:port 信息不变）。</p><p>这种方式极大地方便了程序的调试，使程序不必每次重新开始，可以单独调试某个功能。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在9333端口启动浏览器同时创建对象，如果浏览器已经存在，则接管它</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">browser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9333</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h3 id="📌-手动打开的浏览器" tabindex="-1">📌 手动打开的浏览器 <a class="header-anchor" href="#📌-手动打开的浏览器" aria-label="Permalink to &quot;📌 手动打开的浏览器&quot;">​</a></h3><p>如果需要手动打开浏览器再接管，可以这样做：</p><ol><li>右键点击浏览器图标，选择属性</li><li>在“目标”路径后面加上<code> --remote-debugging-port=端口号</code>（注意最前面有个空格）</li><li>点击确定</li><li>在程序中的浏览器配置中指定接管该端口浏览器</li></ol><p>文件快捷方式的目标路径设置：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;D:\\chrome.exe&quot; --remote-debugging-port=9333</span></span></code></pre></div><p>程序代码：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">browser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9333</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">注意</p><pre><code>接管浏览器时只有\`local_port\`、\`address\`参数是有效的。
</code></pre></div><hr><h3 id="📌-bat-文件启动的浏览器" tabindex="-1">📌 bat 文件启动的浏览器 <a class="header-anchor" href="#📌-bat-文件启动的浏览器" aria-label="Permalink to &quot;📌 bat 文件启动的浏览器&quot;">​</a></h3><p>可以把上一种方式的目标路径设置写进 bat 文件（Windows系统），运行 bat 文件来启动浏览器，再用程序接管。</p><p>新建一个文本文件，在里面输入以下内容（路径改为自己电脑的）：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;D:\\chrome.exe&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --remote-debugging-port=9333</span></span></code></pre></div><p>保存后把后缀改成 bat，然后双击运行就能在 9333 端口启动一个浏览器。程序代码则和上一个方法一致。</p><hr><h3 id="📌-用-ws-连接的远程浏览器" tabindex="-1">📌 用 ws 连接的远程浏览器 <a class="header-anchor" href="#📌-用-ws-连接的远程浏览器" aria-label="Permalink to &quot;📌 用 ws 连接的远程浏览器&quot;">​</a></h3><p>直接使用 ws 地址：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">browser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;wss://****.com/ws?apiKey=5482a4cba773&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>在<code>ChromiumOptions</code>设置 ws 地址：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium, ChromiumOptions</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">co </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ChromiumOptions().set_address(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;wss://****.com/ws?apiKey=5482a4cba773&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">browser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium(co)</span></span></code></pre></div><hr><h2 id="✅️-多浏览器共存" tabindex="-1">✅️ 多浏览器共存 <a class="header-anchor" href="#✅️-多浏览器共存" aria-label="Permalink to &quot;✅️ 多浏览器共存&quot;">​</a></h2><p>如果想要同时操作多个浏览器，或者自己在使用其中一个上网，同时控制另外几个跑自动化，就需要给这些被程序控制的浏览器设置单独的 <strong>端口</strong> 和 <strong>用户文件夹</strong>，否则会造成冲突。</p><h3 id="📌-指定独立端口和数据文件夹" tabindex="-1">📌 指定独立端口和数据文件夹 <a class="header-anchor" href="#📌-指定独立端口和数据文件夹" aria-label="Permalink to &quot;📌 指定独立端口和数据文件夹&quot;">​</a></h3><p>每个要启动的浏览器使用一个独立的<code>ChromiumOptions</code>对象进行设置：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium, ChromiumOptions</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建多个配置对象，每个指定不同的端口号和用户文件夹路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">co1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ChromiumOptions().set_local_port(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9111</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).set_user_data_path(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">D:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">ata1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">co2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ChromiumOptions().set_local_port(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9222</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).set_user_data_path(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">D:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">ata2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建多个页面对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">addr_or_opts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">co1).latest_tab</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">addr_or_opts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">co2).latest_tab</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 每个页面对象控制一个浏览器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab1.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://DrissionPage.cn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab2.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://www.baidu.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">注意</p><pre><code>每个浏览器都要设置独立的端口号和用户文件夹，二者缺一不可。
</code></pre></div><hr><h3 id="📌-auto-port-方法" tabindex="-1">📌 <code>auto_port()</code>方法 <a class="header-anchor" href="#📌-auto-port-方法" aria-label="Permalink to &quot;📌 \`auto_port()\`方法&quot;">​</a></h3><p><code>ChromiumOptions</code>对象的<code>auto_port()</code>方法，可以指定程序每次使用空闲的端口和临时用户文件夹创建浏览器。</p><p>使用<code>auto_port()</code>的配置对象可由多个<code>Chromium</code>对象共用，不会出现冲突。</p><p>这种方式创建的浏览器是全新不带任何数据的，并且运行数据会自动清除。</p><div class="tip custom-block"><p class="custom-block-title">Tips</p><pre><code>\`auto_port()\`支持多线程，多进程使用时由小概率出现端口冲突。  
多进程使用时，可用\`scope\`参数指定每个进程使用的端口范围，以免发生冲突。
</code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium, ChromiumOptions</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">co </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ChromiumOptions().auto_port()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">addr_or_opts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">co).latest_tab</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">addr_or_opts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">co).latest_tab</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab2.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://DrissionPage.cn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab1.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://www.baidu.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h3 id="📌-在-ini-文件设置自动分配" tabindex="-1">📌 在 ini 文件设置自动分配 <a class="header-anchor" href="#📌-在-ini-文件设置自动分配" aria-label="Permalink to &quot;📌 在 ini 文件设置自动分配&quot;">​</a></h3><p>可以把自动分配的配置记录到 ini 文件，这样无需创建<code>ChromiumOptions</code>，每次启动的浏览器都是独立的，不会冲突。但和<code>auto_port()</code>一样，这些浏览器也不能复用。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ChromiumOptions</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ChromiumOptions().auto_port(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).save()</span></span></code></pre></div><p>这段代码把该配置记录到 ini 文件，只需运行一次，要关闭的话把参数换成<code>False</code>再执行一次即可。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium().latest_tab</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium().latest_tab</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab1.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://DrissionPage.cn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab2.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://www.baidu.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h2 id="✅️-使用系统浏览器用户目录" tabindex="-1">✅️ 使用系统浏览器用户目录 <a class="header-anchor" href="#✅️-使用系统浏览器用户目录" aria-label="Permalink to &quot;✅️ 使用系统浏览器用户目录&quot;">​</a></h2><p>初始默认配置下，程序会为每个使用的端口创建空的用户目录，并且每次接管都使用，这样可以有效避免浏览器冲突。</p><p>有些时候我们希望使用系统安装的浏览器的默认用户文件夹。以便复用用户信息和插件等。</p><p>我们可以这样设置：</p><h3 id="📌-使用chromiumoptions" tabindex="-1">📌 使用<code>ChromiumOptions</code> <a class="header-anchor" href="#📌-使用chromiumoptions" aria-label="Permalink to &quot;📌 使用\`ChromiumOptions\`&quot;">​</a></h3><p>用<code>ChromiumOptions</code>在每次启动时配置。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><pre><code>使用这种方法时，需关闭已启动的系统浏览器，否则会连接失败。
</code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium, ChromiumOptions</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">co </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ChromiumOptions().use_system_user_path()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">browser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium(co)</span></span></code></pre></div><hr><h3 id="📌-使用-ini-文件" tabindex="-1">📌 使用 ini 文件 <a class="header-anchor" href="#📌-使用-ini-文件" aria-label="Permalink to &quot;📌 使用 ini 文件&quot;">​</a></h3><p>把这个配置记录到 ini 文件，就不用每次使用都配置。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><pre><code>使用这种方法时，需关闭已启动的系统浏览器，否则会连接失败。
</code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ChromiumOptions</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ChromiumOptions().use_system_user_path().save()</span></span></code></pre></div><hr><h3 id="📌-手动打开再接管" tabindex="-1">📌 手动打开再接管 <a class="header-anchor" href="#📌-手动打开再接管" aria-label="Permalink to &quot;📌 手动打开再接管&quot;">​</a></h3><p>参考上文 “接管已打开浏览器” 的方法，手动为浏览器设置端口启动，再用 DrissionPage 接管。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">browser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9333</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 已手动在9333端口启动浏览器</span></span></code></pre></div><hr><h2 id="✅️-创建全新的浏览器" tabindex="-1">✅️ 创建全新的浏览器 <a class="header-anchor" href="#✅️-创建全新的浏览器" aria-label="Permalink to &quot;✅️ 创建全新的浏览器&quot;">​</a></h2><p>默认情况下，程序会复用之前用过的浏览器用户数据，因此可能带有登录数据、历史记录等。</p><p>如果想打开全新的浏览器，可用以下方法：</p><h3 id="📌-使用auto-port" tabindex="-1">📌 使用<code>auto_port()</code> <a class="header-anchor" href="#📌-使用auto-port" aria-label="Permalink to &quot;📌 使用\`auto_port()\`&quot;">​</a></h3><p>上文提过的<code>auto_port()</code>方法，会自动查找一个空闲的端口启动全新的浏览器。</p><p>示例见上文。</p><hr><h3 id="📌-使用new-env" tabindex="-1">📌 使用<code>new_env()</code> <a class="header-anchor" href="#📌-使用new-env" aria-label="Permalink to &quot;📌 使用\`new_env()\`&quot;">​</a></h3><p><code>ChromiumOptions</code>对象的<code>new_env()</code>方法，可指定启动全新的浏览器。</p><p>如果指定端口已有浏览器，会自动关闭再启动新的。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium, ChromiumOptions</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">co </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ChromiumOptions().new_env()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">browser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium(co)</span></span></code></pre></div><hr><h3 id="📌-手动指定端口和路径" tabindex="-1">📌 手动指定端口和路径 <a class="header-anchor" href="#📌-手动指定端口和路径" aria-label="Permalink to &quot;📌 手动指定端口和路径&quot;">​</a></h3><p>给浏览器用户文件夹路径指定空的路径，以及指定一个空闲的端口，即可打开全新浏览器。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium, ChromiumOptions</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">co </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ChromiumOptions().set_local_port(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9333</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).set_user_data_path(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">C:</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">mp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">browser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium(co)</span></span></code></pre></div><hr><h2 id="✅️-用户文件夹位置" tabindex="-1">✅️ 用户文件夹位置 <a class="header-anchor" href="#✅️-用户文件夹位置" aria-label="Permalink to &quot;✅️ 用户文件夹位置&quot;">​</a></h2><p>复用用户文件夹可使用已登录的状态、已安装的插件、已设置好的配置等。</p><p>以下不同配置下用户文件夹的存放位置。</p><h3 id="📌-默认配置" tabindex="-1">📌 默认配置 <a class="header-anchor" href="#📌-默认配置" aria-label="Permalink to &quot;📌 默认配置&quot;">​</a></h3><p>默认配置下，由 DrissionPage 创建的浏览器，用户文件夹在系统临时文件夹的<code>DrissionPage\\userData</code>文件夹内，以端口命名。</p><p>假如用 DrissionPage 默认配置在 9222 端口创建一个浏览器，那么用户数据就存放在<code>C:\\Users\\用户名\\AppData\\Local\\Temp\\DrissionPage\\userData\\9222</code>路径。</p><p>这个用户文件夹不会主动清除，下次再使用 9222 端口时，会继续使用。</p><p>如果使用<code>auto_port()</code>，会存放在系统临时文件夹的<code>DrissionPage\\autoPortData</code>文件夹内，以端口命名。</p><p>如<code>C:\\Users\\用户名\\AppData\\Local\\Temp\\DrissionPage\\autoPortData\\21489</code>。</p><p>这个用户文件夹是临时的，用完会被主动清除。</p><hr><h3 id="📌-自定义位置" tabindex="-1">📌 自定义位置 <a class="header-anchor" href="#📌-自定义位置" aria-label="Permalink to &quot;📌 自定义位置&quot;">​</a></h3><p>如果要指定用户文件夹存放位置，可用<code>ChromiumOptions</code>对象的<code>set_tmp_path()</code>方法。</p><p>也可以保持到 ini 文件，可省略每次设置。</p><p>示例：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ChromiumOptions</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ChromiumOptions().set_tmp_path(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">D:</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">mp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).save()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 保存到ini文件</span></span></code></pre></div><hr><h3 id="📌-单独指定某个用户文件夹" tabindex="-1">📌 单独指定某个用户文件夹 <a class="header-anchor" href="#📌-单独指定某个用户文件夹" aria-label="Permalink to &quot;📌 单独指定某个用户文件夹&quot;">​</a></h3><p>指定用户文件夹路径，或使用系统文件夹路径，请查看上文。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium, ChromiumOptions</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">co </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ChromiumOptions().set_user_data_path(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">D:</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">mp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">browser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium(co)</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium, ChromiumOptions</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">co </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ChromiumOptions().use_system_user_path()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">browser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium(co)</span></span></code></pre></div>`,142)])])}const c=i(h,[["render",p]]);export{E as __pageData,c as default};
