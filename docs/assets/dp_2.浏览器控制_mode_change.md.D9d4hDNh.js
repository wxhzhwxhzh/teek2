import{_ as t,c as s,o as a,aM as o}from"./chunks/framework.CWgDeAH8.js";const k=JSON.parse('{"title":"🛰️ 模式切换","description":"","frontmatter":{"id":"mode_change","title":"🛰️ 模式切换"},"headers":[],"relativePath":"dp/2.浏览器控制/mode_change.md","filePath":"dp/2.浏览器控制/mode_change.md"}'),i={name:"dp/2.浏览器控制/mode_change.md"};function d(n,e,l,c,r,h){return a(),s("div",null,[...e[0]||(e[0]=[o('<h1 id="🛰️-模式切换" tabindex="-1">🛰️ 模式切换 <a class="header-anchor" href="#🛰️-模式切换" aria-label="Permalink to &quot;🛰️ 模式切换&quot;">​</a></h1><div class="wwads-cn wwads-horizontal" data-id="317"></div><br><p><code>MixTab</code>和<code>WebPage</code>有两种模式，d 模式用于控制浏览器，s 模式使用<code>requests</code>收发数据包。</p><p>两种模式访问页面和提取数据的逻辑是一致的，使用同一套 api。</p><p>每个标签页对象创建时都处于 d 模式。</p><p>使用<code>change_mode()</code>方法进行切换。模式切换的时候会同步登录信息。</p><p>s 模式下仍然可以控制浏览器，但因为共用 api，<code>ele()</code>等两种模式共用的方法，查找对象是<code>requests</code>的结果，而非浏览器。</p><p>因此 s 模式下要控制浏览器，只能调用 d 模式独有的功能。</p><p>在切换模式前已获取的元素对象则可继续操作。</p><div class="tip custom-block"><p class="custom-block-title">Tips</p><pre><code>切换到 s 模式后，如不再需要浏览器，可以用`close()`或`quit()`方法关闭标签页或浏览器。标签页对象继续用于收发数据包。\n</code></pre></div><h2 id="✅️️-示例" tabindex="-1">✅️️ 示例 <a class="header-anchor" href="#✅️️-示例" aria-label="Permalink to &quot;✅️️ 示例&quot;">​</a></h2><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DrissionPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chromium().latest_tab</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://DrissionPage.cn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tab.title)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 打印d模式下网页title</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tab.change_mode()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 切换到s模式，切换时会自动访问d模式的url</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tab.title)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 打印s模式下网页title</span></span></code></pre></div><p><strong>输出：</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DrissionPage官网</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DrissionPage官网</span></span></code></pre></div><hr><h2 id="✅️️-相关属性和方法" tabindex="-1">✅️️ 相关属性和方法 <a class="header-anchor" href="#✅️️-相关属性和方法" aria-label="Permalink to &quot;✅️️ 相关属性和方法&quot;">​</a></h2><h3 id="📌️-mode" tabindex="-1">📌️ <code>mode</code> <a class="header-anchor" href="#📌️-mode" aria-label="Permalink to &quot;📌️ `mode`&quot;">​</a></h3><p>此属性返回当前模式。<code>&#39;d&#39;</code>或<code>&#39;s&#39;</code>。</p><p><strong>类型：</strong><code>str</code></p><hr><h3 id="📌-change-mode" tabindex="-1">📌 <code>change_mode()</code> <a class="header-anchor" href="#📌-change-mode" aria-label="Permalink to &quot;📌 `change_mode()`&quot;">​</a></h3><p>此方法用于切换运行模式。</p><p>切换模式时默认复制当前 cookies 到目标模式，且使用当前 url 进行跳转。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><pre><code>切换模式时只同步 cookies，不同步 headers，如果网站要求特定的 headers 才能访问，就会卡住直到超时。\n这时可以设置`go`为`False`，切换 s 模式后再自己构造 headers 访问。\n</code></pre></div><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>mode</code></td><td style="text-align:center;"><code>str</code><br><code>None</code></td><td style="text-align:center;"><code>None</code></td><td>接收<code>&#39;s&#39;</code>或<code>&#39;d&#39;</code>，以切换到指定模式<br>接收<code>None</code>则切换到与当前相对的另一个模式</td></tr><tr><td style="text-align:center;"><code>go</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>True</code></td><td>目标模式是否跳转到原模式的 url</td></tr><tr><td style="text-align:center;"><code>copy_cookies</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>True</code></td><td>切换时是否复制 cookies 到目标模式</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><hr><h3 id="📌-cookies-to-session" tabindex="-1">📌 <code>cookies_to_session()</code> <a class="header-anchor" href="#📌-cookies-to-session" aria-label="Permalink to &quot;📌 `cookies_to_session()`&quot;">​</a></h3><p>此方法用于复制浏览器当前页面的 cookies 到<code>Session</code>对象。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>copy_user_agent</code></td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>True</code></td><td>是否复制 user agent 信息</td></tr></tbody></table><p><strong>返回：</strong><code>None</code></p><h3 id="📌-cookies-to-browser" tabindex="-1">📌 <code>cookies_to_browser()</code> <a class="header-anchor" href="#📌-cookies-to-browser" aria-label="Permalink to &quot;📌 `cookies_to_browser()`&quot;">​</a></h3><p>此方法用于把<code>Session</code>对象的 cookies 复制到浏览器。</p><p><strong>参数：</strong> 无</p><p><strong>返回：</strong><code>None</code></p><hr><h2 id="✅️️-说明" tabindex="-1">✅️️ 说明 <a class="header-anchor" href="#✅️️-说明" aria-label="Permalink to &quot;✅️️ 说明&quot;">​</a></h2><ul><li>主要的 api 两种模式是共用的，如<code>get()</code>，d 模式下控制浏览跳转，s 模式下控制<code>Session</code>对象跳转</li><li>s 模式下获取的元素对象为<code>SessionElement</code>，d 模式下为<code>ChromiumElement</code>等</li><li><code>post()</code>方法无论在哪种模式下都能使用</li><li>s 模式下也能控制浏览器，但只能使用 d 模式独有功能控制</li></ul><hr>',40)])])}const g=t(i,[["render",d]]);export{k as __pageData,g as default};
